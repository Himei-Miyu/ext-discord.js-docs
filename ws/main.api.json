{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.32.0",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@discordjs/ws!",
  "docComment": "",
  "name": "@discordjs/ws",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/ws!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!CloseCodes:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum CloseCodes "
            }
          ],
          "releaseTag": "Public",
          "name": "CloseCodes",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!CloseCodes.Normal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Normal = "
                },
                {
                  "kind": "Content",
                  "text": "1000"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Normal"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!CloseCodes.Resuming:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Resuming = "
                },
                {
                  "kind": "Content",
                  "text": "4200"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Resuming"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!CompressionMethod:enum",
          "docComment": "/**\n * Valid compression methods\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum CompressionMethod "
            }
          ],
          "releaseTag": "Public",
          "name": "CompressionMethod",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!CompressionMethod.ZlibStream:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ZlibStream = "
                },
                {
                  "kind": "Content",
                  "text": "\"zlib-stream\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ZlibStream"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/ws!DefaultDeviceProperty:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultDeviceProperty: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultDeviceProperty",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/ws!DefaultWebSocketManagerOptions:var",
          "docComment": "/**\n * Default options used by the manager\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultWebSocketManagerOptions: "
            },
            {
              "kind": "Reference",
              "text": "OptionalWebSocketManagerOptions",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultWebSocketManagerOptions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!Encoding:enum",
          "docComment": "/**\n * Valid encoding types\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum Encoding "
            }
          ],
          "releaseTag": "Public",
          "name": "Encoding",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!Encoding.JSON:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "JSON = "
                },
                {
                  "kind": "Content",
                  "text": "\"json\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "JSON"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface FetchingStrategyOptions extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WebSocketManagerOptions",
              "canonicalReference": "@discordjs/ws!WebSocketManagerOptions:type"
            },
            {
              "kind": "Content",
              "text": ", 'rest' | 'retrieveSessionInfo' | 'shardCount' | 'shardIds' | 'updateSessionInfo'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FetchingStrategyOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!FetchingStrategyOptions#gatewayInformation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly gatewayInformation: "
                },
                {
                  "kind": "Reference",
                  "text": "APIGatewayBotInfo",
                  "canonicalReference": "discord-api-types!APIGatewayBotInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gatewayInformation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!FetchingStrategyOptions#shardCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly shardCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!IContextFetchingStrategy:interface",
          "docComment": "/**\n * Strategies responsible solely for making manager information accessible\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface IContextFetchingStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextFetchingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!IContextFetchingStrategy#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IContextFetchingStrategy#retrieveSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retrieveSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "retrieveSessionInfo"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IContextFetchingStrategy#updateSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sessionInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sessionInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "updateSessionInfo"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!IdentifyThrottler:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class IdentifyThrottler "
            }
          ],
          "releaseTag": "Public",
          "name": "IdentifyThrottler",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!IdentifyThrottler:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `IdentifyThrottler` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(manager: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "manager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!IdentifyThrottler#waitForIdentify:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForIdentify(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "waitForIdentify"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/ws!ImportantGatewayOpcodes:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImportantGatewayOpcodes: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GatewayOpcodes",
              "canonicalReference": "discord-api-types!GatewayOpcodes:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ImportantGatewayOpcodes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!IShardingStrategy:interface",
          "docComment": "/**\n * Strategies responsible for spawning, initializing connections, destroying shards, and relaying events\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface IShardingStrategy "
            }
          ],
          "releaseTag": "Public",
          "name": "IShardingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IShardingStrategy#connect:member(1)",
              "docComment": "/**\n * Initializes all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IShardingStrategy#destroy:member(1)",
              "docComment": "/**\n * Destroys all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'recover'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "destroy"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IShardingStrategy#send:member(1)",
              "docComment": "/**\n * Sends a payload to a shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewaySendPayload",
                  "canonicalReference": "discord-api-types!GatewaySendPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "send"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!IShardingStrategy#spawn:member(1)",
              "docComment": "/**\n * Spawns all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spawn(shardIds: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardIds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "spawn"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/ws!ManagerShardEventsMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type ManagerShardEventsMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof "
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEventsMap",
              "canonicalReference": "@discordjs/ws!WebSocketShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": "]: [\n        "
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEventsMap",
              "canonicalReference": "@discordjs/ws!WebSocketShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": "[K] extends [] ? {\n            shardId: number;\n        } : "
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEventsMap",
              "canonicalReference": "@discordjs/ws!WebSocketShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": "[K][0] & {\n            shardId: number;\n        }\n    ];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ManagerShardEventsMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/ws!managerToFetchingStrategyOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function managerToFetchingStrategyOptions(manager: "
            },
            {
              "kind": "Reference",
              "text": "WebSocketManager",
              "canonicalReference": "@discordjs/ws!WebSocketManager:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchingStrategyOptions",
              "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "manager",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "managerToFetchingStrategyOptions"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions:interface",
          "docComment": "/**\n * Optional additional configuration for the WebSocketManager\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface OptionalWebSocketManagerOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "OptionalWebSocketManagerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#compression:member",
              "docComment": "/**\n * The compression method to use\n *\n * @defaultValue\n *\n * `null` (no compression)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compression: "
                },
                {
                  "kind": "Reference",
                  "text": "CompressionMethod",
                  "canonicalReference": "@discordjs/ws!CompressionMethod:enum"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "compression",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#encoding:member",
              "docComment": "/**\n * The encoding to use\n *\n * @defaultValue\n *\n * `'json'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding: "
                },
                {
                  "kind": "Reference",
                  "text": "Encoding",
                  "canonicalReference": "@discordjs/ws!Encoding:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#handshakeTimeout:member",
              "docComment": "/**\n * How long to wait for a shard to connect before giving up\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handshakeTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handshakeTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#helloTimeout:member",
              "docComment": "/**\n * How long to wait for a shard's HELLO packet before giving up\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "helloTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "helloTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#identifyProperties:member",
              "docComment": "/**\n * Properties to send to the gateway when identifying\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "identifyProperties: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayIdentifyProperties",
                  "canonicalReference": "discord-api-types!GatewayIdentifyProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "identifyProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#initialPresence:member",
              "docComment": "/**\n * Initial presence data to send to the gateway when identifying\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialPresence: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayPresenceUpdateData",
                  "canonicalReference": "discord-api-types!GatewayPresenceUpdateData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialPresence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#largeThreshold:member",
              "docComment": "/**\n * Value between 50 and 250, total number of members where the gateway will stop sending offline members in the guild member list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "largeThreshold: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "largeThreshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#readyTimeout:member",
              "docComment": "/**\n * How long to wait for a shard's READY packet before giving up\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readyTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "readyTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#retrieveSessionInfo:member(1)",
              "docComment": "/**\n * Function used to retrieve session information (and attempt to resume) for a given shard\n *\n * @example\n * ```ts\n * const manager = new WebSocketManager({\n *   async retrieveSessionInfo(shardId): Awaitable<SessionInfo | null> {\n *     // Fetch this info from redis or similar\n *     return { sessionId: string, sequence: number };\n *     // Return null if no information is found\n *   },\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retrieveSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "retrieveSessionInfo"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#shardCount:member",
              "docComment": "/**\n * The total number of shards across all WebsocketManagers you intend to instantiate. Use `null` to use Discord's recommended shard count\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardCount: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#shardIds:member",
              "docComment": "/**\n * The ids of the shards this WebSocketManager should manage. Use `null` to simply spawn 0 through `shardCount - 1`\n *\n * @example\n * ```ts\n * const manager = new WebSocketManager({\n *   shardIds: [1, 3, 7], // spawns shard 1, 3, and 7, nothing else\n * });\n * ```\n *\n * @example\n * ```ts\n * const manager = new WebSocketManager({\n *   shardIds: {\n *     start: 3,\n *     end: 6,\n *   }, // spawns shards 3, 4, 5, and 6\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardIds: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | "
                },
                {
                  "kind": "Reference",
                  "text": "ShardRange",
                  "canonicalReference": "@discordjs/ws!ShardRange:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#updateSessionInfo:member(1)",
              "docComment": "/**\n * Function used to store session information for a given shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sessionInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sessionInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "updateSessionInfo"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions#version:member",
              "docComment": "/**\n * The gateway version to use\n *\n * @defaultValue\n *\n * `'10'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions:interface",
          "docComment": "/**\n * Required options for the WebSocketManager\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface RequiredWebSocketManagerOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "RequiredWebSocketManagerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions#intents:member",
              "docComment": "/**\n * The intents to request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intents: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayIntentBits",
                  "canonicalReference": "discord-api-types!GatewayIntentBits:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "intents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions#rest:member",
              "docComment": "/**\n * The REST instance to use for fetching gateway information\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions#token:member",
              "docComment": "/**\n * The token to use for identifying with the gateway\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "token",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!SessionInfo:interface",
          "docComment": "/**\n * Session information for a given shard, used to resume a session\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface SessionInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "SessionInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!SessionInfo#resumeURL:member",
              "docComment": "/**\n * URL to use when resuming\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resumeURL: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resumeURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!SessionInfo#sequence:member",
              "docComment": "/**\n * The sequence number of the last message sent by the shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sequence: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sequence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!SessionInfo#sessionId:member",
              "docComment": "/**\n * Session id for this shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sessionId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sessionId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!SessionInfo#shardCount:member",
              "docComment": "/**\n * The total number of shards at the time of this shard identifying\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!SessionInfo#shardId:member",
              "docComment": "/**\n * The id of the shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!ShardRange:interface",
          "docComment": "/**\n * Represents a range of shard ids\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ShardRange "
            }
          ],
          "releaseTag": "Public",
          "name": "ShardRange",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!ShardRange#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!ShardRange#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!SimpleContextFetchingStrategy:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SimpleContextFetchingStrategy implements "
            },
            {
              "kind": "Reference",
              "text": "IContextFetchingStrategy",
              "canonicalReference": "@discordjs/ws!IContextFetchingStrategy:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SimpleContextFetchingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!SimpleContextFetchingStrategy:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SimpleContextFetchingStrategy` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(manager: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "manager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/ws!SimpleContextFetchingStrategy#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleContextFetchingStrategy#retrieveSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retrieveSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "retrieveSessionInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleContextFetchingStrategy#updateSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sessionInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "_discordjs_util.Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sessionInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "updateSessionInfo"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!SimpleShardingStrategy:class",
          "docComment": "/**\n * Simple strategy that just spawns shards in the current process\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class SimpleShardingStrategy implements "
            },
            {
              "kind": "Reference",
              "text": "IShardingStrategy",
              "canonicalReference": "@discordjs/ws!IShardingStrategy:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SimpleShardingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!SimpleShardingStrategy:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SimpleShardingStrategy` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(manager: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "manager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleShardingStrategy#connect:member(1)",
              "docComment": "/**\n * Initializes all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleShardingStrategy#destroy:member(1)",
              "docComment": "/**\n * Destroys all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'recover'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleShardingStrategy#send:member(1)",
              "docComment": "/**\n * Sends a payload to a shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewaySendPayload",
                  "canonicalReference": "discord-api-types!GatewaySendPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!SimpleShardingStrategy#spawn:member(1)",
              "docComment": "/**\n * Spawns all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spawn(shardIds: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardIds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "spawn"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!WebSocketManager:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class WebSocketManager extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ManagerShardEventsMap",
              "canonicalReference": "@discordjs/ws!ManagerShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketManager",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!WebSocketManager:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WebSocketManager` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OptionalWebSocketManagerOptions",
                  "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "> & "
                },
                {
                  "kind": "Reference",
                  "text": "RequiredWebSocketManagerOptions",
                  "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#connect:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#destroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'recover'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#fetchGatewayInformation:member(1)",
              "docComment": "/**\n * Fetches the gateway information from Discord - or returns it from cache if available\n *\n * @param force - Whether to ignore the cache and force a fresh fetch\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fetchGatewayInformation(force?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIGatewayBotInfo",
                  "canonicalReference": "discord-api-types!APIGatewayBotInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "force",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "fetchGatewayInformation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#getShardCount:member(1)",
              "docComment": "/**\n * Yields the total number of shards across for your bot, accounting for Discord recommendations\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getShardCount(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getShardCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#getShardIds:member(1)",
              "docComment": "/**\n * Yields the ids of the shards this manager should manage\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getShardIds(force?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "force",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "getShardIds"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/ws!WebSocketManager#options:member",
              "docComment": "/**\n * The options being used by this manager\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManagerOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketManagerOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewaySendPayload",
                  "canonicalReference": "discord-api-types!GatewaySendPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Awaitable",
                  "canonicalReference": "@discordjs/util!Awaitable:type"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#setStrategy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStrategy(strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "IShardingStrategy",
                  "canonicalReference": "@discordjs/ws!IShardingStrategy:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "strategy",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setStrategy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketManager#updateShardCount:member(1)",
              "docComment": "/**\n * Updates your total shard count on-the-fly, spawning shards as needed\n *\n * @param shardCount - The new shard count to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateShardCount(shardCount: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<this>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "updateShardCount"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/ws!WebSocketManagerOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type WebSocketManagerOptions = "
            },
            {
              "kind": "Reference",
              "text": "OptionalWebSocketManagerOptions",
              "canonicalReference": "@discordjs/ws!OptionalWebSocketManagerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "RequiredWebSocketManagerOptions",
              "canonicalReference": "@discordjs/ws!RequiredWebSocketManagerOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketManagerOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!WebSocketShard:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class WebSocketShard extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEventsMap",
              "canonicalReference": "@discordjs/ws!WebSocketShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShard",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!WebSocketShard:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WebSocketShard` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextFetchingStrategy",
                  "canonicalReference": "@discordjs/ws!IContextFetchingStrategy:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "strategy",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketShard#connect:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketShard#destroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WebSocketShard#send:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(payload: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewaySendPayload",
                  "canonicalReference": "discord-api-types!GatewaySendPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "send"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/ws!WebSocketShard#strategy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly strategy: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextFetchingStrategy",
                  "canonicalReference": "@discordjs/ws!IContextFetchingStrategy:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strategy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface WebSocketShardDestroyOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShardDestroyOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions#reason:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions#recover:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recover?: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyRecovery",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyRecovery:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "recover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!WebSocketShardDestroyRecovery:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum WebSocketShardDestroyRecovery "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShardDestroyRecovery",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyRecovery.Reconnect:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Reconnect = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Reconnect"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyRecovery.Resume:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Resume = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Resume"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!WebSocketShardEvents:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum WebSocketShardEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShardEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Debug = "
                },
                {
                  "kind": "Content",
                  "text": "\"debug\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Debug"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Dispatch:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Dispatch = "
                },
                {
                  "kind": "Content",
                  "text": "\"dispatch\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Dispatch"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Hello:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Hello = "
                },
                {
                  "kind": "Content",
                  "text": "\"hello\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Hello"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Ready:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ready = "
                },
                {
                  "kind": "Content",
                  "text": "\"ready\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ready"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Resumed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Resumed = "
                },
                {
                  "kind": "Content",
                  "text": "\"resumed\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Resumed"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/ws!WebSocketShardEventsMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type WebSocketShardEventsMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    ["
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents.Debug",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Debug:member"
            },
            {
              "kind": "Content",
              "text": "]: [payload: {\n        message: string;\n    }];\n    ["
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents.Hello",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Hello:member"
            },
            {
              "kind": "Content",
              "text": "]: [];\n    ["
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents.Ready",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Ready:member"
            },
            {
              "kind": "Content",
              "text": "]: [payload: {\n        data: "
            },
            {
              "kind": "Reference",
              "text": "GatewayReadyDispatchData",
              "canonicalReference": "discord-api-types!GatewayReadyDispatchData:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    }];\n    ["
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents.Resumed",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Resumed:member"
            },
            {
              "kind": "Content",
              "text": "]: [];\n    ["
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents.Dispatch",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents.Dispatch:member"
            },
            {
              "kind": "Content",
              "text": "]: [payload: {\n        data: "
            },
            {
              "kind": "Reference",
              "text": "GatewayDispatchPayload",
              "canonicalReference": "discord-api-types!GatewayDispatchPayload:type"
            },
            {
              "kind": "Content",
              "text": ";\n    }];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShardEventsMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!WebSocketShardStatus:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum WebSocketShardStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "WebSocketShardStatus",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardStatus.Connecting:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Connecting = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Connecting"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardStatus.Idle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Idle = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Idle"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardStatus.Ready:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ready = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ready"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WebSocketShardStatus.Resuming:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Resuming = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Resuming"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!WorkerContextFetchingStrategy:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class WorkerContextFetchingStrategy implements "
            },
            {
              "kind": "Reference",
              "text": "IContextFetchingStrategy",
              "canonicalReference": "@discordjs/ws!IContextFetchingStrategy:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerContextFetchingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!WorkerContextFetchingStrategy:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WorkerContextFetchingStrategy` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/ws!WorkerContextFetchingStrategy#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerContextFetchingStrategy#retrieveSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retrieveSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "retrieveSessionInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerContextFetchingStrategy#updateSessionInfo:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSessionInfo(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sessionInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "SessionInfo",
                  "canonicalReference": "@discordjs/ws!SessionInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sessionInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "updateSessionInfo"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!WorkerData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface WorkerData extends "
            },
            {
              "kind": "Reference",
              "text": "FetchingStrategyOptions",
              "canonicalReference": "@discordjs/ws!FetchingStrategyOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!WorkerData#shardIds:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardIds: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/ws!WorkerRecievePayload:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type WorkerRecievePayload = "
            },
            {
              "kind": "Content",
              "text": "{\n    data: any;\n    event: "
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardEvents",
              "canonicalReference": "@discordjs/ws!WebSocketShardEvents:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerRecievePayloadOp.Event",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Event:member"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    nonce: number;\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerRecievePayloadOp.RetrieveSessionInfo",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.RetrieveSessionInfo:member"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerRecievePayloadOp.Connected",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Connected:member"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerRecievePayloadOp.Destroyed",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Destroyed:member"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerRecievePayloadOp.UpdateSessionInfo",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.UpdateSessionInfo:member"
            },
            {
              "kind": "Content",
              "text": ";\n    session: "
            },
            {
              "kind": "Reference",
              "text": "SessionInfo",
              "canonicalReference": "@discordjs/ws!SessionInfo:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    shardId: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerRecievePayload",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum WorkerRecievePayloadOp "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerRecievePayloadOp",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Connected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Connected = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Connected"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Destroyed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Destroyed = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Destroyed"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.Event:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Event = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Event"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.RetrieveSessionInfo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RetrieveSessionInfo = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RetrieveSessionInfo"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerRecievePayloadOp.UpdateSessionInfo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UpdateSessionInfo = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UpdateSessionInfo"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/ws!WorkerSendPayload:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type WorkerSendPayload = "
            },
            {
              "kind": "Content",
              "text": "{\n    nonce: number;\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerSendPayloadOp.SessionInfoResponse",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.SessionInfoResponse:member"
            },
            {
              "kind": "Content",
              "text": ";\n    session: "
            },
            {
              "kind": "Reference",
              "text": "SessionInfo",
              "canonicalReference": "@discordjs/ws!SessionInfo:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerSendPayloadOp.Connect",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Connect:member"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerSendPayloadOp.Destroy",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Destroy:member"
            },
            {
              "kind": "Content",
              "text": ";\n    options?: "
            },
            {
              "kind": "Reference",
              "text": "WebSocketShardDestroyOptions",
              "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n} | {\n    op: "
            },
            {
              "kind": "Reference",
              "text": "WorkerSendPayloadOp.Send",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Send:member"
            },
            {
              "kind": "Content",
              "text": ";\n    payload: "
            },
            {
              "kind": "Reference",
              "text": "GatewaySendPayload",
              "canonicalReference": "discord-api-types!GatewaySendPayload:type"
            },
            {
              "kind": "Content",
              "text": ";\n    shardId: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerSendPayload",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum WorkerSendPayloadOp "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerSendPayloadOp",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Connect:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Connect = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Connect"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Destroy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Destroy = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Destroy"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.Send:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Send = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Send"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/ws!WorkerSendPayloadOp.SessionInfoResponse:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SessionInfoResponse = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SessionInfoResponse"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/ws!WorkerShardingStrategy:class",
          "docComment": "/**\n * Strategy used to spawn threads in worker_threads\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class WorkerShardingStrategy implements "
            },
            {
              "kind": "Reference",
              "text": "IShardingStrategy",
              "canonicalReference": "@discordjs/ws!IShardingStrategy:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerShardingStrategy",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategy:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WorkerShardingStrategy` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(manager: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerShardingStrategyOptions",
                  "canonicalReference": "@discordjs/ws!WorkerShardingStrategyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "manager",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategy#connect:member(1)",
              "docComment": "/**\n * Initializes all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategy#destroy:member(1)",
              "docComment": "/**\n * Destroys all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketShardDestroyOptions",
                  "canonicalReference": "@discordjs/ws!WebSocketShardDestroyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'recover'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategy#send:member(1)",
              "docComment": "/**\n * Sends a payload to a shard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewaySendPayload",
                  "canonicalReference": "discord-api-types!GatewaySendPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "send"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategy#spawn:member(1)",
              "docComment": "/**\n * Spawns all the shards\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spawn(shardIds: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardIds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "spawn"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/ws!WorkerShardingStrategyOptions:interface",
          "docComment": "/**\n * Options for a {@link WorkerShardingStrategy}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface WorkerShardingStrategyOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerShardingStrategyOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/ws!WorkerShardingStrategyOptions#shardsPerWorker:member",
              "docComment": "/**\n * Dictates how many shards should be spawned per worker thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardsPerWorker: "
                },
                {
                  "kind": "Content",
                  "text": "number | 'all'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardsPerWorker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
