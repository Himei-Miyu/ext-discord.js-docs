{"meta":{"generator":"0.12.1","format":30,"date":1750788790620},"classes":[{"name":"BaseClient","description":"The base class for all clients.","extends":[[["AsyncEventEmitter"]]],"props":[{"name":"options","description":"The options the client was instantiated with","scope":"instance","type":[[["ClientOptions"]]],"meta":{"line":30,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"rest","description":"The REST manager of the client","scope":"instance","type":[[["REST"]]],"meta":{"line":59,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","scope":"instance","returns":[[[["void"]]]],"meta":{"line":69,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"deleteWebhook","description":"Deletes a webhook.","scope":"instance","params":[{"name":"id","description":"The webhook's id","type":[[["Snowflake"]]]},{"name":"options","description":"Options for deleting the webhook","optional":true,"type":[[["WebhookDeleteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":89,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"incrementMaxListeners","description":"Increments max listeners by one, if they are not zero.","scope":"instance","access":"private","meta":{"line":98,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"decrementMaxListeners","description":"Decrements max listeners by one, if they are not zero.","scope":"instance","access":"private","meta":{"line":110,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"meta":{"line":16,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"SnowflakeUtil","description":"This class is an alias for {@link https://www.npmjs.com/package/@sapphire/snowflake @sapphire/snowflake}'s\n`DiscordSnowflake` class.\n\nCheck their documentation\n{@link https://www.sapphirejs.dev/docs/Documentation/api-utilities/classes/sapphire_snowflake.Snowflake here}\n({@link https://www.sapphirejs.dev/docs/Guide/utilities/snowflake guide})\nto see what you can do.","meta":{"line":801,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"Client","description":"The main hub for interacting with the Discord API, and the starting point for any bot.","extends":[[["BaseClient"]]],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","type":[[["ClientOptions"]]]}]},"props":[{"name":"presence","description":"The presence of the Client","scope":"instance","access":"private","type":[[["ClientPresence"]]],"meta":{"line":77,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"status","description":"The current status of this Client","scope":"instance","access":"private","type":[[["Status"]]],"meta":{"line":87,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"expectedGuilds","description":"A set of guild ids this Client expects to receive","scope":"instance","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":89,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"readyTimeout","description":"The ready timeout","scope":"instance","access":"private","nullable":true,"type":[[["NodeJSTimeout"]]],"meta":{"line":98,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"actions","description":"The action manager of the client","scope":"instance","access":"private","type":[[["ActionsManager"]]],"meta":{"line":113,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"users","description":"The user manager of this client","scope":"instance","type":[[["UserManager"]]],"meta":{"line":120,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"guilds","description":"A manager of all the guilds the client is currently handling -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of","scope":"instance","type":[[["GuildManager"]]],"meta":{"line":128,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"channels","description":"All of the {@link BaseChannel}s that the client is currently handling -\nas long as sharding isn't being used, this will be *every* channel in *every* guild the bot\nis a member of. Note that DM channels will not be initially cached, and thus not be present\nin the Manager without their explicit fetching or use.","scope":"instance","type":[[["ChannelManager"]]],"meta":{"line":138,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"sweepers","description":"The sweeping functions and their intervals used to periodically sweep caches","scope":"instance","type":[[["Sweepers"]]],"meta":{"line":145,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"token","description":"Authorization token for the logged in bot.\nIf present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n<warn>This should be kept private at all times.</warn>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":156,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ws","description":"The WebSocket manager of the client","scope":"instance","type":[[["WebSocketManager"]]],"meta":{"line":176,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"shard","description":"Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})","scope":"instance","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":183,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"voice","description":"The voice manager of the client","scope":"instance","type":[[["ClientVoiceManager"]]],"meta":{"line":192,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"user","description":"User that the client is logged in as","scope":"instance","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":199,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"application","description":"The application of this bot","scope":"instance","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":206,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"pings","description":"The latencies of the WebSocketShard connections","scope":"instance","type":[[["Collection","<"],["number",", "],["number",">"]]],"meta":{"line":213,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"lastPingTimestamps","description":"The last time a ping was sent (a timestamp) for each WebSocketShard connection","scope":"instance","type":[[["Collection","<"],["number",", "],["number",">"]]],"meta":{"line":220,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"readyTimestamp","description":"Timestamp of the time the client was last {@link Status.Ready} at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":227,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"incomingPacketQueue","description":"An array of queued events before this Client became ready","scope":"instance","access":"private","type":[[["Array","<"],["Object",">"]]],"meta":{"line":229,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the {@link Status.Ready} state\n(each time the client disconnects and successfully reconnects, this will be overwritten)","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":248,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"uptime","description":"How long it has been since the client last entered the {@link Status.Ready} state in milliseconds","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":258,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ping","description":"The average ping of all WebSocketShards","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":440,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_censoredToken","description":"Partially censored client token for debug logging purposes.","scope":"instance","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":714,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"options","description":"The options the client was instantiated with","scope":"instance","type":[[["ClientOptions"]]],"meta":{"line":30,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"rest","description":"The REST manager of the client","scope":"instance","type":[[["REST"]]],"meta":{"line":59,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"methods":[{"name":"login","description":"Logs the client in, establishing a WebSocket connection to Discord.","scope":"instance","examples":["client.login('my token');"],"params":[{"name":"token","description":"Token of the account to log in with","optional":true,"default":"this.token","type":[[["string"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["string",">"]]],"description":"Token of the account used"}],"meta":{"line":270,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_checkReady","description":"Checks if the client can be marked as ready","scope":"instance","access":"private","async":true,"meta":{"line":295,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_attachEvents","description":"Attaches event handlers to the WebSocketShardManager from `@discordjs/ws`.","scope":"instance","access":"private","meta":{"line":343,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_handlePacket","description":"Processes a packet and queues it if this WebSocketManager is not ready.","scope":"instance","access":"private","params":[{"name":"packet","description":"The packet to be handled","type":[[["GatewayDispatchPayload"]]]},{"name":"shardId","description":"The shardId that received this packet","type":[[["number"]]]}],"async":true,"meta":{"line":372,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_broadcast","description":"Broadcasts a packet to every shard of this client handles.","scope":"instance","access":"private","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"async":true,"meta":{"line":400,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_triggerClientReady","description":"Causes the client to be marked as ready and emits the ready event.","scope":"instance","access":"private","meta":{"line":410,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"isReady","description":"Returns whether the client has logged in, indicative of being able to access\nproperties such as `user` and `application`.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":430,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"destroy","description":"Logs out, terminates the connection to Discord, and destroys the client.","scope":"instance","async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":449,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchInvite","description":"Obtains an invite from Discord.","scope":"instance","examples":["client.fetchInvite('https://discord.gg/djs')\n  .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]},{"name":"options","description":"Options for fetching the invite","optional":true,"type":[[["ClientFetchInviteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":477,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchGuildTemplate","description":"Obtains a template from Discord.","scope":"instance","examples":["client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n  .then(template => console.log(`Obtained template with code: ${template.code}`))\n  .catch(console.error);"],"params":[{"name":"template","description":"Template code or URL","type":[[["GuildTemplateResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildTemplate",">"]]]],"meta":{"line":497,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchWebhook","description":"Obtains a webhook from Discord.","scope":"instance","examples":["client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The webhook's id","type":[[["Snowflake"]]]},{"name":"token","description":"Token for the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Webhook",">"]]]],"meta":{"line":514,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchVoiceRegions","description":"Obtains the available voice regions from Discord.","scope":"instance","examples":["client.fetchVoiceRegions()\n  .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]]],"meta":{"line":528,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchSticker","description":"Obtains a sticker from Discord.","scope":"instance","examples":["client.fetchSticker('id')\n  .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The sticker's id","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Sticker",">"]]]],"meta":{"line":545,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchStickerPacks","description":"Obtains the list of available sticker packs.","scope":"instance","examples":["client.fetchStickerPacks()\n  .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n  .catch(console.error);","client.fetchStickerPacks({ packId: '751604115435421716' })\n  .then(pack => console.log(`Sticker pack name: ${pack.name}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching sticker packs","optional":true,"default":"{}","type":[[["StickerPackFetchOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<("],["Collection","<"],["Snowflake",", "],["StickerPack",">|"],["StickerPack",")>"]]],"description":"A collection of sticker packs, or a single sticker pack if a packId was provided"}],"meta":{"line":572,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchDefaultSoundboardSounds","description":"Obtains the list of default soundboard sounds.","scope":"instance","examples":["client.fetchDefaultSoundboardSounds()\n .then(sounds => console.log(`Available soundboard sounds are: ${sounds.map(sound => sound.name).join(', ')}`))\n .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["SoundboardSound",">>"]]]],"meta":{"line":591,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchGuildPreview","description":"Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.","scope":"instance","params":[{"name":"guild","description":"The guild to fetch the preview for","type":[[["GuildResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildPreview",">"]]]],"meta":{"line":602,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"fetchGuildWidget","description":"Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.","scope":"instance","params":[{"name":"guild","description":"The guild to fetch the widget data for","type":[[["GuildResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["Widget",">"]]]],"meta":{"line":615,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"generateInvite","description":"Generates a link that can be used to invite the bot to a guild.","scope":"instance","examples":["const link = client.generateInvite({\n  scopes: [OAuth2Scopes.ApplicationsCommands],\n});\nconsole.log(`Generated application invite link: ${link}`);","const link = client.generateInvite({\n  permissions: [\n    PermissionFlagsBits.SendMessages,\n    PermissionFlagsBits.ManageGuild,\n    PermissionFlagsBits.MentionEveryone,\n  ],\n  scopes: [OAuth2Scopes.Bot],\n});\nconsole.log(`Generated bot invite link: ${link}`);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["InviteGenerationOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":653,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_eval","description":"Calls {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.","scope":"instance","access":"private","params":[{"name":"script","description":"Script to eval","type":[[["string"]]]}],"returns":[[[["*"]]]],"meta":{"line":731,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"_validateOptions","description":"Validates the client options.","scope":"instance","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":742,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"deleteWebhook","description":"Deletes a webhook.","scope":"instance","inherits":"BaseClient#deleteWebhook","inherited":true,"params":[{"name":"id","description":"The webhook's id","type":[[["Snowflake"]]]},{"name":"options","description":"Options for deleting the webhook","optional":true,"type":[[["WebhookDeleteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":89,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"incrementMaxListeners","description":"Increments max listeners by one, if they are not zero.","scope":"instance","access":"private","inherits":"BaseClient#incrementMaxListeners","inherited":true,"meta":{"line":98,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"decrementMaxListeners","description":"Decrements max listeners by one, if they are not zero.","scope":"instance","access":"private","inherits":"BaseClient#decrementMaxListeners","inherited":true,"meta":{"line":110,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"events":[{"name":"channelCreate","description":"Emitted whenever a guild channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["GuildChannel"]]]}],"meta":{"line":12,"file":"ChannelCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"channelDelete","description":"Emitted whenever a channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":13,"file":"ChannelDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"emojiCreate","description":"Emitted whenever a custom emoji is created in a guild.","params":[{"name":"emoji","description":"The emoji that was created","type":[[["GuildEmoji"]]]}],"meta":{"line":10,"file":"GuildEmojiCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"emojiDelete","description":"Emitted whenever a custom emoji is deleted in a guild.","params":[{"name":"emoji","description":"The emoji that was deleted","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"emojiUpdate","description":"Emitted whenever a custom emoji is updated in a guild.","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["GuildEmoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]}],"meta":{"line":16,"file":"GuildMemberRemove.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":23,"file":"GuildMemberUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildMemberAvailable","description":"Emitted whenever a member becomes available.","params":[{"name":"member","description":"The member that became available","type":[[["GuildMember"]]]}],"meta":{"line":33,"file":"GuildMemberUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created","type":[[["Role"]]]}],"meta":{"line":14,"file":"GuildRoleCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted","type":[[["Role"]]]}],"meta":{"line":16,"file":"GuildRoleDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildScheduledEventDelete","description":"Emitted whenever a guild scheduled event is deleted.","params":[{"name":"guildScheduledEvent","description":"The deleted guild scheduled event","type":[[["GuildScheduledEvent"]]]}],"meta":{"line":16,"file":"GuildScheduledEventDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildScheduledEventUserAdd","description":"Emitted whenever a user subscribes to a guild scheduled event","params":[{"name":"guildScheduledEvent","description":"The guild scheduled event","type":[[["GuildScheduledEvent"]]]},{"name":"user","description":"The user who subscribed","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildScheduledEventUserAdd.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildScheduledEventUserRemove","description":"Emitted whenever a user unsubscribes from a guild scheduled event","params":[{"name":"guildScheduledEvent","description":"The guild scheduled event","type":[[["GuildScheduledEvent"]]]},{"name":"user","description":"The user who unsubscribed","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildScheduledEventUserRemove.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildSoundboardSoundDelete","description":"Emitted whenever a soundboard sound is deleted in a guild.","params":[{"name":"soundboardSound","description":"The soundboard sound that was deleted","type":[[["SoundboardSound"]]]}],"meta":{"line":17,"file":"GuildSoundboardSoundDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"stickerCreate","description":"Emitted whenever a custom sticker is created in a guild.","params":[{"name":"sticker","description":"The sticker that was created","type":[[["Sticker"]]]}],"meta":{"line":10,"file":"GuildStickerCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"stickerDelete","description":"Emitted whenever a custom sticker is deleted in a guild.","params":[{"name":"sticker","description":"The sticker that was deleted","type":[[["Sticker"]]]}],"meta":{"line":9,"file":"GuildStickerDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"stickerUpdate","description":"Emitted whenever a custom sticker is updated in a guild.","params":[{"name":"oldSticker","description":"The old sticker","type":[[["Sticker"]]]},{"name":"newSticker","description":"The new sticker","type":[[["Sticker"]]]}],"meta":{"line":9,"file":"GuildStickerUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"interactionCreate","description":"Emitted when an interaction is created.","params":[{"name":"interaction","description":"The interaction which was created","type":[[["BaseInteraction"]]]}],"meta":{"line":98,"file":"InteractionCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageCreate","description":"Emitted whenever a message is created.","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":27,"file":"MessageCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted.","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":19,"file":"MessageDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk.","params":[{"name":"messages","description":"The deleted messages, mapped by their id","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]},{"name":"channel","description":"The channel that the messages were deleted in","type":[[["GuildTextBasedChannel"]]]}],"meta":{"line":34,"file":"MessageDeleteBulk.js","path":"packages/discord.js/src/client/actions"}},{"name":"messagePollVoteAdd","description":"Emitted whenever a user votes in a poll.","params":[{"name":"pollAnswer","description":"The answer that was voted on","type":[[["PollAnswer"]]]},{"name":"userId","description":"The id of the user that voted","type":[[["Snowflake"]]]}],"meta":{"line":28,"file":"MessagePollVoteAdd.js","path":"packages/discord.js/src/client/actions"}},{"name":"messagePollVoteRemove","description":"Emitted whenever a user removes their vote in a poll.","params":[{"name":"pollAnswer","description":"The answer where the vote was removed","type":[[["PollAnswer"]]]},{"name":"userId","description":"The id of the user that removed their vote","type":[[["Snowflake"]]]}],"meta":{"line":26,"file":"MessagePollVoteRemove.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageReactionAdd","description":"Emitted whenever a reaction is added to a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that applied the guild or reaction emoji","type":[[["User"]]]},{"name":"details","description":"Details of adding the reaction","type":[[["MessageReactionEventDetails"]]]}],"meta":{"line":58,"file":"MessageReactionAdd.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageReactionRemove","description":"Emitted whenever a reaction is removed from a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user whose emoji or reaction emoji was removed","type":[[["User"]]]},{"name":"details","description":"Details of removing the reaction","type":[[["MessageReactionEventDetails"]]]}],"meta":{"line":37,"file":"MessageReactionRemove.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageReactionRemoveAll","description":"Emitted whenever all reactions are removed from a cached message.","params":[{"name":"message","description":"The message the reactions were removed from","type":[[["Message"]]]},{"name":"reactions","description":"The cached message reactions that were removed.","type":[[["Collection","<("],["string","|"],["Snowflake","), "],["MessageReaction",">"]]]}],"meta":{"line":26,"file":"MessageReactionRemoveAll.js","path":"packages/discord.js/src/client/actions"}},{"name":"messageReactionRemoveEmoji","description":"Emitted when a bot removes an emoji reaction from a cached message.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]}],"meta":{"line":18,"file":"MessageReactionRemoveEmoji.js","path":"packages/discord.js/src/client/actions"}},{"name":"stageInstanceCreate","description":"Emitted whenever a stage instance is created.","params":[{"name":"stageInstance","description":"The created stage instance","type":[[["StageInstance"]]]}],"meta":{"line":14,"file":"StageInstanceCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"stageInstanceDelete","description":"Emitted whenever a stage instance is deleted.","params":[{"name":"stageInstance","description":"The deleted stage instance","type":[[["StageInstance"]]]}],"meta":{"line":16,"file":"StageInstanceDelete.js","path":"packages/discord.js/src/client/actions"}},{"name":"stageInstanceUpdate","description":"Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level","params":[{"name":"oldStageInstance","description":"The stage instance before the update","nullable":true,"type":[[["StageInstance"]]]},{"name":"newStageInstance","description":"The stage instance after the update","type":[[["StageInstance"]]]}],"meta":{"line":15,"file":"StageInstanceUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"threadCreate","description":"Emitted whenever a thread is created or when the client user is added to a thread.","params":[{"name":"thread","description":"The thread that was created","type":[[["ThreadChannel"]]]},{"name":"newlyCreated","description":"Whether the thread was newly created","type":[[["boolean"]]]}],"meta":{"line":12,"file":"ThreadCreate.js","path":"packages/discord.js/src/client/actions"}},{"name":"threadMembersUpdate","description":"Emitted whenever members are added or removed from a thread.\n<info>This event requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>","params":[{"name":"addedMembers","description":"The members that were added","type":[[["Collection","<"],["Snowflake",", "],["ThreadMember",">"]]]},{"name":"removedMembers","description":"The members that were removed","type":[[["Collection","<"],["Snowflake",", "],["ThreadMember",">"]]]},{"name":"thread","description":"The thread where members got updated","type":[[["ThreadChannel"]]]}],"meta":{"line":33,"file":"ThreadMembersUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"typing","description":"The typing state","type":[[["Typing"]]]}],"meta":{"line":19,"file":"TypingStart.js","path":"packages/discord.js/src/client/actions"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.\nTriggered by the Discord gateway events {@link Events.UserUpdate},\n{@link Events.GuildMemberUpdate}, and {@link Events.PresenceUpdate}.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":14,"file":"UserUpdate.js","path":"packages/discord.js/src/client/actions"}},{"name":"debug","description":"Emitted for general debugging information.","params":[{"name":"info","description":"The debug information","type":[[["string"]]]}],"meta":{"line":827,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"warn","description":"Emitted for general warnings.","params":[{"name":"info","description":"The warning","type":[[["string"]]]}],"meta":{"line":834,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"clientReady","description":"Emitted when the client becomes ready to start working.","params":[{"name":"client","description":"The client","type":[[["Client"]]]}],"meta":{"line":415,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"applicationCommandPermissionsUpdate","description":"Emitted whenever permissions for an application command in a guild were updated.\n<warn>This includes permission updates for other applications in addition to the logged in client,\ncheck `data.applicationId` to verify which application the update is for</warn>","params":[{"name":"data","description":"The updated permissions","type":[[["ApplicationCommandPermissionsUpdateData"]]]}],"meta":{"line":6,"file":"APPLICATION_COMMAND_PERMISSIONS_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"autoModerationActionExecution","description":"Emitted whenever an auto moderation rule is triggered.\n<info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>","params":[{"name":"autoModerationActionExecution","description":"The data of the execution","type":[[["AutoModerationActionExecution"]]]}],"meta":{"line":10,"file":"AUTO_MODERATION_ACTION_EXECUTION.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"autoModerationRuleCreate","description":"Emitted whenever an auto moderation rule is created.\n<info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>","params":[{"name":"autoModerationRule","description":"The created auto moderation rule","type":[[["AutoModerationRule"]]]}],"meta":{"line":11,"file":"AUTO_MODERATION_RULE_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"autoModerationRuleDelete","description":"Emitted whenever an auto moderation rule is deleted.\n<info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>","params":[{"name":"autoModerationRule","description":"The deleted auto moderation rule","type":[[["AutoModerationRule"]]]}],"meta":{"line":14,"file":"AUTO_MODERATION_RULE_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"autoModerationRuleUpdate","description":"Emitted whenever an auto moderation rule gets updated.\n<info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>","params":[{"name":"oldAutoModerationRule","description":"The auto moderation rule before the update","nullable":true,"type":[[["AutoModerationRule"]]]},{"name":"newAutoModerationRule","description":"The auto moderation rule after the update","type":[[["AutoModerationRule"]]]}],"meta":{"line":12,"file":"AUTO_MODERATION_RULE_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\nnot much information can be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occurred in","type":[[["TextBasedChannels"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":13,"file":"CHANNEL_PINS_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["DMChannel"]],[["GuildChannel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":8,"file":"CHANNEL_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"entitlementCreate","description":"Emitted whenever an entitlement is created.","params":[{"name":"entitlement","description":"The entitlement that was created","type":[[["Entitlement"]]]}],"meta":{"line":8,"file":"ENTITLEMENT_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"entitlementDelete","description":"Emitted whenever an entitlement is deleted.\n<warn>Entitlements are not deleted when they expire.\nThis is only triggered when Discord issues a refund or deletes the entitlement manually.</warn>","params":[{"name":"entitlement","description":"The entitlement that was deleted","type":[[["Entitlement"]]]}],"meta":{"line":10,"file":"ENTITLEMENT_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"entitlementUpdate","description":"Emitted whenever an entitlement is updated - i.e. when a user's subscription renews.","params":[{"name":"oldEntitlement","description":"The entitlement before the update","nullable":true,"type":[[["Entitlement"]]]},{"name":"newEntitlement","description":"The entitlement after the update","type":[[["Entitlement"]]]}],"meta":{"line":9,"file":"ENTITLEMENT_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildAuditLogEntryCreate","description":"Emitted whenever a guild audit log entry is created.","params":[{"name":"auditLogEntry","description":"The entry that was created","type":[[["GuildAuditLogsEntry"]]]},{"name":"guild","description":"The guild where the entry was created","type":[[["Guild"]]]}],"meta":{"line":12,"file":"GUILD_AUDIT_LOG_ENTRY_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"ban","description":"The ban that occurred","type":[[["GuildBan"]]]}],"meta":{"line":9,"file":"GUILD_BAN_ADD.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"ban","description":"The ban that was removed","type":[[["GuildBan"]]]}],"meta":{"line":14,"file":"GUILD_BAN_REMOVE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildAvailable","description":"Emitted whenever a guild becomes available.","params":[{"name":"guild","description":"The guild that became available","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GUILD_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":26,"file":"GUILD_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable","type":[[["Guild"]]]}],"meta":{"line":12,"file":"GUILD_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildDelete","description":"Emitted whenever a guild kicks the client or the guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":30,"file":"GUILD_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildIntegrationsUpdate","description":"Emitted whenever a guild integration is updated","params":[{"name":"guild","description":"The guild whose integrations were updated","type":[[["Guild"]]]}],"meta":{"line":9,"file":"GUILD_INTEGRATIONS_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":10,"file":"GUILD_MEMBER_ADD.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]},{"name":"chunk","description":"Properties of the received chunk","type":[[["GuildMembersChunk"]]]}],"meta":{"line":27,"file":"GUILD_MEMBERS_CHUNK.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update","type":[[["Role"]]]}],"meta":{"line":14,"file":"GUILD_ROLE_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildScheduledEventCreate","description":"Emitted whenever a guild scheduled event is created.","params":[{"name":"guildScheduledEvent","description":"The created guild scheduled event","type":[[["GuildScheduledEvent"]]]}],"meta":{"line":11,"file":"GUILD_SCHEDULED_EVENT_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildScheduledEventUpdate","description":"Emitted whenever a guild scheduled event gets updated.","params":[{"name":"oldGuildScheduledEvent","description":"The guild scheduled event object before the update","nullable":true,"type":[[["GuildScheduledEvent"]]]},{"name":"newGuildScheduledEvent","description":"The guild scheduled event object after the update","type":[[["GuildScheduledEvent"]]]}],"meta":{"line":12,"file":"GUILD_SCHEDULED_EVENT_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildSoundboardSoundCreate","description":"Emitted whenever a guild soundboard sound is created.","params":[{"name":"soundboardSound","description":"The created guild soundboard sound","type":[[["SoundboardSound"]]]}],"meta":{"line":12,"file":"GUILD_SOUNDBOARD_SOUND_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildSoundboardSoundUpdate","description":"Emitted whenever a guild soundboard sound is updated.","params":[{"name":"oldGuildSoundboardSound","description":"The guild soundboard sound before the update","nullable":true,"type":[[["SoundboardSound"]]]},{"name":"newGuildSoundboardSound","description":"The guild soundboard sound after the update","type":[[["SoundboardSound"]]]}],"meta":{"line":13,"file":"GUILD_SOUNDBOARD_SOUND_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"guildSoundboardSoundsUpdate","description":"Emitted whenever multiple guild soundboard sounds are updated.","params":[{"name":"soundboardSounds","description":"The updated soundboard sounds","type":[[["Collection","<"],["Snowflake",", "],["SoundboardSound",">"]]]},{"name":"guild","description":"The guild that the soundboard sounds are from","type":[[["Guild"]]]}],"meta":{"line":17,"file":"GUILD_SOUNDBOARD_SOUNDS_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"inviteCreate","description":"Emitted when an invite is created.\n<info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>","params":[{"name":"invite","description":"The invite that was created","type":[[["Invite"]]]}],"meta":{"line":13,"file":"INVITE_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"inviteDelete","description":"Emitted when an invite is deleted.\n<info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>","params":[{"name":"invite","description":"The invite that was deleted","type":[[["Invite"]]]}],"meta":{"line":16,"file":"INVITE_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":8,"file":"MESSAGE_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence (e.g. status, activity) is changed.","params":[{"name":"oldPresence","description":"The presence before the update, if one at all","nullable":true,"type":[[["Presence"]]]},{"name":"newPresence","description":"The presence after the update","type":[[["Presence"]]]}],"meta":{"line":34,"file":"PRESENCE_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"soundboardSounds","description":"Emitted whenever soundboard sounds are received (all soundboard sounds come from the same guild).","params":[{"name":"soundboardSounds","description":"The sounds received","type":[[["Collection","<"],["Snowflake",", "],["SoundboardSound",">"]]]},{"name":"guild","description":"The guild that the soundboard sounds are from","type":[[["Guild"]]]}],"meta":{"line":17,"file":"SOUNDBOARD_SOUNDS.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"subscriptionCreate","description":"Emitted whenever a subscription is created.","params":[{"name":"subscription","description":"The subscription that was created","type":[[["Subscription"]]]}],"meta":{"line":8,"file":"SUBSCRIPTION_CREATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"subscriptionDelete","description":"Emitted whenever a subscription is deleted.","params":[{"name":"subscription","description":"The subscription that was deleted","type":[[["Subscription"]]]}],"meta":{"line":10,"file":"SUBSCRIPTION_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"subscriptionUpdate","description":"Emitted whenever a subscription is updated - i.e. when a user's subscription renews.","params":[{"name":"oldSubscription","description":"The subscription before the update","nullable":true,"type":[[["Subscription"]]]},{"name":"newSubscription","description":"The subscription after the update","type":[[["Subscription"]]]}],"meta":{"line":9,"file":"SUBSCRIPTION_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"threadDelete","description":"Emitted whenever a thread is deleted.","params":[{"name":"thread","description":"The thread that was deleted","type":[[["ThreadChannel"]]]}],"meta":{"line":11,"file":"THREAD_DELETE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"threadListSync","description":"Emitted whenever the client user gains access to a text or announcement channel that contains threads","params":[{"name":"threads","description":"The threads that were synced","type":[[["Collection","<"],["Snowflake",", "],["ThreadChannel",">"]]]},{"name":"guild","description":"The guild that the threads were synced in","type":[[["Guild"]]]}],"meta":{"line":34,"file":"THREAD_LIST_SYNC.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"threadMemberUpdate","description":"Emitted whenever the client user's thread member is updated.","params":[{"name":"oldMember","description":"The member before the update","type":[[["ThreadMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["ThreadMember"]]]}],"meta":{"line":18,"file":"THREAD_MEMBER_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"threadUpdate","description":"Emitted whenever a thread is updated - e.g. name change, archive state change, locked state change.","params":[{"name":"oldThread","description":"The thread before the update","type":[[["ThreadChannel"]]]},{"name":"newThread","description":"The thread after the update","type":[[["ThreadChannel"]]]}],"meta":{"line":8,"file":"THREAD_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"voiceChannelEffectSend","description":"Emitted when someone sends an effect, such as an emoji reaction, in a voice channel the client is connected to.","params":[{"name":"voiceChannelEffect","description":"The sent voice channel effect","type":[[["VoiceChannelEffect"]]]}],"meta":{"line":10,"file":"VOICE_CHANNEL_EFFECT_SEND.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"voiceStateUpdate","description":"Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldState","description":"The voice state before the update","type":[[["VoiceState"]]]},{"name":"newState","description":"The voice state after the update","type":[[["VoiceState"]]]}],"meta":{"line":30,"file":"VOICE_STATE_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"webhooksUpdate","description":"Emitted whenever a channel has its webhooks changed.","params":[{"name":"channel","description":"The channel that had a webhook update","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]]]}],"meta":{"line":9,"file":"WEBHOOKS_UPDATE.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"error","description":"Emitted when the client encounters an error.\n<warn>Errors thrown within this event do not have a catch handler, it is\nrecommended to not use async functions as `error` event handlers. See the\n{@link https://nodejs.org/api/events.html#capture-rejections-of-promises Node.js documentation}\nfor details.)</warn>","params":[{"name":"error","description":"The error encountered","type":[[["Error"]]]}],"meta":{"line":218,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}}],"meta":{"line":52,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ClientVoiceManager","description":"Manages voice connections for the client","props":[{"name":"client","description":"The client that instantiated this voice manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"ClientVoiceManager.js","path":"packages/discord.js/src/client/voice"}},{"name":"adapters","description":"Maps guild ids to voice adapters created for use with `@discordjs/voice`.","scope":"instance","type":[[["Map","<"],["Snowflake",", "],["Object",">"]]],"meta":{"line":24,"file":"ClientVoiceManager.js","path":"packages/discord.js/src/client/voice"}}],"meta":{"line":8,"file":"ClientVoiceManager.js","path":"packages/discord.js/src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":[[["BaseClient"]]],"implements":[[["Webhook"]]],"construct":{"name":"WebhookClient","params":[{"name":"data","description":"The data of the webhook","type":[[["WebhookClientData"]]]},{"name":"options","description":"Options for the webhook client","optional":true,"type":[[["WebhookClientOptions"]]]}]},"props":[{"name":"options","description":"The options the webhook client was instantiated with.","scope":"instance","type":[[["WebhookClientOptions"]]],"meta":{"line":66,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"id","description":"The webhook's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the webhook was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":436,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the webhook was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":446,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this webhook","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":456,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"rest","description":"The REST manager of the client","scope":"instance","type":[[["REST"]]],"meta":{"line":59,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","scope":"instance","implements":["Webhook#send"],"params":[{"name":"options","description":"The content for the reply","type":[[["string"]],[["MessagePayload"]],[["WebhookMessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["APIMessage",">"]]]],"meta":{"line":82,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"fetchMessage","description":"Gets a message that was sent by this webhook.","scope":"instance","implements":["Webhook#fetchMessage"],"params":[{"name":"message","description":"The id of the message to fetch","type":[[["Snowflake"]]]},{"name":"options","description":"The options to provide to fetch the message.","optional":true,"type":[[["WebhookFetchMessageOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["APIMessage",">"]]],"description":"Returns the message sent by this webhook"}],"meta":{"line":91,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"editMessage","description":"Edits a message that was sent by this webhook.","scope":"instance","implements":["Webhook#editMessage"],"params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["WebhookMessageEditOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["APIMessage",">"]]],"description":"Returns the message edited by this webhook"}],"meta":{"line":100,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","see":["{@link https://api.slack.com/messaging/webhooks}"],"scope":"instance","implements":["Webhook#sendSlackMessage"],"examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1_000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"async":true,"returns":[[[["Promise","<"],["boolean",">"]]]],"meta":{"line":277,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this webhook.","scope":"instance","implements":["Webhook#edit"],"params":[{"name":"options","description":"Options for editing the webhook","type":[[["WebhookEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Webhook",">"]]]],"meta":{"line":305,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the webhook.","scope":"instance","implements":["Webhook#delete"],"params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":407,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"deleteMessage","description":"Delete a message that was sent by this webhook.","scope":"instance","implements":["Webhook#deleteMessage"],"params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]],[["'@original'"]]]},{"name":"threadId","description":"The id of the thread this message belongs to","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":418,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"destroy","description":"Destroys all assets used by the base client.","scope":"instance","inherits":"BaseClient#destroy","inherited":true,"returns":[[[["void"]]]],"meta":{"line":69,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"deleteWebhook","description":"Deletes a webhook.","scope":"instance","inherits":"BaseClient#deleteWebhook","inherited":true,"params":[{"name":"id","description":"The webhook's id","type":[[["Snowflake"]]]},{"name":"options","description":"Options for deleting the webhook","optional":true,"type":[[["WebhookDeleteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":89,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"incrementMaxListeners","description":"Increments max listeners by one, if they are not zero.","scope":"instance","access":"private","inherits":"BaseClient#incrementMaxListeners","inherited":true,"meta":{"line":98,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"decrementMaxListeners","description":"Decrements max listeners by one, if they are not zero.","scope":"instance","access":"private","inherits":"BaseClient#decrementMaxListeners","inherited":true,"meta":{"line":110,"file":"BaseClient.js","path":"packages/discord.js/src/client"}}],"meta":{"line":14,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"ApplicationCommandManager","description":"Manages API methods for application commands and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"permissions","description":"The manager for permissions of arbitrary commands on arbitrary guilds","scope":"instance","type":[[["ApplicationCommandPermissionsManager"]]],"meta":{"line":27,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ApplicationCommand",">"]]],"meta":{"line":30,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"commandPath","description":"The APIRouter path to the commands","scope":"instance","access":"private","params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.id","description":"The application command's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.guildId","description":"The guild's id to use in the path,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"returns":[[[["string"]]]],"meta":{"line":51,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or multiple application commands from Discord, or the cache if it's already available.","scope":"instance","examples":["// Fetch a single command\nclient.application.commands.fetch('123456789012345678')\n  .then(command => console.log(`Fetched command ${command.name}`))\n  .catch(console.error);","// Fetch all commands\nclient.application.commands.fetch()\n  .then(commands => console.log(`Fetched ${commands.size} commands`))\n  .catch(console.error);","// Fetch all commands in a guild\nguild.commands.fetch()\n  .then(commands => console.log(`Fetched ${commands.size} commands`))\n  .catch(console.error);","// Fetch a single command without checking cache\nguild.commands.fetch({ id: '123456789012345678', force: true })\n  .then(command => console.log(`Fetched command ${command.name}`))\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for fetching application command(s)","optional":true,"type":[[["Snowflake"]],[["FetchApplicationCommandOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["ApplicationCommand","|"],["Collection","<"],["Snowflake",", "],["ApplicationCommand",">)>"]]]],"meta":{"line":125,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates an application command.","scope":"instance","examples":["// Create a new command\nclient.application.commands.create({\n  name: 'test',\n  description: 'A test command',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command","type":[[["ApplicationCommandDataResolvable"]]]},{"name":"guildId","description":"The guild's id to create this command in,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":174,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"set","description":"Sets all the commands for this application or guild.","scope":"instance","examples":["// Set all commands to just this one\nclient.application.commands.set([\n  {\n    name: 'test',\n    description: 'A test command',\n  },\n])\n  .then(console.log)\n  .catch(console.error);","// Remove all commands\nguild.commands.set([])\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"commands","description":"The commands","type":[[["Array","<"],["ApplicationCommandDataResolvable",">"]]]},{"name":"guildId","description":"The guild's id to create the commands in,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["ApplicationCommand",">>"]]]],"meta":{"line":204,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an application command.","scope":"instance","examples":["// Edit an existing command\nclient.application.commands.edit('123456789012345678', {\n  description: 'New description',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command to edit","type":[[["ApplicationCommandResolvable"]]]},{"name":"data","description":"The data to update the command with","type":[[["Partial","<"],["ApplicationCommandDataResolvable",">"]]]},{"name":"guildId","description":"The guild's id where the command registered,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":230,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an application command.","scope":"instance","examples":["// Delete a command\nguild.commands.delete('123456789012345678')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command to delete","type":[[["ApplicationCommandResolvable"]]]},{"name":"guildId","description":"The guild's id where the command is registered,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<?"],["ApplicationCommand",">"]]]],"meta":{"line":253,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"transformCommand","description":"Transforms an {@link ApplicationCommandData} object into something that can be used with the API.","scope":"static","access":"private","params":[{"name":"command","description":"The command to transform","type":[[["ApplicationCommandDataResolvable"]]]}],"returns":[[[["APIApplicationCommand"]]]],"meta":{"line":271,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":18,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationCommandPermissionsManager","description":"Manages API methods for permissions of Application Commands.","extends":[[["BaseManager"]]],"props":[{"name":"manager","description":"The manager or command that this manager belongs to","scope":"instance","access":"private","type":[[["ApplicationCommandManager"]],[["ApplicationCommand"]]],"meta":{"line":23,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"guild","description":"The guild that this manager acts on","scope":"instance","nullable":true,"type":[[["Guild"]]],"meta":{"line":30,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"guildId","description":"The id of the guild that this manager acts on","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":37,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"commandId","description":"The id of the command this manager acts on","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":44,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"permissionsPath","description":"The APIRouter path to the commands","scope":"instance","access":"private","params":[{"name":"guildId","description":"The guild's id to use in the path,","type":[[["Snowflake"]]]},{"name":"commandId","description":"The application command's id","optional":true,"type":[[["Snowflake"]]]}],"returns":[[[["string"]]]],"meta":{"line":55,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches the permissions for one or multiple commands. Providing the client's id as the \"command id\" will fetch\n_only_ the guild level permissions","scope":"instance","examples":["// Fetch permissions for one command\nguild.commands.permissions.fetch({ command: '123456789012345678' })\n  .then(perms => console.log(`Fetched ${perms.length} overwrites`))\n  .catch(console.error);","// Fetch permissions for all commands in a guild\nclient.application.commands.permissions.fetch({ guild: '123456789012345678' })\n  .then(perms => console.log(`Fetched permissions for ${perms.size} commands`))\n  .catch(console.error);","// Fetch guild level permissions\nguild.commands.permissions.fetch({ command: client.user.id })\n  .then(perms => console.log(`Fetched ${perms.length} guild level permissions`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options used to fetch permissions","optional":true,"type":[[["BaseApplicationCommandPermissionsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Array","<"],["ApplicationCommandPermissions",">|"],["Collection","<"],["Snowflake",", "],["Array","<"],["ApplicationCommandPermissions",">>)>"]]]],"meta":{"line":107,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"set","description":"Sets the permissions for the guild or a command overwrite.","scope":"instance","examples":["// Set a permission overwrite for a command\nclient.application.commands.permissions.set({\n guild: '892455839386304532',\n command: '123456789012345678',\n token: 'TotallyRealToken',\n permissions: [\n   {\n     id: '876543210987654321',\n     type: ApplicationCommandPermissionType.User,\n     permission: false,\n   },\n]})\n  .then(console.log)\n  .catch(console.error);","// Set the permissions used for the guild (commands without overwrites)\nguild.commands.permissions.set({ token: 'TotallyRealToken', permissions: [\n  {\n    id: '123456789012345678',\n    permissions: [{\n      id: '876543210987654321',\n      type: ApplicationCommandPermissionType.User,\n      permission: false,\n    }],\n  },\n]})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options used to set permissions","type":[[["ApplicationCommandPermissionsEditOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Array","<"],["ApplicationCommandPermissions",">|"],["Collection","<"],["Snowflake",", "],["Array","<"],["ApplicationCommandPermissions",">>)>"]]]],"meta":{"line":163,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"add","description":"Add permissions to a command.","scope":"instance","examples":["// Add a rule to block a role from using a command\nguild.commands.permissions.add({ command: '123456789012345678', token: 'TotallyRealToken', permissions: [\n  {\n    id: '876543211234567890',\n    type: ApplicationCommandPermissionType.Role,\n    permission: false\n  },\n]})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options used to add permissions","type":[[["ApplicationCommandPermissionsEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Array","<"],["ApplicationCommandPermissions",">>"]]]],"meta":{"line":207,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Remove permissions from a command.","scope":"instance","examples":["// Remove a user permission from this command\nguild.commands.permissions.remove({\n command: '123456789012345678', users: '876543210123456789', token: 'TotallyRealToken',\n})\n  .then(console.log)\n  .catch(console.error);","// Remove multiple roles from this command\nguild.commands.permissions.remove({\n  command: '123456789012345678', roles: ['876543210123456789', '765432101234567890'], token: 'TotallyRealToken',\n})\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"options","description":"Options used to remove permissions","type":[[["RemoveApplicationCommandPermissionsOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Array","<"],["ApplicationCommandPermissions",">>"]]]],"meta":{"line":289,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"has","description":"Check whether a permission exists for a user, role, or channel","scope":"instance","examples":["guild.commands.permissions.has({ command: '123456789012345678', permissionId: '876543210123456789' })\n .then(console.log)\n .catch(console.error);"],"params":[{"name":"options","description":"Options used to check permissions","type":[[["HasApplicationCommandPermissionsOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["boolean",">"]]]],"meta":{"line":384,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":13,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationEmojiManager","description":"Manages API methods for ApplicationEmojis and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"application","description":"The application this manager belongs to","scope":"instance","type":[[["ClientApplication"]]],"meta":{"line":24,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of items for this manager.","scope":"instance","abstract":true,"type":[[["Collection"]]],"meta":{"line":45,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new custom emoji of the application.","scope":"instance","examples":["// Create a new emoji from a URL\napplication.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\napplication.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for creating the emoji","type":[[["ApplicationEmojiCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"}],"meta":{"line":55,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more emojis from Discord, or the emoji cache if they're already available.","scope":"instance","examples":["// Fetch all emojis from the application\napplication.emojis.fetch()\n  .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n  .catch(console.error);","// Fetch a single emoji\napplication.emojis.fetch('222078108977594368')\n  .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The emoji's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["ApplicationEmoji","|"],["Collection","<"],["Snowflake",", "],["ApplicationEmoji",">)>"]]]],"meta":{"line":82,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an emoji.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to delete","type":[[["EmojiResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":105,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an emoji.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to edit","type":[[["EmojiResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["ApplicationEmojiEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationEmoji",">"]]]],"meta":{"line":118,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchAuthor","description":"Fetches the author for this emoji","scope":"instance","params":[{"name":"emoji","description":"The emoji to fetch the author of","type":[[["EmojiResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":142,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationRuleManager","description":"Manages API methods for auto moderation rules and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to.","scope":"instance","type":[[["Guild"]]],"meta":{"line":22,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["AutoModerationRule",">"]]],"meta":{"line":25,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves an {@link AutoModerationRuleResolvable} to an {@link AutoModerationRule} object.","scope":"instance","params":[{"name":"autoModerationRule","description":"The AutoModerationRule resolvable to resolve","type":[[["AutoModerationRuleResolvable"]]]}],"returns":[{"types":[[["AutoModerationRule"]]],"nullable":true}],"meta":{"line":32,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves an {@link AutoModerationRuleResolvable} to a {@link AutoModerationRule} id.","scope":"instance","params":[{"name":"autoModerationRule","description":"The AutoModerationRule resolvable to resolve","type":[[["AutoModerationRuleResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":42,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a new auto moderation rule.","scope":"instance","params":[{"name":"options","description":"Options for creating the auto moderation rule","type":[[["AutoModerationRuleCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":121,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an auto moderation rule.","scope":"instance","params":[{"name":"autoModerationRule","description":"The auto moderation rule to edit","type":[[["AutoModerationRuleResolvable"]]]},{"name":"options","description":"Options for editing the auto moderation rule","type":[[["AutoModerationRuleEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":187,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches auto moderation rules from Discord.","scope":"instance","examples":["// Fetch all auto moderation rules from a guild without caching\nguild.autoModerationRules.fetch({ cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch a single auto moderation rule\nguild.autoModerationRules.fetch('979083472868098119')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single auto moderation rule without checking cache and without caching\nguild.autoModerationRules.fetch({ autoModerationRule: '979083472868098119', cache: false, force: true })\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for fetching auto moderation rule(s)","optional":true,"type":[[["AutoModerationRuleResolvable"]],[["FetchAutoModerationRuleOptions"]],[["FetchAutoModerationRulesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["AutoModerationRule","|"],["Collection","<"],["Snowflake",", "],["AutoModerationRule",">)>"]]]],"meta":{"line":267,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an auto moderation rule.","scope":"instance","params":[{"name":"autoModerationRule","description":"The auto moderation rule to delete","type":[[["AutoModerationRuleResolvable"]]]},{"name":"reason","description":"The reason for deleting the auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":304,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":13,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"BaseManager","description":"Manages the API methods of a data model.","abstract":true,"props":[{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":8,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}},{"name":"CachedManager","description":"Manages the API methods of a data model with a mutable cache of instances.","extends":[[["DataManager"]]],"abstract":true,"props":[{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of items for this manager.","scope":"instance","abstract":true,"type":[[["Collection"]]],"meta":{"line":45,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"CategoryChannelChildManager","description":"Manages API methods for CategoryChannels' children.","extends":[[["DataManager"]]],"props":[{"name":"channel","description":"The category channel this manager belongs to","scope":"instance","type":[[["CategoryChannel"]]],"meta":{"line":19,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The channels that are a part of this category","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":28,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"guild","description":"The guild this manager belongs to","scope":"instance","readonly":true,"type":[[["Guild"]]],"meta":{"line":38,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new channel within this category.\n<info>You cannot create a channel of type {@link ChannelType.GuildCategory} inside a CategoryChannel.</info>","scope":"instance","params":[{"name":"options","description":"Options for creating the new channel","type":[[["CategoryCreateChannelOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":77,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":11,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"ChannelManager","description":"A manager of channels belonging to a client","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of Channels","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["BaseChannel",">"]]],"meta":{"line":38,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a ChannelResolvable to a Channel object.","scope":"instance","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":[{"types":[[["BaseChannel"]]],"nullable":true}],"meta":{"line":96,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a ChannelResolvable to a channel id string.","scope":"instance","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":106,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains a channel from Discord, or the channel cache if it's already available.","scope":"instance","examples":["// Fetch a channel by its id\nclient.channels.fetch('222109930545610754')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"id","description":"The channel's id","type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["FetchChannelOptions"]]]}],"async":true,"returns":[[[["Promise","<?"],["BaseChannel",">"]]]],"meta":{"line":136,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"createMessage","description":"Creates a message in a channel.","scope":"instance","examples":["// Send a basic message\nclient.channels.createMessage(channel, 'hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nclient.channels.createMessage(channel, {\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nclient.channels.createMessage(channel, {\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"channel","description":"The channel to send the message to","type":[[["TextChannelResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":176,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":22,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"DataManager","description":"Manages the API methods of a data model along with a collection of instances.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of items for this manager.","scope":"instance","abstract":true,"type":[[["Collection"]]],"meta":{"line":33,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"DMMessageManager","description":"Manages API methods for messages in direct message channels and holds their cache.","extends":[[["MessageManager"]]],"props":[{"name":"channel","description":"The channel that the messages belong to","scope":"instance","type":[[["DMChannel"]]],"meta":{"line":11,"file":"DMMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Messages","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":33,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches message(s) from a channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","scope":"instance","inherits":"MessageManager#fetch","inherited":true,"examples":["// Fetch a message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching\nchannel.messages.fetch({ limit: 10, cache: false })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching around a message id\nchannel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch messages and filter by a user id\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(message =>\n         message.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching message(s)","optional":true,"type":[[["MessageResolvable"]],[["FetchMessageOptions"]],[["FetchMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Message","|"],["Collection","<"],["Snowflake",", "],["Message",">)>"]]]],"meta":{"line":100,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","scope":"instance","inherits":"MessageManager#fetchPinned","inherited":true,"examples":["// Get pinned messages\nchannel.messages.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":139,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link MessageResolvable} to a {@link Message} object.","scope":"instance","inherits":"MessageManager#resolve","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Message"]]],"nullable":true}],"meta":{"line":146,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link MessageResolvable} to a {@link Message} id.","scope":"instance","inherits":"MessageManager#resolveId","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":156,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#edit","inherited":true,"params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]]]},{"name":"options","description":"The options to edit the message","type":[[["string"]],[["MessageEditOptions"]],[["MessagePayload"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"pin","description":"Pins a message to the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#pin","inherited":true,"params":[{"name":"message","description":"The message to pin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":220,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"unpin","description":"Unpins a message from the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#unpin","inherited":true,"params":[{"name":"message","description":"The message to unpin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":234,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"react","description":"Adds a reaction to a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#react","inherited":true,"params":[{"name":"message","description":"The message to react to","type":[[["MessageResolvable"]]]},{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":248,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#delete","inherited":true,"params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":268,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"endPoll","description":"Ends a poll.","scope":"instance","inherits":"MessageManager#endPoll","inherited":true,"params":[{"name":"messageId","description":"The id of the message","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":281,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPollAnswerVoters","description":"Fetches the users that voted for a poll answer.","scope":"instance","inherits":"MessageManager#fetchPollAnswerVoters","inherited":true,"params":[{"name":"options","description":"The options for fetching the poll answer voters","type":[[["FetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":300,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":10,"file":"DMMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"EntitlementManager","description":"Manages API methods for entitlements and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":21,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches entitlements for this application","scope":"instance","params":[{"name":"options","description":"Options for fetching the entitlements","optional":true,"type":[[["EntitlementResolvable"]],[["FetchEntitlementOptions"]],[["FetchEntitlementsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Entitlement","|"],["Collection","<"],["Snowflake",", "],["Entitlement",">)>"]]]],"meta":{"line":74,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"createTest","description":"Creates a test entitlement","scope":"instance","params":[{"name":"options","description":"Options for creating the test entitlement","type":[[["EntitlementCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Entitlement",">"]]]],"meta":{"line":135,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"deleteTest","description":"Deletes a test entitlement","scope":"instance","params":[{"name":"entitlement","description":"The entitlement to delete","type":[[["EntitlementResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":166,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"consume","description":"Marks an entitlement as consumed\n<info>Only available for One-Time Purchase consumable SKUs.</info>","scope":"instance","params":[{"name":"entitlementId","description":"The id of the entitlement to consume","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":180,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":16,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildApplicationCommandManager","description":"An extension for guild-specific application commands.","extends":[[["ApplicationCommandManager"]]],"props":[{"name":"guild","description":"The guild that this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":20,"file":"GuildApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"permissions","description":"The manager for permissions of arbitrary commands on this guild","scope":"instance","type":[[["ApplicationCommandPermissionsManager"]]],"meta":{"line":27,"file":"GuildApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ApplicationCommand",">"]]],"meta":{"line":30,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"commandPath","description":"The APIRouter path to the commands","scope":"instance","access":"private","inherits":"ApplicationCommandManager#commandPath","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.id","description":"The application command's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.guildId","description":"The guild's id to use in the path,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"returns":[[[["string"]]]],"meta":{"line":51,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or multiple application commands from Discord, or the cache if it's already available.","scope":"instance","inherits":"ApplicationCommandManager#fetch","inherited":true,"examples":["// Fetch a single command\nclient.application.commands.fetch('123456789012345678')\n  .then(command => console.log(`Fetched command ${command.name}`))\n  .catch(console.error);","// Fetch all commands\nclient.application.commands.fetch()\n  .then(commands => console.log(`Fetched ${commands.size} commands`))\n  .catch(console.error);","// Fetch all commands in a guild\nguild.commands.fetch()\n  .then(commands => console.log(`Fetched ${commands.size} commands`))\n  .catch(console.error);","// Fetch a single command without checking cache\nguild.commands.fetch({ id: '123456789012345678', force: true })\n  .then(command => console.log(`Fetched command ${command.name}`))\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for fetching application command(s)","optional":true,"type":[[["Snowflake"]],[["FetchApplicationCommandOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["ApplicationCommand","|"],["Collection","<"],["Snowflake",", "],["ApplicationCommand",">)>"]]]],"meta":{"line":125,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates an application command.","scope":"instance","inherits":"ApplicationCommandManager#create","inherited":true,"examples":["// Create a new command\nclient.application.commands.create({\n  name: 'test',\n  description: 'A test command',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command","type":[[["ApplicationCommandDataResolvable"]]]},{"name":"guildId","description":"The guild's id to create this command in,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":174,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"set","description":"Sets all the commands for this application or guild.","scope":"instance","inherits":"ApplicationCommandManager#set","inherited":true,"examples":["// Set all commands to just this one\nclient.application.commands.set([\n  {\n    name: 'test',\n    description: 'A test command',\n  },\n])\n  .then(console.log)\n  .catch(console.error);","// Remove all commands\nguild.commands.set([])\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"commands","description":"The commands","type":[[["Array","<"],["ApplicationCommandDataResolvable",">"]]]},{"name":"guildId","description":"The guild's id to create the commands in,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["ApplicationCommand",">>"]]]],"meta":{"line":204,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an application command.","scope":"instance","inherits":"ApplicationCommandManager#edit","inherited":true,"examples":["// Edit an existing command\nclient.application.commands.edit('123456789012345678', {\n  description: 'New description',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command to edit","type":[[["ApplicationCommandResolvable"]]]},{"name":"data","description":"The data to update the command with","type":[[["Partial","<"],["ApplicationCommandDataResolvable",">"]]]},{"name":"guildId","description":"The guild's id where the command registered,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":230,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an application command.","scope":"instance","inherits":"ApplicationCommandManager#delete","inherited":true,"examples":["// Delete a command\nguild.commands.delete('123456789012345678')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"command","description":"The command to delete","type":[[["ApplicationCommandResolvable"]]]},{"name":"guildId","description":"The guild's id where the command is registered,\nignored when using a {@link GuildApplicationCommandManager}","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<?"],["ApplicationCommand",">"]]]],"meta":{"line":253,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":11,"file":"GuildApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildBanManager","description":"Manages API methods for guild bans and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this Manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":24,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildBan",">"]]],"meta":{"line":27,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a GuildBanResolvable to a GuildBan object.","scope":"instance","params":[{"name":"ban","description":"The ban that is in the guild","type":[[["GuildBanResolvable"]]]}],"returns":[{"types":[[["GuildBan"]]],"nullable":true}],"meta":{"line":52,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches ban(s) from Discord.","scope":"instance","examples":["// Fetch multiple bans from a guild\nguild.bans.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a maximum of 5 bans from a guild without caching\nguild.bans.fetch({ limit: 5, cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch a single ban\nguild.bans.fetch('351871113346809860')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single ban without checking cache\nguild.bans.fetch({ user, force: true })\n  .then(console.log)\n  .catch(console.error)","// Fetch a single ban without caching\nguild.bans.fetch({ user, cache: false })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching guild ban(s)","optional":true,"type":[[["UserResolvable"]],[["FetchBanOptions"]],[["FetchBansOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["GuildBan","|"],["Collection","<"],["Snowflake",", "],["GuildBan",">)>"]]]],"meta":{"line":104,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Bans a user from the guild.","scope":"instance","examples":["// Ban a user by id (or with a user/guild member object)\nawait guild.bans.create('84484653687267328');"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"default":"{}","type":[[["BanOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":154,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Unbans a user from the guild.","scope":"instance","examples":["// Unban a user by id (or with a user/guild member object)\nawait guild.bans.remove('84484653687267328');"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":177,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"bulkCreate","description":"Bulk ban users from a guild, and optionally delete previous messages sent by them.","scope":"instance","examples":["// Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days\nguild.bans.bulkCreate(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })\n  .then(result => {\n    console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)\n  })\n  .catch(console.error);"],"params":[{"name":"users","description":"The users to ban","type":[[["Collection","<"],["Snowflake",", "],["UserResolvable",">"]],[["Array","<"],["UserResolvable",">"]]]},{"name":"options","description":"The options for bulk banning users","optional":true,"type":[[["BanOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["BulkBanResult",">"]]],"description":"Returns an object with `bannedUsers` key containing the IDs of the banned users\nand the key `failedUsers` with the IDs that could not be banned or were already banned."}],"meta":{"line":206,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildChannelManager","description":"Manages API methods for GuildChannels and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this Manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":46,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"channelCountWithoutThreads","description":"The number of channels in this managers cache excluding thread channels\nthat do not count towards a guild's maximum channels restriction.","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":56,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["GuildChannel","|"],["ThreadChannel",")>"]]],"meta":{"line":63,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a GuildChannelResolvable to a Channel object.","scope":"instance","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":[{"types":[[["GuildChannel"]],[["ThreadChannel"]]],"nullable":true}],"meta":{"line":92,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a GuildChannelResolvable to a channel id.","scope":"instance","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":103,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"addFollower","description":"Adds the target channel to a channel's followers.","scope":"instance","params":[{"name":"channel","description":"The channel to follow","type":[[["AnnouncementChannelResolvable"]]]},{"name":"targetChannel","description":"The channel where published announcements will be posted at","type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["FollowedChannelData",">"]]],"description":"Returns the data for the followed channel"}],"meta":{"line":132,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a new channel in the guild.","scope":"instance","examples":["// Create a new text channel\nguild.channels.create({ name: 'new-general', reason: 'Needed a cool new channel' })\n  .then(console.log)\n  .catch(console.error);","// Create a new channel with permission overwrites\nguild.channels.create({\n  name: 'new-general',\n  type: ChannelType.GuildVoice,\n  permissionOverwrites: [\n     {\n       id: message.author.id,\n       deny: [PermissionFlagsBits.ViewChannel],\n    },\n  ],\n})"],"params":[{"name":"options","description":"Options for creating the new channel","type":[[["GuildChannelCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":180,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","examples":["// Create a webhook for the current channel\nguild.channels.createWebhook({\n  channel: '222197033908436994',\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","type":[[["WebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":251,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits the channel.","scope":"instance","examples":["// Edit a channel\nguild.channels.edit('222197033908436994', { name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"channel","description":"The channel to edit","type":[[["GuildChannelResolvable"]]]},{"name":"options","description":"Options for editing the channel","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":310,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","examples":["// Set a new channel position\nguild.channels.setPosition('222078374472843266', 2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The channel to set the position for","type":[[["GuildChannelResolvable"]]]},{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":381,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more guild channels from Discord, or the channel cache if they're already available.","scope":"instance","examples":["// Fetch all channels from the guild (excluding threads)\nmessage.guild.channels.fetch()\n  .then(channels => console.log(`There are ${channels.size} channels.`))\n  .catch(console.error);","// Fetch a single channel\nmessage.guild.channels.fetch('222197033908436994')\n  .then(channel => console.log(`The channel name is: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The channel's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<(?"],["GuildChannel","|"],["ThreadChannel","|"],["Collection","<"],["Snowflake",", ?"],["GuildChannel",">)>"]]]],"meta":{"line":420,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","examples":["// Fetch webhooks\nguild.channels.fetchWebhooks('769862166131245066')\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The channel to fetch webhooks for","type":[[["GuildChannelResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":450,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"setPositions","description":"Batch-updates the guild's channels' positions.\n<info>Only one channel's parent can be changed at a time</info>","scope":"instance","examples":["guild.channels.setPositions([{ channel: channelId, position: newChannelIndex }])\n  .then(guild => console.log(`Updated channel positions for ${guild}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":486,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchActiveThreads","description":"Obtains all active thread channels in the guild.","scope":"instance","examples":["// Fetch all threads from the guild\nmessage.guild.channels.fetchActiveThreads()\n  .then(fetched => console.log(`There are ${fetched.threads.size} threads.`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the fetched data","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreads",">"]]]],"meta":{"line":521,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"rawFetchGuildActiveThreads","description":"`GET /guilds/{guild.id}/threads/active`","scope":"instance","access":"private","async":true,"returns":[[[["Promise","<"],["RESTGetAPIGuildThreadsResult",">"]]]],"meta":{"line":532,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes the channel.","scope":"instance","examples":["// Delete the channel\nguild.channels.delete('858850993013260338', 'making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"channel","description":"The channel to delete","type":[[["GuildChannelResolvable"]]]},{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":548,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":26,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildEmojiManager","description":"Manages API methods for GuildEmojis and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":26,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of GuildEmojis","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":33,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves an EmojiResolvable to an Emoji object.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":[{"types":[[["GuildEmoji"]]],"nullable":true}],"meta":{"line":56,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves an EmojiResolvable to an Emoji id string.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":68,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveIdentifier","description":"Resolves an EmojiResolvable to an emoji identifier.","scope":"instance","params":[{"name":"emoji","description":"The emoji resolvable to resolve","type":[[["EmojiIdentifierResolvable"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":89,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a new custom emoji in the guild.","scope":"instance","examples":["// Create a new emoji from a URL\nguild.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\nguild.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for creating the emoji","type":[[["GuildEmojiCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"}],"meta":{"line":134,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more emojis from Discord, or the emoji cache if they're already available.","scope":"instance","examples":["// Fetch all emojis from the guild\nmessage.guild.emojis.fetch()\n  .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n  .catch(console.error);","// Fetch a single emoji\nmessage.guild.emojis.fetch('222078108977594368')\n  .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The emoji's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["GuildEmoji","|"],["Collection","<"],["Snowflake",", "],["GuildEmoji",">)>"]]]],"meta":{"line":181,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an emoji.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to delete","type":[[["EmojiResolvable"]]]},{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":205,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an emoji.","scope":"instance","params":[{"name":"emoji","description":"The Emoji resolvable to edit","type":[[["EmojiResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["GuildEmojiEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":218,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchAuthor","description":"Fetches the author for this emoji","scope":"instance","params":[{"name":"emoji","description":"The emoji to fetch the author of","type":[[["EmojiResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":245,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":17,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildEmojiRoleManager","description":"Manages API methods for roles belonging to emojis and stores their cache.","extends":[[["DataManager"]]],"props":[{"name":"emoji","description":"The emoji belonging to this manager","scope":"instance","type":[[["GuildEmoji"]]],"meta":{"line":22,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"guild","description":"The guild belonging to this manager","scope":"instance","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of roles belonging to this emoji","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":37,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the list of roles that can use this emoji.","scope":"instance","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":47,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Removes a role (or multiple roles) from the list of roles that can use this emoji.","scope":"instance","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":70,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"set","description":"Sets the role(s) that can use this emoji.","scope":"instance","examples":["// Set the emoji's roles to a single role\nguildEmoji.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all roles from an emoji\nguildEmoji.roles.set([])\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role ids to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":103,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"_patch","description":"Patches the roles for this manager's cache","scope":"instance","access":"private","params":[{"name":"roles","description":"The new roles","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":119,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":13,"file":"GuildEmojiRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildForumThreadManager","description":"Manages API methods for threads in forum channels and stores their cache.","extends":[[["ThreadManager"]]],"props":[{"name":"channel","description":"The channel this Manager belongs to","scope":"instance","type":[[["ForumChannel"]]],"meta":{"line":14,"file":"GuildForumThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ThreadChannel",">"]]],"meta":{"line":38,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new thread in the channel.","scope":"instance","examples":["// Create a new forum post\nforum.threads\n  .create({\n    name: 'Food Talk',\n    autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n    message: {\n     content: 'Discuss your favorite food!',\n    },\n    reason: 'Needed a separate thread for food',\n  })\n  .then(threadChannel => console.log(threadChannel))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to create a new thread","optional":true,"type":[[["GuildForumThreadCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":55,"file":"GuildForumThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} object.","scope":"instance","inherits":"ThreadManager#resolve","inherited":true,"params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["ThreadChannel"]]],"nullable":true}],"meta":{"line":52,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} id.","scope":"instance","inherits":"ThreadManager#resolveId","inherited":true,"params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":62,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains a thread from Discord, or the channel cache if it's already available.","scope":"instance","inherits":"ThreadManager#fetch","inherited":true,"examples":["// Fetch a thread by its id\nchannel.threads.fetch('831955138126104859')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to fetch threads. If it is a\nThreadChannelResolvable then the specified thread will be fetched. Fetches all active threads if `undefined`","optional":true,"type":[[["ThreadChannelResolvable"]],[["FetchThreadsOptions"]]]},{"name":"cacheOptions","description":"Additional options for this fetch. <warn>The `force` field gets ignored\nif `options` is not a {@link ThreadChannelResolvable}</warn>","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<?("],["ThreadChannel","|"],["FetchedThreads","|"],["FetchedThreadsMore",")>"]]],"description":"{@link FetchedThreads} if active & {@link FetchedThreadsMore} if archived."}],"meta":{"line":94,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchArchived","description":"Obtains a set of archived threads from Discord.\n<info>This method requires the {@link PermissionFlagsBits.ReadMessageHistory} permission\nin the parent channel.</info>","scope":"instance","inherits":"ThreadManager#fetchArchived","inherited":true,"params":[{"name":"options","description":"The options to fetch archived threads","optional":true,"type":[[["FetchArchivedThreadOptions"]]]},{"name":"cache","description":"Whether to cache the new thread objects if they aren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreadsMore",">"]]]],"meta":{"line":148,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchActive","description":"Obtains all active threads in the channel.","scope":"instance","inherits":"ThreadManager#fetchActive","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched data","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreads",">"]]]],"meta":{"line":187,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":13,"file":"GuildForumThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildInviteManager","description":"Manages API methods for GuildInvites and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this Manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":24,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["string",", "],["Invite",">"]]],"meta":{"line":27,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves an InviteResolvable to an Invite object.","scope":"instance","params":[{"name":"invite","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[{"types":[[["Invite"]]],"nullable":true}],"meta":{"line":60,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves an InviteResolvable to an invite code string.","scope":"instance","params":[{"name":"invite","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":70,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches invite(s) from Discord.","scope":"instance","examples":["// Fetch all invites from a guild\nguild.invites.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch all invites from a guild without caching\nguild.invites.fetch({ cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch all invites from a channel\nguild.invites.fetch({ channelId: '222197033908436994' })\n  .then(console.log)\n  .catch(console.error);","// Fetch a single invite\nguild.invites.fetch('bRCvFy9')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single invite without checking cache\nguild.invites.fetch({ code: 'bRCvFy9', force: true })\n  .then(console.log)\n  .catch(console.error)","// Fetch a single invite without caching\nguild.invites.fetch({ code: 'bRCvFy9', cache: false })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching guild invite(s)","optional":true,"type":[[["InviteResolvable"]],[["FetchInviteOptions"]],[["FetchInvitesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Invite","|"],["Collection","<"],["string",", "],["Invite",">)>"]]]],"meta":{"line":134,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Create an invite to the guild from the provided channel.","scope":"instance","examples":["// Create an invite to a selected channel\nguild.invites.create('599942732013764608')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"channel","description":"The options for creating the invite from a channel.","type":[[["GuildInvitableChannelResolvable"]]]},{"name":"options","description":"The options for creating the invite from a channel.","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":193,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an invite.","scope":"instance","params":[{"name":"invite","description":"The invite to delete","type":[[["InviteResolvable"]]]},{"name":"reason","description":"Reason for deleting the invite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":222,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildManager","description":"Manages API methods for Guilds and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":44,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a {@link GuildResolvable} to a {@link Guild} object.","scope":"instance","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":[{"types":[[["Guild"]]],"nullable":true}],"meta":{"line":107,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link GuildResolvable} to a {@link Guild} id string.","scope":"instance","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":130,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a guild.\n<warn>This is only available to bots in fewer than 10 guilds.</warn>","scope":"instance","params":[{"name":"options","description":"Options for creating the guild","type":[[["GuildCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Guild",">"]]],"description":"The guild that was created"}],"meta":{"line":179,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or multiple guilds from Discord, or the guild cache if it's already available.","scope":"instance","params":[{"name":"options","description":"The guild's id or options","optional":true,"type":[[["GuildResolvable"]],[["FetchGuildOptions"]],[["FetchGuildsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Guild","|"],["Collection","<"],["Snowflake",", "],["OAuth2Guild",">)>"]]]],"meta":{"line":282,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchSoundboardSounds","description":"Fetches soundboard sounds for the specified guilds.","scope":"instance","examples":["// Fetch soundboard sounds for multiple guilds\nconst soundboardSounds = await client.guilds.fetchSoundboardSounds({\n guildIds: ['123456789012345678', '987654321098765432'],\n})\n\nconsole.log(soundboardSounds.get('123456789012345678'));"],"params":[{"name":"options","description":"The options for fetching soundboard sounds","type":[[["FetchSoundboardSoundsOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Collection","<"],["Snowflake",", "],["SoundboardSound",">>>"]]]],"meta":{"line":321,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"setIncidentActions","description":"Sets the incident actions for a guild.","scope":"instance","params":[{"name":"guild","description":"The guild","type":[[["GuildResolvable"]]]},{"name":"incidentActions","description":"The incident actions to set","type":[[["IncidentActionsEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["IncidentActions",">"]]]],"meta":{"line":386,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"widgetImageURL","description":"Returns a URL for the PNG widget of a guild.","scope":"instance","params":[{"name":"guild","description":"The guild of the widget image","type":[[["GuildResolvable"]]]},{"name":"style","description":"The style for the widget image","optional":true,"type":[[["GuildWidgetStyle"]]]}],"returns":[[[["string"]]]],"meta":{"line":413,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":32,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildMemberManager","description":"Manages API methods for GuildMembers and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":31,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":34,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"me","description":"The client user as a GuildMember of this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":151,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a {@link UserResolvable} to a {@link GuildMember} object.","scope":"instance","params":[{"name":"member","description":"The user that is part of the guild","type":[[["UserResolvable"]]]}],"returns":[{"types":[[["GuildMember"]]],"nullable":true}],"meta":{"line":51,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link UserResolvable} to a member id.","scope":"instance","params":[{"name":"member","description":"The user that is part of the guild","type":[[["UserResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":65,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"add","description":"Adds a user to the guild using OAuth2.\n<info>This method requires the {@link PermissionFlagsBits.CreateInstantInvite} permission.","scope":"instance","params":[{"name":"user","description":"The user to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for adding the user to the guild","type":[[["AddGuildMemberOptions"]]]}],"async":true,"returns":[[[["Promise","<?"],["GuildMember",">"]]]],"meta":{"line":98,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches member(s) from a guild.","scope":"instance","examples":["// Fetch all members from a guild\nguild.members.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member\nguild.members.fetch('66564597481480192')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member without checking cache\nguild.members.fetch({ user, force: true })\n  .then(console.log)\n  .catch(console.error)","// Fetch a single member without caching\nguild.members.fetch({ user, cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch by an array of users including their presences\nguild.members.fetch({ user: ['66564597481480192', '191615925336670208'], withPresences: true })\n  .then(console.log)\n  .catch(console.error);","// Fetch by query\nguild.members.fetch({ query: 'hydra', limit: 1 })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching member(s).\nOmitting the parameter or providing `undefined` will fetch all members.","optional":true,"type":[[["UserResolvable"]],[["FetchMemberOptions"]],[["FetchMembersOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["GuildMember","|"],["Collection","<"],["Snowflake",", "],["GuildMember",">)>"]]]],"meta":{"line":216,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchMe","description":"Fetches the client user as a GuildMember of the guild.","scope":"instance","params":[{"name":"options","description":"The options for fetching the member","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":297,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"search","description":"Searches for members in the guild based on a query.","scope":"instance","params":[{"name":"options","description":"Options for searching members","type":[[["GuildSearchMembersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]]],"meta":{"line":316,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"list","description":"Lists up to 1000 members of the guild.","scope":"instance","params":[{"name":"options","description":"Options for listing members","optional":true,"type":[[["GuildListMembersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]]],"meta":{"line":338,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a member of the guild.\n<info>The user must be a member of the guild</info>","scope":"instance","params":[{"name":"user","description":"The member to edit","type":[[["UserResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["GuildMemberEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":368,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"prune","description":"Prunes members from the guild based on how long they have been inactive.","scope":"instance","examples":["// See how many members will be pruned\nguild.members.prune({ dry: true })\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.members.prune({ days: 1, reason: 'too many people!' })\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);","// Include members with a specified role\nguild.members.prune({ days: 7, roles: ['657259391652855808'] })\n   .then(pruned => console.log(`I just pruned ${pruned} people!`))\n   .catch(console.error);"],"params":[{"name":"options","description":"Options for pruning","optional":true,"type":[[["GuildPruneMembersOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<?"],["number",">"]]],"description":"The number of members that were/will be kicked"}],"meta":{"line":449,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"kick","description":"Kicks a user from the guild.\n<info>The user must be a member of the guild</info>","scope":"instance","examples":["// Kick a user by id (or with a user/guild member object)\nawait guild.members.kick('84484653687267328');"],"params":[{"name":"user","description":"The member to kick","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for kicking","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":488,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"ban","description":"Bans a user from the guild. Internally calls the {@link GuildBanManager#create} method.","scope":"instance","examples":["// Ban a user by id (or with a user/guild member object)\nawait guild.members.ban('84484653687267328');"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"type":[[["BanOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":505,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"unban","description":"Unbans a user from the guild. Internally calls the {@link GuildBanManager#remove} method.","scope":"instance","examples":["// Unban a user by id (or with a user/guild member object)\nawait guild.members.unban('84484653687267328');"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":519,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"bulkBan","description":"Bulk ban users from a guild, and optionally delete previous messages sent by them.","scope":"instance","examples":["// Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days\nguild.members.bulkBan(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })\n  .then(result => {\n    console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)\n  })\n  .catch(console.error);"],"params":[{"name":"users","description":"The users to ban","type":[[["Collection","<"],["Snowflake",", "],["UserResolvable",">"]],[["Array","<"],["UserResolvable",">"]]]},{"name":"options","description":"The options for bulk banning users","optional":true,"type":[[["BanOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["BulkBanResult",">"]]],"description":"Returns an object with `bannedUsers` key containing the IDs of the banned users\nand the key `failedUsers` with the IDs that could not be banned or were already banned.\nInternally calls the GuildBanManager#bulkCreate method."}],"meta":{"line":539,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"addRole","description":"Adds a role to a member.","scope":"instance","params":[{"name":"options","description":"Options for adding the role","type":[[["AddOrRemoveGuildMemberRoleOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":558,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"removeRole","description":"Removes a role from a member.","scope":"instance","params":[{"name":"options","description":"Options for removing the role","type":[[["AddOrRemoveGuildMemberRoleOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":571,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":22,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildMemberRoleManager","description":"Manages API methods for roles of a GuildMember and stores their cache.","extends":[[["DataManager"]]],"props":[{"name":"member","description":"The GuildMember this manager belongs to","scope":"instance","type":[[["GuildMember"]]],"meta":{"line":23,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"guild","description":"The Guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":30,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The roles of this member","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":39,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"hoist","description":"The role of the member used to hoist them in a separate category in the users list","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":50,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"icon","description":"The role of the member used to set their role icon","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":62,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"color","description":"The role of the member used to set their color","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":74,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"highest","description":"The role of the member with the highest position","scope":"instance","readonly":true,"type":[[["Role"]]],"meta":{"line":86,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"premiumSubscriberRole","description":"The premium subscriber role of the guild, if present on the member","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":96,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"botRole","description":"The managed role this member created when joining the guild, if any\n<info>Only ever available on bots</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":107,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the member.\n\n<info>Uses the idempotent PUT route for singular roles, otherwise PATCHes the underlying guild member</info>","scope":"instance","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for adding the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":121,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Removes a role (or multiple roles) from the member.\n\n<info>Uses the idempotent DELETE route for singular roles, otherwise PATCHes the underlying guild member</info>","scope":"instance","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for removing the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":162,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"set","description":"Sets the roles applied to the member.","scope":"instance","examples":["// Set the member's roles to a single role\nguildMember.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all the roles from a member\nguildMember.roles.set([])\n  .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role ids to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":212,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":14,"file":"GuildMemberRoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildMessageManager","description":"Manages API methods for messages in a guild and holds their cache.","extends":[[["MessageManager"]]],"props":[{"name":"channel","description":"The channel that the messages belong to","scope":"instance","type":[[["GuildTextBasedChannel"]]],"meta":{"line":13,"file":"GuildMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Messages","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":33,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"crosspost","description":"Publishes a message in an announcement channel to all channels following it, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to publish","type":[[["MessageResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":26,"file":"GuildMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches message(s) from a channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","scope":"instance","inherits":"MessageManager#fetch","inherited":true,"examples":["// Fetch a message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching\nchannel.messages.fetch({ limit: 10, cache: false })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching around a message id\nchannel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch messages and filter by a user id\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(message =>\n         message.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching message(s)","optional":true,"type":[[["MessageResolvable"]],[["FetchMessageOptions"]],[["FetchMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Message","|"],["Collection","<"],["Snowflake",", "],["Message",">)>"]]]],"meta":{"line":100,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","scope":"instance","inherits":"MessageManager#fetchPinned","inherited":true,"examples":["// Get pinned messages\nchannel.messages.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":139,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link MessageResolvable} to a {@link Message} object.","scope":"instance","inherits":"MessageManager#resolve","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Message"]]],"nullable":true}],"meta":{"line":146,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link MessageResolvable} to a {@link Message} id.","scope":"instance","inherits":"MessageManager#resolveId","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":156,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#edit","inherited":true,"params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]]]},{"name":"options","description":"The options to edit the message","type":[[["string"]],[["MessageEditOptions"]],[["MessagePayload"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"pin","description":"Pins a message to the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#pin","inherited":true,"params":[{"name":"message","description":"The message to pin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":220,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"unpin","description":"Unpins a message from the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#unpin","inherited":true,"params":[{"name":"message","description":"The message to unpin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":234,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"react","description":"Adds a reaction to a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#react","inherited":true,"params":[{"name":"message","description":"The message to react to","type":[[["MessageResolvable"]]]},{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":248,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#delete","inherited":true,"params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":268,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"endPoll","description":"Ends a poll.","scope":"instance","inherits":"MessageManager#endPoll","inherited":true,"params":[{"name":"messageId","description":"The id of the message","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":281,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPollAnswerVoters","description":"Fetches the users that voted for a poll answer.","scope":"instance","inherits":"MessageManager#fetchPollAnswerVoters","inherited":true,"params":[{"name":"options","description":"The options for fetching the poll answer voters","type":[[["FetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":300,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"GuildMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventManager","description":"Manages API methods for GuildScheduledEvents and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":26,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildScheduledEvent",">"]]],"meta":{"line":29,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new guild scheduled event.","scope":"instance","params":[{"name":"options","description":"Options for creating the guild scheduled event","type":[[["GuildScheduledEventCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":94,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more guild scheduled events from Discord, or the guild cache if it's already available.","scope":"instance","params":[{"name":"options","description":"The id of the guild scheduled event or options","optional":true,"type":[[["GuildScheduledEventResolvable"]],[["FetchGuildScheduledEventOptions"]],[["FetchGuildScheduledEventsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["GuildScheduledEvent","|"],["Collection","<"],["Snowflake",", "],["GuildScheduledEvent",">)>"]]]],"meta":{"line":164,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a guild scheduled event.","scope":"instance","params":[{"name":"guildScheduledEvent","description":"The guild scheduled event to edit","type":[[["GuildScheduledEventResolvable"]]]},{"name":"options","description":"Options to edit the guild scheduled event","type":[[["GuildScheduledEventEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":219,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a guild scheduled event.","scope":"instance","params":[{"name":"guildScheduledEvent","description":"The guild scheduled event to delete","type":[[["GuildScheduledEventResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":272,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchSubscribers","description":"Fetches subscribers of a guild scheduled event.","scope":"instance","params":[{"name":"guildScheduledEvent","description":"The guild scheduled event to fetch subscribers of","type":[[["GuildScheduledEventResolvable"]]]},{"name":"options","description":"Options for fetching the subscribers","optional":true,"default":"{}","type":[[["FetchGuildScheduledEventSubscribersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildScheduledEventUser",">>"]]]],"meta":{"line":306,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":17,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildSoundboardSoundManager","description":"Manages API methods for Soundboard Sounds and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":27,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Soundboard Sounds","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["SoundboardSound",">"]]],"meta":{"line":30,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a SoundboardSoundResolvable to a SoundboardSound object.","scope":"instance","params":[{"name":"soundboardSound","description":"The SoundboardSound resolvable to identify","type":[[["SoundboardSoundResolvable"]]]}],"returns":[{"types":[[["SoundboardSound"]]],"nullable":true}],"meta":{"line":49,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link SoundboardSoundResolvable} to a {@link SoundboardSound} id.","scope":"instance","params":[{"name":"soundboardSound","description":"The soundboard sound resolvable to resolve","type":[[["SoundboardSoundResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":65,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a new guild soundboard sound.","scope":"instance","examples":["// Create a new soundboard sound from a file on your computer\nguild.soundboardSounds.create({ file: './sound.mp3', name: 'sound' })\n  .then(sound => console.log(`Created new soundboard sound with name ${sound.name}!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for creating a guild soundboard sound","type":[[["GuildSoundboardSoundCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["SoundboardSound",">"]]],"description":"The created soundboard sound"}],"meta":{"line":95,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a soundboard sound.","scope":"instance","params":[{"name":"soundboardSound","description":"The soundboard sound to edit","type":[[["SoundboardSoundResolvable"]]]},{"name":"options","description":"The new data for the soundboard sound","optional":true,"default":"{}","type":[[["GuildSoundboardSoundEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["SoundboardSound",">"]]]],"meta":{"line":130,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a soundboard sound.","scope":"instance","params":[{"name":"soundboardSound","description":"The soundboard sound to delete","type":[[["SoundboardSoundResolvable"]]]},{"name":"reason","description":"Reason for deleting this soundboard sound","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":163,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more soundboard sounds from Discord, or the soundboard sound cache if they're already available.","scope":"instance","examples":["// Fetch a single soundboard sound\nguild.soundboardSounds.fetch('222078108977594368')\n  .then(sound => console.log(`The soundboard sound name is: ${sound.name}`))\n  .catch(console.error);","// Fetch all soundboard sounds from the guild\nguild.soundboardSounds.fetch()\n  .then(sounds => console.log(`There are ${sounds.size} soundboard sounds.`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching soundboard sound(s)","optional":true,"type":[[["SoundboardSoundResolvable"]],[["FetchSoundboardSoundOptions"]],[["FetchGuildSoundboardSoundsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["SoundboardSound","|"],["Collection","<"],["Snowflake",", "],["SoundboardSound",">)>"]]]],"meta":{"line":201,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":18,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildStickerManager","description":"Manages API methods for Guild Stickers and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":24,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Guild Stickers","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Sticker",">"]]],"meta":{"line":27,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new custom sticker in the guild.","scope":"instance","examples":["// Create a new sticker from a URL\nguild.stickers.create({ file: 'https://i.imgur.com/w3duR07.png', name: 'rip', tags: 'headstone' })\n  .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))\n  .catch(console.error);","// Create a new sticker from a file on your computer\nguild.stickers.create({ file: './memes/banana.png', name: 'banana', tags: 'banana' })\n  .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for creating a guild sticker","type":[[["GuildStickerCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Sticker",">"]]],"description":"The created sticker"}],"meta":{"line":65,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a StickerResolvable to a Sticker object.","scope":"instance","params":[{"name":"sticker","description":"The Sticker resolvable to identify","type":[[["StickerResolvable"]]]}],"returns":[{"types":[[["Sticker"]]],"nullable":true}],"meta":{"line":88,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a StickerResolvable to a Sticker id string.","scope":"instance","params":[{"name":"sticker","description":"The Sticker resolvable to identify","type":[[["StickerResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":98,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a sticker.","scope":"instance","params":[{"name":"sticker","description":"The sticker to edit","type":[[["StickerResolvable"]]]},{"name":"options","description":"The new data for the sticker","optional":true,"default":"{}","type":[[["GuildStickerEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Sticker",">"]]]],"meta":{"line":115,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a sticker.","scope":"instance","params":[{"name":"sticker","description":"The sticker to delete","type":[[["StickerResolvable"]]]},{"name":"reason","description":"Reason for deleting this sticker","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":141,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains one or more stickers from Discord, or the sticker cache if they're already available.","scope":"instance","examples":["// Fetch all stickers from the guild\nmessage.guild.stickers.fetch()\n  .then(stickers => console.log(`There are ${stickers.size} stickers.`))\n  .catch(console.error);","// Fetch a single sticker\nmessage.guild.stickers.fetch('222078108977594368')\n  .then(sticker => console.log(`The sticker name is: ${sticker.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The Sticker's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Sticker","|"],["Collection","<"],["Snowflake",", "],["Sticker",">)>"]]]],"meta":{"line":165,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchUser","description":"Fetches the user who uploaded this sticker, if this is a guild sticker.","scope":"instance","params":[{"name":"sticker","description":"The sticker to fetch the user for","type":[[["StickerResolvable"]]]}],"async":true,"returns":[[[["Promise","<?"],["User",">"]]]],"meta":{"line":186,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildTextThreadManager","description":"Manages API methods for {@link ThreadChannel} objects and stores their cache.","extends":[[["ThreadManager"]]],"props":[{"name":"channel","description":"The channel this Manager belongs to","scope":"instance","type":[[["TextChannel"]],[["AnnouncementChannel"]]],"meta":{"line":13,"file":"GuildTextThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ThreadChannel",">"]]],"meta":{"line":38,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new thread in the channel.","scope":"instance","examples":["// Create a new public thread\nchannel.threads\n  .create({\n    name: 'food-talk',\n    autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n    reason: 'Needed a separate thread for food',\n  })\n  .then(threadChannel => console.log(threadChannel))\n  .catch(console.error);","// Create a new private thread\nchannel.threads\n  .create({\n     name: 'mod-talk',\n     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n     type: ChannelType.PrivateThread,\n     reason: 'Needed a separate thread for moderation',\n   })\n  .then(threadChannel => console.log(threadChannel))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to create a new thread","optional":true,"type":[[["GuildTextThreadCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":61,"file":"GuildTextThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} object.","scope":"instance","inherits":"ThreadManager#resolve","inherited":true,"params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["ThreadChannel"]]],"nullable":true}],"meta":{"line":52,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} id.","scope":"instance","inherits":"ThreadManager#resolveId","inherited":true,"params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":62,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains a thread from Discord, or the channel cache if it's already available.","scope":"instance","inherits":"ThreadManager#fetch","inherited":true,"examples":["// Fetch a thread by its id\nchannel.threads.fetch('831955138126104859')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to fetch threads. If it is a\nThreadChannelResolvable then the specified thread will be fetched. Fetches all active threads if `undefined`","optional":true,"type":[[["ThreadChannelResolvable"]],[["FetchThreadsOptions"]]]},{"name":"cacheOptions","description":"Additional options for this fetch. <warn>The `force` field gets ignored\nif `options` is not a {@link ThreadChannelResolvable}</warn>","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<?("],["ThreadChannel","|"],["FetchedThreads","|"],["FetchedThreadsMore",")>"]]],"description":"{@link FetchedThreads} if active & {@link FetchedThreadsMore} if archived."}],"meta":{"line":94,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchArchived","description":"Obtains a set of archived threads from Discord.\n<info>This method requires the {@link PermissionFlagsBits.ReadMessageHistory} permission\nin the parent channel.</info>","scope":"instance","inherits":"ThreadManager#fetchArchived","inherited":true,"params":[{"name":"options","description":"The options to fetch archived threads","optional":true,"type":[[["FetchArchivedThreadOptions"]]]},{"name":"cache","description":"Whether to cache the new thread objects if they aren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreadsMore",">"]]]],"meta":{"line":148,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchActive","description":"Obtains all active threads in the channel.","scope":"instance","inherits":"ThreadManager#fetchActive","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched data","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreads",">"]]]],"meta":{"line":187,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"GuildTextThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"MessageManager","description":"Manages API methods for Messages and holds their cache.","extends":[[["CachedManager"]]],"abstract":true,"props":[{"name":"channel","description":"The channel that the messages belong to","scope":"instance","type":[[["TextBasedChannels"]]],"meta":{"line":30,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Messages","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":33,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches message(s) from a channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","scope":"instance","examples":["// Fetch a message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching\nchannel.messages.fetch({ limit: 10, cache: false })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching around a message id\nchannel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch messages and filter by a user id\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(message =>\n         message.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching message(s)","optional":true,"type":[[["MessageResolvable"]],[["FetchMessageOptions"]],[["FetchMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Message","|"],["Collection","<"],["Snowflake",", "],["Message",">)>"]]]],"meta":{"line":100,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","scope":"instance","examples":["// Get pinned messages\nchannel.messages.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":139,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link MessageResolvable} to a {@link Message} object.","scope":"instance","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Message"]]],"nullable":true}],"meta":{"line":146,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link MessageResolvable} to a {@link Message} id.","scope":"instance","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":156,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a message, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]]]},{"name":"options","description":"The options to edit the message","type":[[["string"]],[["MessageEditOptions"]],[["MessagePayload"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"pin","description":"Pins a message to the channel's pinned messages, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to pin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":220,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"unpin","description":"Unpins a message from the channel's pinned messages, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to unpin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":234,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"react","description":"Adds a reaction to a message, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to react to","type":[[["MessageResolvable"]]]},{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":248,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a message, even if it's not cached.","scope":"instance","params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":268,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"endPoll","description":"Ends a poll.","scope":"instance","params":[{"name":"messageId","description":"The id of the message","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":281,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPollAnswerVoters","description":"Fetches the users that voted for a poll answer.","scope":"instance","params":[{"name":"options","description":"The options for fetching the poll answer voters","type":[[["FetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":300,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":19,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"PartialGroupDMMessageManager","description":"Manages API methods for messages in group direct message channels and holds their cache.","extends":[[["MessageManager"]]],"props":[{"name":"channel","description":"The channel that the messages belong to","scope":"instance","type":[[["PartialGroupDMChannel"]]],"meta":{"line":11,"file":"PartialGroupDMMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of Messages","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":33,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches message(s) from a channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","scope":"instance","inherits":"MessageManager#fetch","inherited":true,"examples":["// Fetch a message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching\nchannel.messages.fetch({ limit: 10, cache: false })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch a maximum of 10 messages without caching around a message id\nchannel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Fetch messages and filter by a user id\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(message =>\n         message.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching message(s)","optional":true,"type":[[["MessageResolvable"]],[["FetchMessageOptions"]],[["FetchMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Message","|"],["Collection","<"],["Snowflake",", "],["Message",">)>"]]]],"meta":{"line":100,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","scope":"instance","inherits":"MessageManager#fetchPinned","inherited":true,"examples":["// Get pinned messages\nchannel.messages.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":139,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link MessageResolvable} to a {@link Message} object.","scope":"instance","inherits":"MessageManager#resolve","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Message"]]],"nullable":true}],"meta":{"line":146,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link MessageResolvable} to a {@link Message} id.","scope":"instance","inherits":"MessageManager#resolveId","inherited":true,"params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":156,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#edit","inherited":true,"params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]]]},{"name":"options","description":"The options to edit the message","type":[[["string"]],[["MessageEditOptions"]],[["MessagePayload"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"pin","description":"Pins a message to the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#pin","inherited":true,"params":[{"name":"message","description":"The message to pin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":220,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"unpin","description":"Unpins a message from the channel's pinned messages, even if it's not cached.","scope":"instance","inherits":"MessageManager#unpin","inherited":true,"params":[{"name":"message","description":"The message to unpin","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":234,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"react","description":"Adds a reaction to a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#react","inherited":true,"params":[{"name":"message","description":"The message to react to","type":[[["MessageResolvable"]]]},{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":248,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a message, even if it's not cached.","scope":"instance","inherits":"MessageManager#delete","inherited":true,"params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":268,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"endPoll","description":"Ends a poll.","scope":"instance","inherits":"MessageManager#endPoll","inherited":true,"params":[{"name":"messageId","description":"The id of the message","type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":281,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchPollAnswerVoters","description":"Fetches the users that voted for a poll answer.","scope":"instance","inherits":"MessageManager#fetchPollAnswerVoters","inherited":true,"params":[{"name":"options","description":"The options for fetching the poll answer voters","type":[[["FetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":300,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":10,"file":"PartialGroupDMMessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"PermissionOverwriteManager","description":"Manages API methods for guild channel permission overwrites and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"channel","description":"The channel of the permission overwrite this manager belongs to","scope":"instance","type":[[["GuildChannel"]]],"meta":{"line":34,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"set","description":"Replaces the permission overwrites in this channel.","scope":"instance","examples":["message.channel.permissionOverwrites.set([\n  {\n     id: message.author.id,\n     deny: [PermissionFlagsBits.ViewChannel],\n  },\n], 'Needed to change permissions');"],"params":[{"name":"overwrites","description":"Permission overwrites the channel gets updated with","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":69,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"upsert","description":"Creates or edits permission overwrites for a user or role in this channel.","scope":"instance","access":"private","params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"overwriteOptions","description":"The extra information for the update","optional":true,"type":[[["GuildChannelOverwriteOptions"]]]},{"name":"existing","description":"The existing overwrites to merge with this update","optional":true,"type":[[["PermissionOverwrites"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":101,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates permission overwrites for a user or role in this channel, or replaces them if already present.","scope":"instance","examples":["// Create or Replace permission overwrites for a message author\nmessage.channel.permissionOverwrites.create(message.author, {\n  SendMessages: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"overwriteOptions","description":"The extra information for the update","optional":true,"type":[[["GuildChannelOverwriteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":135,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits permission overwrites for a user or role in this channel, or creates an entry if not already present.","scope":"instance","examples":["// Edit or Create permission overwrites for a message author\nmessage.channel.permissionOverwrites.edit(message.author, {\n  SendMessages: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"overwriteOptions","description":"The extra information for the update","optional":true,"type":[[["GuildChannelOverwriteOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":154,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes permission overwrites for a user or role in this channel.","scope":"instance","params":[{"name":"userOrRole","description":"The user or role to delete","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"reason","description":"The reason for deleting the overwrite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":168,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":18,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"PollAnswerVoterManager","description":"Manages API methods for users who voted on a poll and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"answer","description":"The poll answer that this manager belongs to","scope":"instance","type":[[["PollAnswer"]]],"meta":{"line":23,"file":"PollAnswerVoterManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":26,"file":"PollAnswerVoterManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches the users that voted on this poll answer. Resolves with a collection of users, mapped by their ids.","scope":"instance","params":[{"name":"options","description":"Options for fetching the users","optional":true,"default":"{}","type":[[["BaseFetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":39,"file":"PollAnswerVoterManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":14,"file":"PollAnswerVoterManager.js","path":"packages/discord.js/src/managers"}},{"name":"PresenceManager","description":"Manages API methods for Presences and holds their cache.","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of Presences","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":16,"file":"PresenceManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a {@link PresenceResolvable} to a {@link Presence} object.","scope":"instance","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":[{"types":[[["Presence"]]],"nullable":true}],"meta":{"line":42,"file":"PresenceManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link PresenceResolvable} to a {@link Presence} id.","scope":"instance","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"PresenceManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":11,"file":"PresenceManager.js","path":"packages/discord.js/src/managers"}},{"name":"ReactionManager","description":"Manages API methods for reactions and holds their cache.","extends":[[["CachedManager"]]],"props":[{"name":"message","description":"The message that this manager belongs to","scope":"instance","type":[[["Message"]]],"meta":{"line":21,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The reaction cache of this manager","scope":"instance","type":[[["Collection","<("],["string","|"],["Snowflake","), "],["MessageReaction",">"]]],"meta":{"line":28,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.","scope":"instance","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":[{"types":[[["MessageReaction"]]],"nullable":true}],"meta":{"line":44,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.","scope":"instance","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":54,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"removeAll","description":"Removes all reactions from a message.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":69,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"ReactionUserManager","description":"Manages API methods for users who reacted to a reaction and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"reaction","description":"The reaction that this manager belongs to","scope":"instance","type":[[["MessageReaction"]]],"meta":{"line":24,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":27,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.","scope":"instance","params":[{"name":"options","description":"Options for fetching the users","optional":true,"type":[[["FetchReactionUsersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":49,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Removes a user from this reaction.","scope":"instance","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.client.user","type":[[["UserResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageReaction",">"]]]],"meta":{"line":72,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"RoleManager","description":"Manages API methods for roles and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild belonging to this manager","scope":"instance","type":[[["Guild"]]],"meta":{"line":36,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The role cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":39,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"everyone","description":"The `@everyone` role of the guild","scope":"instance","readonly":true,"type":[[["Role"]]],"meta":{"line":363,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"premiumSubscriberRole","description":"The premium subscriber role of the guild, if any","scope":"instance","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":373,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"highest","description":"The role with the highest position in the cache","scope":"instance","readonly":true,"type":[[["Role"]]],"meta":{"line":383,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Obtains a role from Discord, or the role cache if they're already available.","scope":"instance","examples":["// Fetch all roles from the guild\nmessage.guild.roles.fetch()\n  .then(roles => console.log(`There are ${roles.size} roles.`))\n  .catch(console.error);","// Fetch a single role\nmessage.guild.roles.fetch('222078108977594368')\n  .then(role => console.log(`The role color is: ${role.color}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"The role's id","optional":true,"type":[[["Snowflake"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Role","|"],["Collection","<"],["Snowflake",", "],["Role",">)>"]]]],"meta":{"line":67,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link RoleResolvable} to a {@link Role} object.","scope":"instance","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":[{"types":[[["Role"]]],"nullable":true}],"meta":{"line":92,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link RoleResolvable} to a {@link Role} id.","scope":"instance","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":102,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"create","description":"Creates a new role in the guild with given information.\n<warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>","scope":"instance","examples":["// Create a new role\nguild.roles.create()\n  .then(console.log)\n  .catch(console.error);","// Create a new role with data and a reason\nguild.roles.create({\n  name: 'Super Cool Blue People',\n  color: Colors.Blue,\n  reason: 'we needed a role for Super Cool People',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for creating the new role","optional":true,"type":[[["RoleCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":150,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits a role of the guild.","scope":"instance","examples":["// Edit a role\nguild.roles.edit('222079219327434752', { name: 'buddies' })\n  .then(updated => console.log(`Edited role name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"role","description":"The role to edit","type":[[["RoleResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["RoleEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":200,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes a role.","scope":"instance","examples":["// Delete a role\nguild.roles.delete('222079219327434752', 'The role needed to go')\n  .then(() => console.log('Deleted the role'))\n  .catch(console.error);"],"params":[{"name":"role","description":"The role to delete","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for deleting the role","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":247,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"setPosition","description":"Sets the new position of the role.","scope":"instance","examples":["// Set the position of the role\nguild.roles.setPosition('222197033908436994', 1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"role","description":"The role to change the position of","type":[[["RoleResolvable"]]]},{"name":"position","description":"The new position for the role","type":[[["number"]]]},{"name":"options","description":"Options for setting the position","optional":true,"type":[[["SetRolePositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":266,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"setPositions","description":"Batch-updates the guild's role positions","scope":"instance","examples":["guild.roles.setPositions([{ role: roleId, position: updatedRoleIndex }])\n .then(guild => console.log(`Role positions updated for ${guild}`))\n .catch(console.error);"],"params":[{"name":"rolePositions","description":"Role positions to update","type":[[["Array","<"],["GuildRolePosition",">"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":304,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"instance","params":[{"name":"role1","description":"First role to compare","type":[[["RoleResolvable"]]]},{"name":"role2","description":"Second role to compare","type":[[["RoleResolvable"]]]}],"returns":[{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"}],"meta":{"line":327,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"botRoleFor","description":"Gets the managed role a user created when joining the guild, if any\n<info>Only ever available for bots</info>","scope":"instance","params":[{"name":"user","description":"The user to access the bot role for","type":[[["UserResolvable"]]]}],"returns":[{"types":[[["Role"]]],"nullable":true}],"meta":{"line":351,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":20,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"StageInstanceManager","description":"Manages API methods for {@link StageInstance} objects and holds their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":22,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["StageInstance",">"]]],"meta":{"line":25,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"create","description":"Creates a new stage instance.","scope":"instance","examples":["// Create a stage instance\nguild.stageInstances.create('1234567890123456789', {\n topic: 'A very creative topic',\n privacyLevel: GuildPrivacyLevel.GuildOnly\n})\n .then(stageInstance => console.log(stageInstance))\n .catch(console.error);"],"params":[{"name":"channel","description":"The stage channel to associate the created stage instance to","type":[[["StageChannelResolvable"]]]},{"name":"options","description":"The options to create the stage instance","type":[[["StageInstanceCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":66,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches the stage instance associated with a stage channel, if it exists.","scope":"instance","examples":["// Fetch a stage instance\nguild.stageInstances.fetch('1234567890123456789')\n .then(stageInstance => console.log(stageInstance))\n .catch(console.error);"],"params":[{"name":"channel","description":"The stage channel whose associated stage instance is to be fetched","type":[[["StageChannelResolvable"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":99,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"edit","description":"Edits an existing stage instance.","scope":"instance","examples":["// Edit a stage instance\nguild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n .then(stageInstance => console.log(stageInstance))\n .catch(console.error);"],"params":[{"name":"channel","description":"The stage channel whose associated stage instance is to be edited","type":[[["StageChannelResolvable"]]]},{"name":"options","description":"The options to edit the stage instance","type":[[["StageInstanceEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":132,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"delete","description":"Deletes an existing stage instance.","scope":"instance","params":[{"name":"channel","description":"The stage channel whose associated stage instance is to be deleted","type":[[["StageChannelResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":161,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":13,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"SubscriptionManager","description":"Manages API methods for subscriptions and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Subscription",">"]]],"meta":{"line":21,"file":"SubscriptionManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches subscriptions for this application","scope":"instance","params":[{"name":"options","description":"Options for fetching the subscriptions","optional":true,"default":"{}","type":[[["FetchSubscriptionOptions"]],[["FetchSubscriptionsOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["Subscription","|"],["Collection","<"],["Snowflake",", "],["Subscription",">)>"]]]],"meta":{"line":54,"file":"SubscriptionManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":16,"file":"SubscriptionManager.js","path":"packages/discord.js/src/managers"}},{"name":"ThreadManager","description":"Manages API methods for thread-based channels and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"channel","description":"The channel this Manager belongs to","scope":"instance","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":27,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ThreadChannel",">"]]],"meta":{"line":38,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"resolve","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} object.","scope":"instance","params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["ThreadChannel"]]],"nullable":true}],"meta":{"line":52,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} id.","scope":"instance","params":[{"name":"thread","description":"The ThreadChannel resolvable to resolve","type":[[["ThreadChannelResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":62,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains a thread from Discord, or the channel cache if it's already available.","scope":"instance","examples":["// Fetch a thread by its id\nchannel.threads.fetch('831955138126104859')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to fetch threads. If it is a\nThreadChannelResolvable then the specified thread will be fetched. Fetches all active threads if `undefined`","optional":true,"type":[[["ThreadChannelResolvable"]],[["FetchThreadsOptions"]]]},{"name":"cacheOptions","description":"Additional options for this fetch. <warn>The `force` field gets ignored\nif `options` is not a {@link ThreadChannelResolvable}</warn>","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<?("],["ThreadChannel","|"],["FetchedThreads","|"],["FetchedThreadsMore",")>"]]],"description":"{@link FetchedThreads} if active & {@link FetchedThreadsMore} if archived."}],"meta":{"line":94,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchArchived","description":"Obtains a set of archived threads from Discord.\n<info>This method requires the {@link PermissionFlagsBits.ReadMessageHistory} permission\nin the parent channel.</info>","scope":"instance","params":[{"name":"options","description":"The options to fetch archived threads","optional":true,"type":[[["FetchArchivedThreadOptions"]]]},{"name":"cache","description":"Whether to cache the new thread objects if they aren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreadsMore",">"]]]],"meta":{"line":148,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetchActive","description":"Obtains all active threads in the channel.","scope":"instance","params":[{"name":"cache","description":"Whether to cache the fetched data","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["FetchedThreads",">"]]]],"meta":{"line":187,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":16,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"ThreadMemberManager","description":"Manages API methods for GuildMembers and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"thread","description":"The thread this manager belongs to","scope":"instance","type":[[["ThreadChannel"]]],"meta":{"line":24,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this Manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["ThreadMember",">"]]],"meta":{"line":27,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"me","description":"The client user as a ThreadMember of this ThreadChannel","scope":"instance","readonly":true,"nullable":true,"type":[[["ThreadMember"]]],"meta":{"line":60,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetchMe","description":"Fetches the client user as a ThreadMember of the thread.","scope":"instance","params":[{"name":"options","description":"The options for fetching the member","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadMember",">"]]]],"meta":{"line":50,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} object.","scope":"instance","params":[{"name":"member","description":"The user that is part of the thread","type":[[["ThreadMemberResolvable"]]]}],"returns":[{"types":[[["GuildMember"]]],"nullable":true}],"meta":{"line":78,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} id string.","scope":"instance","params":[{"name":"member","description":"The user that is part of the guild","type":[[["ThreadMemberResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":92,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"add","description":"Adds a member to the thread.","scope":"instance","params":[{"name":"member","description":"The member to add","type":[[["UserResolvable"]],[["'@me'"]]]}],"async":true,"returns":[[[["Promise","<"],["Snowflake",">"]]]],"meta":{"line":105,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"remove","description":"Remove a user from the thread.","scope":"instance","params":[{"name":"member","description":"The member to remove","type":[[["UserResolvable"]],[["'@me'"]]]}],"async":true,"returns":[[[["Promise","<"],["Snowflake",">"]]]],"meta":{"line":118,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Fetches thread member(s) from Discord.\n<info>This method requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>","scope":"instance","params":[{"name":"options","description":"Options for fetching thread member(s)","optional":true,"type":[[["ThreadMemberResolvable"]],[["FetchThreadMemberOptions"]],[["FetchThreadMembersOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["ThreadMember","|"],["Collection","<"],["Snowflake",", "],["ThreadMember",">)>"]]]],"meta":{"line":167,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":15,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"UserManager","description":"Manages API methods for users and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":21,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"dmChannel","description":"The DM between the client's user and a user","scope":"instance","access":"private","params":[{"name":"userId","description":"The user id","type":[[["Snowflake"]]]}],"returns":[{"types":[[["DMChannel"]]],"nullable":true}],"meta":{"line":46,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"createDM","description":"Creates a {@link DMChannel} between the client and a user.","scope":"instance","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":60,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"deleteDM","description":"Deletes a {@link DMChannel} (if one exists) between the client and a user. Resolves with the channel if successful.","scope":"instance","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":78,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"fetch","description":"Obtains a user from Discord, or the user cache if it's already available.","scope":"instance","params":[{"name":"user","description":"The user to fetch","type":[[["UserResolvable"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":94,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"send","description":"Sends a message to a user.","scope":"instance","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":112,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a {@link UserResolvable} to a {@link User} object.","scope":"instance","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":[{"types":[[["User"]]],"nullable":true}],"meta":{"line":122,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a {@link UserResolvable} to a {@link User} id.","scope":"instance","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":134,"file":"UserManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":16,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"VoiceStateManager","description":"Manages API methods for VoiceStates and stores their cache.","extends":[[["CachedManager"]]],"props":[{"name":"guild","description":"The guild this manager belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":21,"file":"VoiceStateManager.js","path":"packages/discord.js/src/managers"}},{"name":"cache","description":"The cache of this manager","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["VoiceState",">"]]],"meta":{"line":24,"file":"VoiceStateManager.js","path":"packages/discord.js/src/managers"}},{"name":"_cache","description":"The private cache of items for this manager.","scope":"instance","access":"private","readonly":true,"type":[[["Collection"]]],"meta":{"line":16,"file":"CachedManager.js","path":"packages/discord.js/src/managers"}},{"name":"holds","description":"The data structure belonging to this manager.","scope":"instance","access":"private","readonly":true,"type":[[["function"]]],"meta":{"line":16,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"client","description":"The client that instantiated this Manager","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"BaseManager.js","path":"packages/discord.js/src/managers"}}],"methods":[{"name":"fetch","description":"Obtains a user's voice state from discord or from the cache if it's already available.","scope":"instance","examples":["// Fetch a member's voice state\nguild.voiceStates.fetch(\"66564597481480192\")\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"member","description":"The member whose voice state is to be fetched","type":[[["UserResolvable"]],[["'@me'"]]]},{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["VoiceState",">"]]]],"meta":{"line":52,"file":"VoiceStateManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","scope":"instance","inherits":"DataManager#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Object"]]],"description":"An instance from this Manager","nullable":true}],"meta":{"line":43,"file":"DataManager.js","path":"packages/discord.js/src/managers"}},{"name":"resolveId","description":"Resolves a data entry to an instance id.","scope":"instance","inherits":"DataManager#resolveId","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this Manager","type":[[["string"]],[["Object"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":55,"file":"DataManager.js","path":"packages/discord.js/src/managers"}}],"meta":{"line":12,"file":"VoiceStateManager.js","path":"packages/discord.js/src/managers"}},{"name":"Shard","description":"A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\nspawn a new one to replace it as necessary.","extends":[[["AsyncEventEmitter"]]],"props":[{"name":"manager","description":"Manager that created the shard","scope":"instance","type":[[["ShardingManager"]]],"meta":{"line":44,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"id","description":"The shard's id in the manager","scope":"instance","type":[[["number"]]],"meta":{"line":51,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"silent","description":"Whether to pass silent flag to the shard's process (only when {@link ShardingManager#mode} is `process`)","scope":"instance","type":[[["boolean"]]],"meta":{"line":58,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"args","description":"Arguments for the shard's process/worker","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":65,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process/worker executable","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":72,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"env","description":"Environment variables for the shard's process, or workerData for the shard's worker","scope":"instance","type":[[["Object"]]],"meta":{"line":79,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","scope":"instance","type":[[["boolean"]]],"meta":{"line":92,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"process","description":"Process of the shard (if {@link ShardingManager#mode} is `process`)","scope":"instance","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":99,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"worker","description":"Worker of the shard (if {@link ShardingManager#mode} is `worker`)","scope":"instance","nullable":true,"type":[[["Worker"]]],"meta":{"line":106,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with","scope":"instance","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":114,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with","scope":"instance","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":122,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","scope":"instance","access":"private","type":[[["function"]]],"meta":{"line":130,"file":"Shard.js","path":"packages/discord.js/src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process or creates a worker thread for the shard.\n<warn>You should not need to call this manually.</warn>","scope":"instance","params":[{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[[["Promise","<"],["ChildProcess",">"]]]],"meta":{"line":141,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"kill","description":"Immediately kills the shard's process/worker and does not restart it.","scope":"instance","meta":{"line":224,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process/worker.","scope":"instance","params":[{"name":"options","description":"Options for respawning the shard","optional":true,"type":[[["ShardRespawnOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ChildProcess",">"]]]],"meta":{"line":252,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"send","description":"Sends a message to the shard's process/worker.","scope":"instance","params":[{"name":"message","description":"Message to send to the shard","type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["Shard",">"]]]],"meta":{"line":264,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","scope":"instance","examples":["shard.fetchClientValue('guilds.cache.size')\n  .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<*>"]]]],"meta":{"line":288,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the shard, in the context of the {@link Client}.","scope":"instance","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]],[["function"]]]},{"name":"context","description":"The context for the eval","optional":true,"type":[[["*"]]]}],"async":true,"returns":[{"types":[[["Promise","<*>"]]],"description":"Result of the script execution"}],"meta":{"line":331,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"_handleMessage","description":"Handles a message received from the child process/worker.","scope":"instance","access":"private","params":[{"name":"message","description":"Message received","type":[[["*"]]]}],"meta":{"line":376,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process/worker exiting.","scope":"instance","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]},{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client}\nhas become ready (`-1` or `Infinity` for no wait)","optional":true,"type":[[["number"]]]}],"meta":{"line":461,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"incrementMaxListeners","description":"Increments max listeners by one for a given emitter, if they are not zero.","scope":"instance","access":"private","params":[{"name":"emitter","description":"The emitter that emits the events.","type":[[["Worker"]],[["ChildProcess"]]]}],"meta":{"line":485,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"decrementMaxListeners","description":"Decrements max listeners by one for a given emitter, if they are not zero.","scope":"instance","access":"private","params":[{"name":"emitter","description":"The emitter that emits the events.","type":[[["Worker"]],[["ChildProcess"]]]}],"meta":{"line":498,"file":"Shard.js","path":"packages/discord.js/src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process/worker.","params":[{"name":"process","description":"Child process/worker that was created","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":177,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#event:clientReady} event.","meta":{"line":381,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link WebSocketShardEvents#Closed} event.","meta":{"line":393,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"resume","description":"Emitted upon the shard's {@link WebSocketShardEvents#Resumed} event.","meta":{"line":405,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"message","description":"Emitted upon receiving a message from the child process/worker.","params":[{"name":"message","description":"Message that was received","type":[[["*"]]]}],"meta":{"line":444,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process/worker exiting.","params":[{"name":"process","description":"Child process/worker that exited","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":462,"file":"Shard.js","path":"packages/discord.js/src/sharding"}}],"meta":{"line":24,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\nUtilizes IPC to send and receive data to/from the master process and other shards.","props":[{"name":"client","description":"Client for the shard","scope":"instance","type":[[["Client"]]],"meta":{"line":22,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"mode","description":"Mode the shard was spawned with","scope":"instance","type":[[["ShardingManagerMode"]]],"meta":{"line":29,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"parentPort","description":"Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)","scope":"instance","nullable":true,"type":[[["MessagePort"]]],"meta":{"line":36,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","scope":"instance","emits":["Shard#event:message"],"params":[{"name":"message","description":"Message to send","type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":76,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard, or a given shard.","see":["{@link ShardingManager#fetchClientValues}"],"scope":"instance","examples":["client.shard.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]},{"name":"shard","description":"Shard to fetch property from, all if undefined","optional":true,"type":[[["number"]]]}],"async":true,"returns":[[[["Promise","<(*|"],["Array","<*>)>"]]]],"meta":{"line":107,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script or function on all shards, or a given shard, in the context of the {@link Client}s.","see":["{@link ShardingManager#broadcastEval}"],"scope":"instance","examples":["client.shard.broadcastEval(client => client.guilds.cache.size)\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["function"]]]},{"name":"options","description":"The options for the broadcast","optional":true,"default":"{}","type":[[["BroadcastEvalOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<(*|"],["Array","<*>)>"]]],"description":"Results of the script execution"}],"meta":{"line":142,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ShardingManager#respawnAll}"],"scope":"instance","params":[{"name":"options","description":"Options for respawning shards","optional":true,"type":[[["MultipleShardRespawnOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"}],"meta":{"line":177,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","scope":"instance","access":"private","params":[{"name":"message","description":"Message received","type":[[["*"]]]}],"async":true,"meta":{"line":187,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","scope":"instance","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[[["*"]]]}],"meta":{"line":214,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"incrementMaxListeners","description":"Increments max listeners by one for a given emitter, if they are not zero.","scope":"instance","access":"private","params":[{"name":"emitter","description":"The emitter that emits the events.","type":[[["Worker"]],[["ChildProcess"]]]}],"meta":{"line":271,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"decrementMaxListeners","description":"Decrements max listeners by one for a given emitter, if they are not zero.","scope":"instance","access":"private","params":[{"name":"emitter","description":"The emitter that emits the events.","type":[[["Worker"]],[["ChildProcess"]]]}],"meta":{"line":284,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}],"returns":[[[["ShardClientUtil"]]]],"meta":{"line":239,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"shardIdForGuildId","description":"Get the shard id for a given guild id.","scope":"static","params":[{"name":"guildId","description":"Snowflake guild id to get shard id for","type":[[["Snowflake"]]]},{"name":"shardCount","description":"Number of shards","type":[[["number"]]]}],"returns":[[[["number"]]]],"meta":{"line":259,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}}],"meta":{"line":15,"file":"ShardClientUtil.js","path":"packages/discord.js/src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\ncontaining its own instance of your bot's {@link Client}. They all have a line of communication with the master\nprocess, and there are several useful methods that utilize it in order to simplify tasks that are normally difficult\nwith sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\npath to your main bot script to launch for each one.","extends":[[["AsyncEventEmitter"]]],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["ShardingManagerOptions"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","scope":"instance","type":[[["string"]]],"meta":{"line":70,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"shardList","description":"List of shards this sharding manager spawns","scope":"instance","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":82,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"totalShards","description":"Amount of shards that all sharding managers spawn in total","scope":"instance","type":[[["number"]]],"meta":{"line":107,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"mode","description":"Mode for shards to spawn with","scope":"instance","type":[[["ShardingManagerMode"]]],"meta":{"line":127,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","scope":"instance","type":[[["boolean"]]],"meta":{"line":137,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"silent","description":"Whether to pass the silent flag to child process (only when {@link ShardingManager#mode} is `process`)","scope":"instance","type":[[["boolean"]]],"meta":{"line":144,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":151,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"execArgv","description":"An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":158,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":165,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","scope":"instance","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":172,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}}],"methods":[{"name":"createShard","description":"Creates a single shard.\n<warn>Using this method is usually not necessary if you use the spawn method.</warn>","scope":"instance","params":[{"name":"id","description":"Id of the shard to create\n<info>This is usually not necessary to manually specify.</info>","optional":true,"default":"this.shards.size","type":[[["number"]]]}],"returns":[{"types":[[["Shard"]]],"description":"Note that the created shard needs to be explicitly spawned using its spawn method."}],"meta":{"line":187,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","scope":"instance","params":[{"name":"options","description":"Options for spawning shards","optional":true,"type":[[["MultipleShardSpawnOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]]],"meta":{"line":215,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","scope":"instance","params":[{"name":"message","description":"Message to be sent to the shards","type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["Array","<"],["Shard",">>"]]]],"meta":{"line":271,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, or a given shard, in the context of the {@link Client}s.","scope":"instance","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["function"]]]},{"name":"options","description":"The options for the broadcast","optional":true,"default":"{}","type":[[["BroadcastEvalOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<(*|"],["Array","<*>)>"]]],"description":"Results of the script execution"}],"meta":{"line":292,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard, or a given shard.","scope":"instance","examples":["manager.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]},{"name":"shard","description":"Shard to fetch property from, all if undefined","optional":true,"type":[[["number"]]]}],"async":true,"returns":[[[["Promise","<(*|"],["Array","<*>)>"]]]],"meta":{"line":311,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"_performOnShards","description":"Runs a method with given arguments on all shards, or a given shard.","scope":"instance","access":"private","params":[{"name":"method","description":"Method name to run on each shard","type":[[["string"]]]},{"name":"args","description":"Arguments to pass through to the method call","type":[[["Array","<*>"]]]},{"name":"shard","description":"Shard to run on, all if undefined","optional":true,"type":[[["number"]]]}],"async":true,"returns":[{"types":[[["Promise","<(*|"],["Array","<*>)>"]]],"description":"Results of the method execution"}],"meta":{"line":324,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","scope":"instance","params":[{"name":"options","description":"Options for respawning shards","optional":true,"type":[[["MultipleShardRespawnOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]]],"meta":{"line":358,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a shard.","params":[{"name":"shard","description":"Shard that was created","type":[[["Shard"]]]}],"meta":{"line":190,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}}],"meta":{"line":24,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"ActionRow","description":"Represents an action row","extends":[[["Component"]]],"props":[{"name":"components","description":"The components in this action row","scope":"instance","readonly":true,"type":[[["Array","<"],["Component",">"]]],"meta":{"line":21,"file":"ActionRow.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIActionRowComponent"]]]],"meta":{"line":29,"file":"ActionRow.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"ActionRow.js","path":"packages/discord.js/src/structures"}},{"name":"AnnouncementChannel","description":"Represents a guild announcement channel on Discord.","extends":[[["BaseGuildTextChannel"]]],"props":[{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildTextThreadManager"]]],"meta":{"line":30,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":37,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of the text channel","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":51,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":64,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":73,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":82,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"addFollower","description":"Adds the target to this channel's followers.","scope":"instance","examples":["if (channel.type === ChannelType.GuildAnnouncement) {\n  channel.addFollower('222197033908436994', 'Important announcements')\n    .then(() => console.log('Added follower'))\n    .catch(console.error);\n}"],"params":[{"name":"channel","description":"The channel where the webhook should be created","type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["FollowedChannelData",">"]]],"description":"Returns the data for the followed channel"}],"meta":{"line":24,"file":"AnnouncementChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","inherits":"BaseGuildTextChannel#setDefaultAutoArchiveDuration","inherited":true,"params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["TextChannel",">"]]]],"meta":{"line":108,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setType","description":"Sets the type of this channel.\n<info>Only conversion between {@link TextChannel} and {@link AnnouncementChannel} is supported.</info>","scope":"instance","inherits":"BaseGuildTextChannel#setType","inherited":true,"params":[{"name":"type","description":"The new channel type","type":[[["ChannelTypeGuildText"]],[["ChannelTypeGuildAnnouncement"]]]},{"name":"reason","description":"Reason for changing the channel's type","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":120,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","inherits":"BaseGuildTextChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":136,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"BaseGuildTextChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":178,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","inherits":"BaseGuildTextChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether or not to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":189,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","inherits":"BaseGuildTextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","inherits":"BaseGuildTextChannel#sendTyping","inherited":true,"implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","inherits":"BaseGuildTextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","inherits":"BaseGuildTextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","inherits":"BaseGuildTextChannel#createMessageComponentCollector","inherited":true,"implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"BaseGuildTextChannel#awaitMessageComponent","inherited":true,"implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","inherits":"BaseGuildTextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"BaseGuildTextChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"BaseGuildTextChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","inherits":"BaseGuildTextChannel#setRateLimitPerUser","inherited":true,"implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"BaseGuildTextChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"AnnouncementChannel.js","path":"packages/discord.js/src/structures"}},{"name":"AnonymousGuild","description":"Bundles common attributes and methods between {@link Guild} and {@link InviteGuild}","extends":[[["BaseGuild"]]],"abstract":true,"props":[{"name":"splash","description":"The hash of the guild invite splash image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The hash of the guild banner","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","scope":"instance","type":[[["GuildVerificationLevel"]]],"meta":{"line":53,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"vanityURLCode","description":"The vanity invite code of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":62,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nsfwLevel","description":"The NSFW level of this guild","scope":"instance","type":[[["GuildNSFWLevel"]]],"meta":{"line":71,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of boosts for this server","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":80,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The guild's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of features available to this guild","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":44,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":53,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":63,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"partnered","description":"Whether this guild is partnered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verified","description":"Whether this guild is verified","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":98,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"bannerURL","description":"The URL to this guild's banner.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":92,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"splashURL","description":"The URL to this guild's invite splash image.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":102,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","inherits":"BaseGuild#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":108,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","inherits":"BaseGuild#fetch","inherited":true,"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":117,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","inherits":"BaseGuild#toString","inherited":true,"returns":[[[["string"]]]],"meta":{"line":129,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationCommand","description":"Represents an application command.","extends":[[["Base"]]],"props":[{"name":"id","description":"The command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":24,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The parent application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this command is part of","scope":"instance","nullable":true,"type":[[["Guild"]]],"meta":{"line":38,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\nwas fetched from the `ApplicationCommandManager`","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":46,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"permissions","description":"The manager for permissions of this command on its guild or arbitrary guilds when the command is global","scope":"instance","type":[[["ApplicationCommandPermissionsManager"]]],"meta":{"line":53,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of this application command","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":60,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"Whether this command is age-restricted (18+)","scope":"instance","type":[[["boolean"]]],"meta":{"line":67,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this command","scope":"instance","type":[[["string"]]],"meta":{"line":79,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"nameLocalizations","description":"The name localizations for this command","scope":"instance","nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]],"meta":{"line":88,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"nameLocalized","description":"The localized name for this command","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":99,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this command","scope":"instance","type":[[["string"]]],"meta":{"line":110,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"descriptionLocalizations","description":"The description localizations for this command","scope":"instance","nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]],"meta":{"line":119,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"descriptionLocalized","description":"The localized description for this command","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":130,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The options of this command","scope":"instance","type":[[["Array","<"],["ApplicationCommandOption",">"]]],"meta":{"line":141,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"defaultMemberPermissions","description":"The default bitfield used to determine whether this command be used in a guild","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":152,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"integrationTypes","description":"Installation context(s) where the command is available\n<info>Only for globally-scoped commands</info>","scope":"instance","nullable":true,"type":[[["Array","<"],["ApplicationIntegrationType",">"]]],"meta":{"line":166,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"contexts","description":"Interaction context(s) where the command can be used\n<info>Only for globally-scoped commands</info>","scope":"instance","nullable":true,"type":[[["Array","<"],["InteractionContextType",">"]]],"meta":{"line":178,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"handler","description":"Determines whether the interaction is handled by the app's interactions handler or by Discord.\n<info>Only available for {@link ApplicationCommandType.PrimaryEntryPoint} commands on\napplications with the {@link ApplicationFlags.Embedded} flag (i.e, those that have an Activity)</info>","scope":"instance","nullable":true,"type":[[["EntryPointCommandHandlerType"]]],"meta":{"line":191,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"Autoincrementing version identifier updated during substantial record changes","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":202,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the command was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":212,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the command was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":222,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"manager","description":"The manager that this command belongs to","scope":"instance","readonly":true,"type":[[["ApplicationCommandManager"]]],"meta":{"line":232,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this application command.","scope":"instance","examples":["// Edit the description of this command\ncommand.edit({\n  description: 'New description',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the command with","type":[[["Partial","<"],["ApplicationCommandData",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":309,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Edits the name of this ApplicationCommand","scope":"instance","params":[{"name":"name","description":"The new name of the command","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":319,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setNameLocalizations","description":"Edits the localized names of this ApplicationCommand","scope":"instance","examples":["// Edit the name localizations of this command\ncommand.setNameLocalizations({\n  'en-GB': 'test',\n  'pt-BR': 'teste',\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"nameLocalizations","description":"The new localized names for the command","type":[[["Object","<"],["Locale",", "],["string",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":337,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setDescription","description":"Edits the description of this ApplicationCommand","scope":"instance","params":[{"name":"description","description":"The new description of the command","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":347,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setDescriptionLocalizations","description":"Edits the localized descriptions of this ApplicationCommand","scope":"instance","examples":["// Edit the description localizations of this command\ncommand.setDescriptionLocalizations({\n  'en-GB': 'A test command',\n  'pt-BR': 'Um comando de teste',\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"descriptionLocalizations","description":"The new localized descriptions for the command","type":[[["Object","<"],["Locale",", "],["string",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":365,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultMemberPermissions","description":"Edits the default member permissions of this ApplicationCommand","scope":"instance","params":[{"name":"defaultMemberPermissions","description":"The default member permissions required to run this command","nullable":true,"type":[[["PermissionResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":375,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"setOptions","description":"Edits the options of this ApplicationCommand","scope":"instance","params":[{"name":"options","description":"The options to set for this command","type":[[["Array","<"],["ApplicationCommandOptionData",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":385,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this command.","scope":"instance","examples":["// Delete this command\ncommand.delete()\n  .then(console.log)\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["ApplicationCommand",">"]]]],"meta":{"line":399,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this command equals another command. It compares all properties, so for most operations\nit is advisable to just compare `command.id === command2.id` as it is much faster and is often\nwhat most users need.","scope":"instance","params":[{"name":"command","description":"The command to compare with","type":[[["ApplicationCommand"]],[["ApplicationCommandData"]],[["APIApplicationCommand"]]]},{"name":"enforceOptionOrder","description":"Whether to strictly check that options and choices are in the same\norder in the array <info>The client may not always respect this ordering!</info>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":413,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"optionsEqual","description":"Recursively checks that all options for an {@link ApplicationCommand} are equal to the provided options.\nIn most cases it is better to compare using {@link ApplicationCommand#equals}","scope":"static","params":[{"name":"existing","description":"The options on the existing command,\nshould be {@link ApplicationCommand#options}","type":[[["Array","<"],["ApplicationCommandOptionData",">"]]]},{"name":"options","description":"The options to compare against","type":[[["Array","<"],["ApplicationCommandOptionData",">"]],[["Array","<"],["APIApplicationCommandOption",">"]]]},{"name":"enforceOptionOrder","description":"Whether to strictly check that options and choices are in the same\norder in the array <info>The client may not always respect this ordering!</info>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":473,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"_optionEquals","description":"Checks that an option for an {@link ApplicationCommand} is equal to the provided option\nIn most cases it is better to compare using {@link ApplicationCommand#equals}","scope":"static","access":"private","params":[{"name":"existing","description":"The option on the existing command,\nshould be from {@link ApplicationCommand#options}","type":[[["ApplicationCommandOptionData"]]]},{"name":"option","description":"The option to compare against","type":[[["ApplicationCommandOptionData"]],[["APIApplicationCommandOption"]]]},{"name":"enforceOptionOrder","description":"Whether to strictly check that options or choices are in the same\norder in their array <info>The client may not always respect this ordering!</info>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":500,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"transformOption","description":"Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.","scope":"static","access":"private","params":[{"name":"option","description":"The option to transform","type":[[["ApplicationCommandOptionData"]],[["ApplicationCommandOption"]]]},{"name":"received","description":"Whether this option has been received from Discord","optional":true,"type":[[["boolean"]]]}],"returns":[[[["APIApplicationCommandOption"]]]],"meta":{"line":612,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":15,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationEmoji","description":"Represents a custom emoji.","extends":[[["Emoji"]]],"props":[{"name":"application","description":"The application this emoji originates from","scope":"instance","type":[[["ClientApplication"]]],"meta":{"line":19,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"author","description":"The user who created this emoji","scope":"instance","type":[[["User"]]],"meta":{"line":32,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service. Always `false` for application emojis","scope":"instance","type":[[["false"]]],"meta":{"line":41,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"requiresColons","description":"Whether this emoji requires colons surrounding it. Always `true` for application emojis","scope":"instance","type":[[["true"]]],"meta":{"line":50,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether this emoji is available. Always `true` for application emojis","scope":"instance","type":[[["true"]]],"meta":{"line":59,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":136,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"animated","description":"Whether the emoji is animated","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":146,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":166,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":176,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetchAuthor","description":"Fetches the author for this emoji","scope":"instance","async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":68,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the emoji.","scope":"instance","examples":["// Edit an emoji\nemoji.edit({ name: 'newemoji' })\n  .then(emoji => console.log(`Edited emoji ${emoji}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["ApplicationEmojiEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationEmoji",">"]]]],"meta":{"line":90,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","scope":"instance","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ApplicationEmoji",">"]]]],"meta":{"line":100,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the emoji.","scope":"instance","async":true,"returns":[[[["Promise","<"],["ApplicationEmoji",">"]]]],"meta":{"line":109,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","scope":"instance","params":[{"name":"other","description":"The emoji to compare it to","type":[[["ApplicationEmoji"]],[["APIEmoji"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":120,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"imageURL","description":"Returns a URL for the emoji.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"type":[[["EmojiURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":156,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationRoleConnectionMetadata","description":"Role connection metadata object for an application.","props":[{"name":"name","description":"The name of this metadata field","scope":"instance","type":[[["string"]]],"meta":{"line":13,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"nameLocalizations","description":"The name localizations for this metadata field","scope":"instance","nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]],"meta":{"line":20,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this metadata field","scope":"instance","type":[[["string"]]],"meta":{"line":27,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"descriptionLocalizations","description":"The description localizations for this metadata field","scope":"instance","nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]],"meta":{"line":34,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"key","description":"The dictionary key for this metadata field","scope":"instance","type":[[["string"]]],"meta":{"line":41,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of this metadata field","scope":"instance","type":[[["ApplicationRoleConnectionMetadataType"]]],"meta":{"line":48,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":6,"file":"ApplicationRoleConnectionMetadata.js","path":"packages/discord.js/src/structures"}},{"name":"Attachment","description":"Represents an attachment","props":[{"name":"name","description":"The name of this attachment","scope":"instance","type":[[["string"]]],"meta":{"line":24,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The attachment's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"size","description":"The size of this attachment in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":42,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to this attachment","scope":"instance","type":[[["string"]]],"meta":{"line":51,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","scope":"instance","type":[[["string"]]],"meta":{"line":60,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"height","description":"The height of this attachment (if an image or video)","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":69,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"width","description":"The width of this attachment (if an image or video)","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":80,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"contentType","description":"The media (MIME) type of this attachment","see":["{@link https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types}"],"scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":92,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description (alt text) of this attachment","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":103,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether this attachment is ephemeral","scope":"instance","type":[[["boolean"]]],"meta":{"line":113,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"duration","description":"The duration of this attachment in seconds\n<info>This will only be available if the attachment is an audio file.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":122,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"waveform","description":"The base64 encoded byte array representing a sampled waveform\n<info>This will only be available if the attachment is an audio file.</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":134,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags of this attachment","scope":"instance","type":[[["Readonly","<"],["AttachmentFlagsBitField",">"]]],"meta":{"line":145,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"title","description":"The title of this attachment\n<info>This will only be available if the attachment name contains special characters.</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":157,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether or not this attachment has been marked as a spoiler","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":169,"file":"Attachment.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"AttachmentBuilder","description":"Represents an attachment builder","construct":{"name":"AttachmentBuilder","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"data","description":"Extra data","optional":true,"type":[[["AttachmentData"]]]}]},"props":[{"name":"attachment","description":"The file associated with this attachment.","scope":"instance","type":[[["BufferResolvable"]],[["Stream"]]],"meta":{"line":19,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this attachment","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":25,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the attachment","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether or not this attachment has been marked as a spoiler","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":94,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setDescription","description":"Sets the description of this attachment.","scope":"instance","params":[{"name":"description","description":"The description of the file","type":[[["string"]]]}],"returns":[{"types":[[["AttachmentBuilder"]]],"description":"This attachment"}],"meta":{"line":40,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"setFile","description":"Sets the file of this attachment.","scope":"instance","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[{"types":[[["AttachmentBuilder"]]],"description":"This attachment"}],"meta":{"line":51,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets the name of this attachment.","scope":"instance","params":[{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":[{"types":[[["AttachmentBuilder"]]],"description":"This attachment"}],"meta":{"line":62,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"setSpoiler","description":"Sets whether this attachment is a spoiler","scope":"instance","params":[{"name":"spoiler","description":"Whether the attachment should be marked as a spoiler","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["AttachmentBuilder"]]],"description":"This attachment"}],"meta":{"line":73,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"from","description":"Makes a new builder instance from a preexisting attachment structure.","scope":"static","params":[{"name":"other","description":"The builder to construct a new instance from","type":[[["AttachmentBuilder"]],[["Attachment"]],[["AttachmentPayload"]]]}],"returns":[[[["AttachmentBuilder"]]]],"meta":{"line":108,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"AutocompleteInteraction","description":"Represents an autocomplete interaction.","extends":[[["BaseInteraction"]]],"props":[{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":17,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":29,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":36,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":43,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"responded","description":"Whether this interaction has already received a response","scope":"instance","type":[[["boolean"]]],"meta":{"line":57,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The options passed to the command","scope":"instance","type":[[["CommandInteractionOptionResolver"]]],"meta":{"line":64,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":72,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"respond","description":"Sends results for the autocomplete of this interaction.","scope":"instance","examples":["// respond to autocomplete interaction\ninteraction.respond([\n {\n   name: 'Option 1',\n   value: 'option1',\n },\n])\n .then(() => console.log('Successfully responded to the autocomplete interaction'))\n .catch(console.error);"],"params":[{"name":"options","description":"The options for the autocomplete","type":[[["Array","<"],["ApplicationCommandOptionChoiceData",">"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":93,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"AutocompleteInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"AutoModerationActionExecution","description":"Represents the structure of an executed action when an {@link AutoModerationRule} is triggered.","props":[{"name":"guild","description":"The guild where this action was executed from.","scope":"instance","type":[[["Guild"]]],"meta":{"line":15,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"action","description":"The action that was executed.","scope":"instance","type":[[["AutoModerationAction"]]],"meta":{"line":22,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"ruleId","description":"The id of the auto moderation rule this action belongs to.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":29,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"ruleTriggerType","description":"The trigger type of the auto moderation rule which was triggered.","scope":"instance","type":[[["AutoModerationRuleTriggerType"]]],"meta":{"line":36,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"userId","description":"The id of the user that triggered this action.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":43,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel where this action was triggered from.","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"messageId","description":"The id of the message that triggered this action.\n<info>This will not be present if the message was blocked or the content was not part of any message.</info>","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":58,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"alertSystemMessageId","description":"The id of any system auto moderation messages posted as a result of this action.","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":65,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"content","description":"The content that triggered this action.\n<info>This property requires the {@link GatewayIntentBits.MessageContent} privileged gateway intent.</info>","scope":"instance","type":[[["string"]]],"meta":{"line":73,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"matchedKeyword","description":"The word or phrase configured in the rule that triggered this action.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":80,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"matchedContent","description":"The substring in content that triggered this action.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":87,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"autoModerationRule","description":"The auto moderation rule this action belongs to.","scope":"instance","readonly":true,"nullable":true,"type":[[["AutoModerationRule"]]],"meta":{"line":96,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel where this action was triggered from.","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildTextBasedChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":106,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user that triggered this action.","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":116,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The guild member that triggered this action.","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":126,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"AutoModerationActionExecution.js","path":"packages/discord.js/src/structures"}},{"name":"AutoModerationRule","description":"Represents an auto moderation rule.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of this auto moderation rule.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this auto moderation rule is for.","scope":"instance","type":[[["Guild"]]],"meta":{"line":28,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"creatorId","description":"The user that created this auto moderation rule.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":35,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"triggerType","description":"The trigger type of this auto moderation rule.","scope":"instance","type":[[["AutoModerationRuleTriggerType"]]],"meta":{"line":42,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this auto moderation rule.","scope":"instance","type":[[["string"]]],"meta":{"line":54,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"eventType","description":"The event type of this auto moderation rule.","scope":"instance","type":[[["AutoModerationRuleEventType"]]],"meta":{"line":63,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"triggerMetadata","description":"The trigger metadata of the rule.","scope":"instance","type":[[["AutoModerationTriggerMetadata"]]],"meta":{"line":89,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"actions","description":"The actions of this auto moderation rule.","scope":"instance","type":[[["Array","<"],["AutoModerationAction",">"]]],"meta":{"line":122,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"enabled","description":"Whether this auto moderation rule is enabled.","scope":"instance","type":[[["boolean"]]],"meta":{"line":131,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"exemptRoles","description":"The roles exempt by this auto moderation rule.","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":140,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"exemptChannels","description":"The channels exempt by this auto moderation rule.","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["GuildChannel","|"],["ThreadChannel",")>"]]],"meta":{"line":151,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this auto moderation rule.","scope":"instance","params":[{"name":"options","description":"Options for editing this auto moderation rule","type":[[["AutoModerationRuleEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":163,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this auto moderation rule.","scope":"instance","params":[{"name":"reason","description":"The reason for deleting this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":173,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets the name for this auto moderation rule.","scope":"instance","params":[{"name":"name","description":"The name of this auto moderation rule","type":[[["string"]]]},{"name":"reason","description":"The reason for changing the name of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":184,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setEventType","description":"Sets the event type for this auto moderation rule.","scope":"instance","params":[{"name":"eventType","description":"The event type of this auto moderation rule","type":[[["AutoModerationRuleEventType"]]]},{"name":"reason","description":"The reason for changing the event type of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":195,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setKeywordFilter","description":"Sets the keyword filter for this auto moderation rule.","scope":"instance","params":[{"name":"keywordFilter","description":"The keyword filter of this auto moderation rule","type":[[["Array","<"],["string",">"]]]},{"name":"reason","description":"The reason for changing the keyword filter of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":206,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setRegexPatterns","description":"Sets the regular expression patterns for this auto moderation rule.","scope":"instance","params":[{"name":"regexPatterns","description":"The regular expression patterns of this auto moderation rule\n<info>Only Rust-flavored regular expressions are supported.</info>","type":[[["Array","<"],["string",">"]]]},{"name":"reason","description":"The reason for changing the regular expression patterns of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":218,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setPresets","description":"Sets the presets for this auto moderation rule.","scope":"instance","params":[{"name":"presets","description":"The presets of this auto moderation rule","type":[[["Array","<"],["AutoModerationRuleKeywordPresetType",">"]]]},{"name":"reason","description":"The reason for changing the presets of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":229,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setAllowList","description":"Sets the allow list for this auto moderation rule.","scope":"instance","params":[{"name":"allowList","description":"The substrings that will be exempt from triggering\n{@link AutoModerationRuleTriggerType.Keyword},\n{@link AutoModerationRuleTriggerType.KeywordPreset},\nand {@link AutoModerationRuleTriggerType.MemberProfile}","type":[[["Array","<"],["string",">"]]]},{"name":"reason","description":"The reason for changing the allow list of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":243,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setMentionTotalLimit","description":"Sets the mention total limit for this auto moderation rule.","scope":"instance","params":[{"name":"mentionTotalLimit","description":"The total number of unique role and user mentions allowed per message","type":[[["number"]]]},{"name":"reason","description":"The reason for changing the mention total limit of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":254,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setMentionRaidProtectionEnabled","description":"Sets whether to enable mention raid protection for this auto moderation rule.","scope":"instance","params":[{"name":"mentionRaidProtectionEnabled","description":"Whether to enable mention raid protection for this auto moderation rule","type":[[["boolean"]]]},{"name":"reason","description":"The reason for changing the mention raid protection of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":266,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setActions","description":"Sets the actions for this auto moderation rule.","scope":"instance","params":[{"name":"actions","description":"The actions of this auto moderation rule","type":[[["Array","<"],["AutoModerationActionOptions",">"]]]},{"name":"reason","description":"The reason for changing the actions of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":277,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setEnabled","description":"Sets whether this auto moderation rule should be enabled.","scope":"instance","params":[{"name":"enabled","description":"Whether to enable this auto moderation rule","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"The reason for enabling or disabling this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":288,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setExemptRoles","description":"Sets the exempt roles for this auto moderation rule.","scope":"instance","params":[{"name":"exemptRoles","description":"The roles that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"The reason for changing the exempt roles of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":300,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"setExemptChannels","description":"Sets the exempt channels for this auto moderation rule.","scope":"instance","params":[{"name":"exemptChannels","description":"The channels that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["GuildChannel","|"],["ThreadChannel",")>"]],[["Array","<"],["GuildChannelResolvable",">"]]]},{"name":"reason","description":"The reason for changing the exempt channels of this auto moderation rule","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["AutoModerationRule",">"]]]],"meta":{"line":312,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"Base","description":"Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).","abstract":true,"props":[{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"Base.js","path":"packages/discord.js/src/structures"}},{"name":"BaseChannel","description":"Represents any channel on Discord.","extends":[[["Base"]]],"abstract":true,"props":[{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":114,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"BaseGuild","description":"The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.","extends":[[["Base"]]],"abstract":true,"props":[{"name":"id","description":"The guild's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of features available to this guild","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":44,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":53,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":63,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"partnered","description":"Whether this guild is partnered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verified","description":"Whether this guild is verified","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":98,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":108,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":117,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","returns":[[[["string"]]]],"meta":{"line":129,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"BaseGuildEmoji","description":"Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.","extends":[[["Emoji"]]],"abstract":true,"props":[{"name":"guild","description":"The guild this emoji is a part of","scope":"instance","type":[[["Guild"]],[["GuildPreview"]]],"meta":{"line":20,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":38,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether this emoji is available","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":71,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"animated","description":"Whether or not the emoji is animated","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":81,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at.","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":91,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at.","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"imageURL","description":"Returns a URL for the emoji.","scope":"instance","params":[{"name":"options","description":"Options for the emoji URL","optional":true,"default":"{}","type":[[["EmojiURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":61,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"BaseGuildTextChannel","description":"Represents a text-based guild channel on Discord.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"props":[{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildTextThreadManager"]]],"meta":{"line":30,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":37,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of the text channel","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":51,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":64,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":73,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":82,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["TextChannel",">"]]]],"meta":{"line":108,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setType","description":"Sets the type of this channel.\n<info>Only conversion between {@link TextChannel} and {@link AnnouncementChannel} is supported.</info>","scope":"instance","params":[{"name":"type","description":"The new channel type","type":[[["ChannelTypeGuildText"]],[["ChannelTypeGuildAnnouncement"]]]},{"name":"reason","description":"Reason for changing the channel's type","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":120,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":136,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":178,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","params":[{"name":"cache","description":"Whether or not to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":189,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"BaseGuildVoiceChannel","description":"Represents a voice-based guild channel on Discord.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"props":[{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":30,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rtcRegion","description":"The RTC region for this voice-based channel. This region is automatically selected if `null`.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"bitrate","description":"The bitrate of this voice-based channel","scope":"instance","type":[[["number"]]],"meta":{"line":53,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel.","scope":"instance","type":[[["number"]]],"meta":{"line":62,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"videoQualityMode","description":"The camera video quality mode of the channel.","scope":"instance","nullable":true,"type":[[["VideoQualityMode"]]],"meta":{"line":71,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":82,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel in seconds","scope":"instance","type":[[["number"]]],"meta":{"line":95,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The members in this voice-based channel","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":109,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"full","description":"Checks if the voice-based channel is full","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":126,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"joinable","description":"Whether the channel is joinable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":136,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":161,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.","scope":"instance","params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":171,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setBitrate","description":"Sets the bitrate of the channel.","scope":"instance","examples":["// Set the bitrate of a voice channel\nchannel.setBitrate(48_000)\n  .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseGuildVoiceChannel",">"]]]],"meta":{"line":187,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setRTCRegion","description":"Sets the RTC region of the channel.","scope":"instance","examples":["// Set the RTC region to sydney\nchannel.setRTCRegion('sydney');","// Remove a fixed region for this channel - let Discord decide automatically\nchannel.setRTCRegion(null, 'We want to let Discord decide.');"],"params":[{"name":"rtcRegion","description":"The new region of the channel. Set to `null` to remove a specific region for the channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for modifying this region.","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseGuildVoiceChannel",">"]]]],"meta":{"line":204,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","scope":"instance","examples":["// Set the user limit of a voice channel\nchannel.setUserLimit(42)\n  .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseGuildVoiceChannel",">"]]]],"meta":{"line":220,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setVideoQualityMode","description":"Sets the camera video quality mode of the channel.","scope":"instance","params":[{"name":"videoQualityMode","description":"The new camera video quality mode.","type":[[["VideoQualityMode"]]]},{"name":"reason","description":"Reason for changing the camera video quality mode.","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseGuildVoiceChannel",">"]]]],"meta":{"line":231,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":15,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"BaseInteraction","description":"Represents an interaction.","extends":[[["Base"]]],"abstract":true,"props":[{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"BaseSelectMenuComponent","description":"Represents a select menu component","extends":[[["Component"]]],"props":[{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ButtonComponent","description":"Represents a button component","extends":[[["Component"]]],"props":[{"name":"style","description":"The style of this button","scope":"instance","readonly":true,"type":[[["ButtonStyle"]]],"meta":{"line":17,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"label","description":"The label of this button","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji used in this button","scope":"instance","readonly":true,"nullable":true,"type":[[["APIMessageComponentEmoji"]]],"meta":{"line":37,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this button is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this button (only defined on non-link buttons)","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":57,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this button (only defined on link buttons)","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":67,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ButtonComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ButtonInteraction","description":"Represents a button interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ButtonInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"parentId","description":"The id of the parent of this channel.","scope":"instance","type":[[["null"]]],"meta":{"line":12,"file":"CategoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The parent of this channel.","scope":"instance","readonly":true,"type":[[["null"]]],"meta":{"line":19,"file":"CategoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"children","description":"A manager of the channels belonging to this category","scope":"instance","readonly":true,"type":[[["CategoryChannelChildManager"]]],"meta":{"line":45,"file":"CategoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setParent","description":"Sets the category parent of this channel.\n<warn>It is not possible to set the parent of a CategoryChannel.</warn>","scope":"instance","params":[{"name":"channel","description":"The channel to set as parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":27,"file":"CategoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"CategoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ChannelSelectMenuComponent","description":"Represents a channel select menu component","extends":[[["BaseSelectMenuComponent"]]],"props":[{"name":"channelTypes","description":"The options in this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":17,"file":"ChannelSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ChannelSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ChannelSelectMenuInteraction","description":"Represents a {@link ComponentType.ChannelSelect} select menu interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"values","description":"An array of the selected channel ids","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":21,"file":"ChannelSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channels","description":"Collection of the selected channels","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["BaseChannel","|"],["APIChannel",")>"]]],"meta":{"line":28,"file":"ChannelSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"ChannelSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ChatInputCommandInteraction","description":"Represents a command interaction.","extends":[[["CommandInteraction"]]],"props":[{"name":"options","description":"The options passed to the command.","scope":"instance","type":[[["CommandInteractionOptionResolver"]]],"meta":{"line":21,"file":"ChatInputCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toString","description":"Returns a string representation of the command interaction.\nThis can then be copied by a user and executed again in a new command while keeping the option order.","scope":"instance","returns":[[[["string"]]]],"meta":{"line":34,"file":"ChatInputCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","inherits":"CommandInteraction#transformOption","inherited":true,"params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"CommandInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"CommandInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"CommandInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"CommandInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"CommandInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"CommandInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"CommandInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"CommandInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"CommandInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"ChatInputCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ClientApplication","description":"Represents a client application.","extends":[[["Application"]]],"props":[{"name":"commands","description":"The application command manager for this application","scope":"instance","type":[[["ApplicationCommandManager"]]],"meta":{"line":37,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"emojis","description":"The application emoji manager for this application","scope":"instance","type":[[["ApplicationEmojiManager"]]],"meta":{"line":44,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlement manager for this application","scope":"instance","type":[[["EntitlementManager"]]],"meta":{"line":51,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"subscriptions","description":"The subscription manager for this application","scope":"instance","type":[[["SubscriptionManager"]]],"meta":{"line":58,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"tags","description":"The tags this application has (max of 5)","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":69,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"installParams","description":"Settings for this application's default in-app authorization","scope":"instance","nullable":true,"type":[[["ClientApplicationInstallParams"]]],"meta":{"line":77,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"integrationTypesConfig","description":"Default scopes and permissions for each supported installation context.\nThe keys are stringified variants of {@link ApplicationIntegrationType}.","scope":"instance","nullable":true,"type":[[["IntegrationTypesConfiguration"]]],"meta":{"line":118,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"customInstallURL","description":"This application's custom installation URL","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":145,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags this application has","scope":"instance","type":[[["ApplicationFlagsBitField"]]],"meta":{"line":156,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"approximateGuildCount","description":"An approximate amount of guilds this application is in.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":165,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"approximateUserInstallCount","description":"An approximate amount of users that have installed this application.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":176,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"approximateUserAuthorizationCount","description":"An approximate amount of users that have OAuth2 authorizations for this application.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":187,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild associated with this application.","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":198,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"botRequireCodeGrant","description":"If this application's bot requires a code grant when using the OAuth2 flow","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":209,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"bot","description":"The bot associated with this application.","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":220,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"botPublic","description":"If this application's bot is public","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":231,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"interactionsEndpointURL","description":"This application's interaction endpoint URL.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":242,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"roleConnectionsVerificationURL","description":"This application's role connection verification entry point URL","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":253,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"eventWebhooksURL","description":"This application's URL to receive event webhooks","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":264,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"eventWebhooksStatus","description":"This application's event webhooks status","scope":"instance","nullable":true,"type":[[["ApplicationWebhookEventStatus"]]],"meta":{"line":275,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"eventWebhooksTypes","description":"List of event webhooks types this application subscribes to","scope":"instance","nullable":true,"type":[[["Array","<"],["ApplicationWebhookEventType",">"]]],"meta":{"line":286,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"owner","description":"The owner of this OAuth application","scope":"instance","nullable":true,"type":[[["User"]],[["Team"]]],"meta":{"line":296,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild associated with this application.","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":309,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this application is partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":319,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":24,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"name","description":"The name of the application","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"description","description":"The application's description","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"icon","description":"The application's icon hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"termsOfServiceURL","description":"The URL of the application's terms of service","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":65,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"privacyPolicyURL","description":"The URL of the application's privacy policy","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":76,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"rpcOrigins","description":"The application's RPC origins, if enabled","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":87,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"cover","description":"The hash of the application's cover image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"verifyKey","description":"The hex-encoded key for verification in interactions and the GameSDK's GetTicket","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":109,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdTimestamp","description":"The timestamp the application was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":121,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdAt","description":"The time the application was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":131,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this application.","scope":"instance","params":[{"name":"options","description":"The options for editing this application","optional":true,"type":[[["ClientApplicationEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientApplication",">"]]]],"meta":{"line":349,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Obtains this application from Discord.","scope":"instance","async":true,"returns":[[[["Promise","<"],["ClientApplication",">"]]]],"meta":{"line":389,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"fetchRoleConnectionMetadataRecords","description":"Gets this application's role connection metadata records","scope":"instance","async":true,"returns":[[[["Promise","<"],["Array","<"],["ApplicationRoleConnectionMetadata",">>"]]]],"meta":{"line":400,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"editRoleConnectionMetadataRecords","description":"Updates this application's role connection metadata records","scope":"instance","params":[{"name":"records","description":"The new role connection metadata records","type":[[["Array","<"],["ApplicationRoleConnectionMetadataEditOptions",">"]]]}],"async":true,"returns":[[[["Promise","<"],["Array","<"],["ApplicationRoleConnectionMetadata",">>"]]]],"meta":{"line":423,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"fetchSKUs","description":"Gets this application's SKUs","scope":"instance","async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["SKU",">>"]]]],"meta":{"line":443,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"A link to the application's icon.","scope":"instance","inherits":"Application#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":141,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"coverURL","description":"A link to this application's cover image.","scope":"instance","inherits":"Application#coverURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":151,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nApplication object.","scope":"instance","inherits":"Application#toString","inherited":true,"examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":164,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":28,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"ClientPresence","description":"Represents the client's presence.","extends":[[["Presence"]]],"props":[{"name":"userId","description":"The presence's user id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":50,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this presence is in","scope":"instance","nullable":true,"type":[[["Guild"]]],"meta":{"line":57,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user of this presence","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The member of this presence","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":78,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"status","description":"The status of this presence","scope":"instance","type":[[["PresenceStatus"]]],"meta":{"line":89,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"activities","description":"The activities of this presence","scope":"instance","type":[[["Array","<"],["Activity",">"]]],"meta":{"line":100,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","scope":"instance","nullable":true,"type":[[["ClientPresenceStatusData"]]],"meta":{"line":118,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"set","description":"Sets the client's presence","scope":"instance","params":[{"name":"presence","description":"The data to set the presence to","type":[[["PresenceData"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientPresence",">"]]]],"meta":{"line":24,"file":"ClientPresence.js","path":"packages/discord.js/src/structures"}},{"name":"_parse","description":"Parses presence data into a packet ready to be sent to Discord","scope":"instance","access":"private","params":[{"name":"presence","description":"The data to parse","type":[[["PresenceData"]]]}],"returns":[[[["GatewayPresenceUpdateData"]]]],"meta":{"line":47,"file":"ClientPresence.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this presence is equal to another.","scope":"instance","inherits":"Presence#equals","inherited":true,"params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":138,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"ClientPresence.js","path":"packages/discord.js/src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":[[["User"]]],"props":[{"name":"verified","description":"Whether or not this account has been verified","scope":"instance","type":[[["boolean"]]],"meta":{"line":22,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"mfaEnabled","description":"If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":31,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"presence","description":"Represents the client user's presence","scope":"instance","readonly":true,"type":[[["ClientPresence"]]],"meta":{"line":45,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The user's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"username","description":"The username of the user","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"globalName","description":"The global name of this user","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":52,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"discriminator","description":"The discriminator of this user\n<info>`'0'`, or a 4-digit stringified number if they're using the legacy username system</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":75,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatar","description":"The user avatar's hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":86,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The user banner's hash\n<info>The user must be force fetched for this property to be present or be updated</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"accentColor","description":"The base 10 accent color of the user's banner\n<info>The user must be force fetched for this property to be present or be updated</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":110,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":121,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags for this user","scope":"instance","nullable":true,"type":[[["UserFlagsBitField"]]],"meta":{"line":132,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationData","description":"The user avatar decoration's data","scope":"instance","nullable":true,"type":[[["AvatarDecorationData"]]],"meta":{"line":147,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this User is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":162,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":172,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the user was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":182,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":211,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"hexAccentColor","description":"The hexadecimal version of the user accent color, with a leading hash\n<info>The user must be force fetched for this property to be present</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":234,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"tag","description":"The tag of this user\n<info>This user's username, or their legacy tag (e.g. `hydrabolt#0001`)\nif they're using the legacy username system</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":257,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"displayName","description":"The global name of this user, or their username if they don't have one","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":271,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","scope":"instance","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":281,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits the logged in client.","scope":"instance","params":[{"name":"options","description":"The options to provide","type":[[["ClientUserEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientUser",">"]]]],"meta":{"line":64,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setUsername","description":"Sets the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","scope":"instance","examples":["// Set username\nclient.user.setUsername('discordjs')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientUser",">"]]]],"meta":{"line":92,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setAvatar","description":"Sets the avatar of the logged in client.","scope":"instance","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientUser",">"]]]],"meta":{"line":107,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setBanner","description":"Sets the banner of the logged in client.","scope":"instance","examples":["// Set banner\nclient.user.setBanner('./banner.png')\n  .then(user => console.log(`New banner set!`))\n  .catch(console.error);"],"params":[{"name":"banner","description":"The new banner","nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientUser",">"]]]],"meta":{"line":122,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","scope":"instance","examples":["// Set the client user's presence\nclient.user.setPresence({ activities: [{ name: 'with discord.js' }], status: 'idle' });"],"params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientPresence",">"]]]],"meta":{"line":155,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","scope":"instance","examples":["// Set the client user's status\nclient.user.setStatus('idle');"],"params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatusData"]]]},{"name":"shardId","description":"Shard id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientPresence",">"]]]],"meta":{"line":179,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","scope":"instance","examples":["// Set the client user's activity\nclient.user.setActivity('discord.js', { type: ActivityType.Watching });"],"params":[{"name":"name","description":"Activity being played, or options for setting the activity","type":[[["string"]],[["ActivityOptions"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["ActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientPresence",">"]]]],"meta":{"line":204,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","scope":"instance","params":[{"name":"afk","description":"Whether or not the user is AFK","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"shardId","description":"Shard Id(s) to have the AFK flag set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"async":true,"returns":[[[["Promise","<"],["ClientPresence",">"]]]],"meta":{"line":218,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar.","scope":"instance","inherits":"User#avatarURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":192,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationURL","description":"A link to the user's avatar decoration.","scope":"instance","inherits":"User#avatarDecorationURL","inherited":true,"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":201,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","scope":"instance","inherits":"User#displayAvatarURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":223,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"bannerURL","description":"A link to the user's banner. See {@link User#banner} for more info","scope":"instance","inherits":"User#bannerURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":245,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","scope":"instance","inherits":"User#createDM","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":291,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","scope":"instance","inherits":"User#deleteDM","inherited":true,"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":300,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this user.","scope":"instance","inherits":"User#send","inherited":true,"examples":["// Send a direct message\nuser.send('Hello!')\n  .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":315,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if the user is equal to another.\nIt compares id, username, discriminator, avatar, banner, accent color, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","scope":"instance","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":329,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"_equals","description":"Compares the user with an API user object","scope":"instance","access":"private","inherits":"User#_equals","inherited":true,"params":[{"name":"user","description":"The API user object to compare","type":[[["APIUser"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":352,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this user.","scope":"instance","inherits":"User#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":376,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","scope":"instance","inherits":"User#toString","inherited":true,"examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[[["string"]]]],"meta":{"line":388,"file":"User.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"CommandInteraction","description":"Represents a command interaction.","extends":[[["BaseInteraction"]]],"implements":[[["InteractionResponses"]]],"abstract":true,"props":[{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":15,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"CommandInteractionOptionResolver","description":"A resolver for command interaction options.","props":[{"name":"client","description":"The client that instantiated this.","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":11,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"_group","description":"The name of the subcommand group.","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"_subcommand","description":"The name of the subcommand.","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":34,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"_hoistedOptions","description":"The bottom-level options for the interaction.\nIf there is a subcommand (or subcommand and group), this is the options for the subcommand.","scope":"instance","access":"private","type":[[["Array","<"],["CommandInteractionOption",">"]]],"meta":{"line":43,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The interaction options array.","scope":"instance","readonly":true,"type":[[["ReadonlyArray","<"],["CommandInteractionOption",">"]]],"meta":{"line":57,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"resolved","description":"The interaction resolved data","scope":"instance","nullable":true,"type":[[["Readonly","<"],["CommandInteractionResolvedData",">"]]],"meta":{"line":66,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"get","description":"Gets an option by its name.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["CommandInteractionOption"]]],"description":"The option, if found.","nullable":true}],"meta":{"line":82,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"_getTypedOption","description":"Gets an option by name and property and checks its type.","scope":"instance","access":"private","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"allowedTypes","description":"The allowed types of the option.","type":[[["Array","<"],["ApplicationCommandOptionType",">"]]]},{"name":"properties","description":"The properties to check for for `required`.","type":[[["Array","<"],["string",">"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","type":[[["boolean"]]]}],"returns":[{"types":[[["CommandInteractionOption"]]],"description":"The option, if found.","nullable":true}],"meta":{"line":105,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getSubcommand","description":"Gets the selected subcommand.","scope":"instance","params":[{"name":"required","description":"Whether to throw an error if there is no subcommand.","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["string"]]],"description":"The name of the selected subcommand, or null if not set and not required.","nullable":true}],"meta":{"line":124,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getSubcommandGroup","description":"Gets the selected subcommand group.","scope":"instance","params":[{"name":"required","description":"Whether to throw an error if there is no subcommand group.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["string"]]],"description":"The name of the selected subcommand group, or null if not set and not required.","nullable":true}],"meta":{"line":138,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getBoolean","description":"Gets a boolean option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["boolean"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":153,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getChannel","description":"Gets a channel option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"channelTypes","description":"The allowed types of channels. If empty, all channel types are allowed.","optional":true,"default":"[]","type":[[["Array","<"],["ChannelType",">"]]]}],"returns":[{"types":[[["GuildChannel"]],[["ThreadChannel"]],[["APIChannel"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":167,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getString","description":"Gets a string option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["string"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":190,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getInteger","description":"Gets an integer option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["number"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":202,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getNumber","description":"Gets a number option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["number"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":214,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getUser","description":"Gets a user option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["User"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":226,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getMember","description":"Gets a member option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]}],"returns":[{"types":[[["GuildMember"]],[["APIGuildMember"]]],"description":"The value of the option, or null if the user is not present in the guild or the option is not set.","nullable":true}],"meta":{"line":243,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getRole","description":"Gets a role option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["Role"]],[["APIRole"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":260,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getAttachment","description":"Gets an attachment option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["Attachment"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":277,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getMentionable","description":"Gets a mentionable option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["User"]],[["GuildMember"]],[["APIGuildMember"]],[["Role"]],[["APIRole"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":290,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getMessage","description":"Gets a message option.","scope":"instance","params":[{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether to throw an error if the option is not found.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[{"types":[[["Message"]]],"description":"The value of the option, or null if not set and not required.","nullable":true}],"meta":{"line":308,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"getFocused","description":"Gets the focused option.","scope":"instance","returns":[{"types":[[["AutocompleteFocusedOption"]]],"description":"The whole object of the option that is focused"}],"meta":{"line":329,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":9,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"Component","description":"Represents a component","props":[{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"ContainerComponent","description":"Represents a container component","extends":[[["Component"]]],"props":[{"name":"components","description":"The components in this container","scope":"instance","readonly":true,"type":[[["Array","<"],["Component",">"]]],"meta":{"line":21,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"accentColor","description":"The accent color of this container","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":30,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"hexAccentColor","description":"The hex accent color of this container","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether this container is spoilered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":52,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIContainerComponent"]]]],"meta":{"line":61,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"ContainerComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ContextMenuCommandInteraction","description":"Represents a context menu interaction.","extends":[[["CommandInteraction"]]],"props":[{"name":"options","description":"The target of the interaction, parsed into options","scope":"instance","type":[[["CommandInteractionOptionResolver"]]],"meta":{"line":24,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"targetId","description":"The id of the target of this interaction","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":35,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"resolveContextMenuOptions","description":"Resolves and transforms options received from the API for a context menu interaction.","scope":"instance","access":"private","params":[{"name":"data","description":"The interaction data","type":[[["APIApplicationCommandInteractionData"]]]}],"returns":[[[["Array","<"],["CommandInteractionOption",">"]]]],"meta":{"line":45,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","inherits":"CommandInteraction#transformOption","inherited":true,"params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"CommandInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"CommandInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"CommandInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"CommandInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"CommandInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"CommandInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"CommandInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"CommandInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"CommandInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"DirectoryChannel","description":"Represents a channel that displays a directory of guilds.","extends":[[["BaseChannel"]]],"props":[{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["InviteGuild"]]],"meta":{"line":19,"file":"DirectoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":26,"file":"DirectoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The channel's name","scope":"instance","type":[[["string"]]],"meta":{"line":36,"file":"DirectoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"BaseChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":114,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"DirectoryChannel.js","path":"packages/discord.js/src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":[[["BaseChannel"]]],"implements":[[["TextBasedChannel"]]],"props":[{"name":"messages","description":"A manager of the messages belonging to this channel","scope":"instance","type":[[["DMMessageManager"]]],"meta":{"line":28,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"recipientId","description":"The recipient's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":42,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The channel's last message id, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this DMChannel is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":76,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"recipient","description":"The recipient on the other end of the DM","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":86,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetch","description":"Fetch this DMChannel.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":96,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the recipient's mention instead of the\nDMChannel object.","scope":"instance","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":109,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"BaseChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":114,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"DMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"Embed","description":"Represents an embed.","props":[{"name":"data","description":"The API embed data.","scope":"instance","readonly":true,"type":[[["APIEmbed"]]],"meta":{"line":17,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"fields","description":"An array of fields of this embed.","scope":"instance","readonly":true,"type":[[["Array","<"],["APIEmbedField",">"]]],"meta":{"line":26,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"title","description":"The title of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":46,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":56,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"color","description":"The color of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":66,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"timestamp","description":"The timestamp of this embed. This is in an ISO 8601 format.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":76,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["EmbedAssetData"]]],"meta":{"line":94,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"image","description":"The image of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["EmbedAssetData"]]],"meta":{"line":110,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"video","description":"The video of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["EmbedAssetData"]]],"meta":{"line":126,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"author","description":"The author of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["EmbedAuthorData"]]],"meta":{"line":150,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"provider","description":"The provider of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["APIEmbedProvider"]]],"meta":{"line":166,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"footer","description":"The footer of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["EmbedFooterData"]]],"meta":{"line":183,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"length","description":"The accumulated length for the embed title, description, fields, footer text, and author name.","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":198,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"hexColor","description":"The hex color of this embed.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":208,"file":"Embed.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this embed.","scope":"instance","returns":[[[["APIEmbed"]]]],"meta":{"line":219,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether the given embeds are equal.","scope":"instance","params":[{"name":"other","description":"The embed to compare against","type":[[["Embed"]],[["APIEmbed"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"Embed.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":9,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"Emoji","description":"Represents an emoji, see {@link ApplicationEmoji}, {@link GuildEmoji} and {@link ReactionEmoji}.","extends":[[["Base"]]],"props":[{"name":"animated","description":"Whether or not the emoji is animated","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":73,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":83,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"imageURL","description":"Returns a URL for the emoji or `null` if this is not a custom emoji.","scope":"instance","params":[{"name":"options","description":"Options for the emoji URL","optional":true,"default":"{}","type":[[["EmojiURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":54,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"Entitlement","description":"Represents an Entitlement","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the entitlement","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"skuId","description":"The id of the associated SKU","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"userId","description":"The id of the user that is granted access to this entitlement's SKU","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":40,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild that is granted access to this entitlement's SKU","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":49,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The id of the parent application","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":60,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of this entitlement","scope":"instance","type":[[["EntitlementType"]]],"meta":{"line":69,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"deleted","description":"Whether this entitlement was deleted","scope":"instance","type":[[["boolean"]]],"meta":{"line":78,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"startsTimestamp","description":"The timestamp at which this entitlement is valid","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":87,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"endsTimestamp","description":"The timestamp at which this entitlement is no longer valid","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":98,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"consumed","description":"Whether this entitlement has been consumed","scope":"instance","type":[[["boolean"]]],"meta":{"line":109,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild that is granted access to this entitlement's SKU","scope":"instance","nullable":true,"type":[[["Guild"]]],"meta":{"line":120,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"startsAt","description":"The start date at which this entitlement is valid","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":130,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"endsAt","description":"The end date at which this entitlement is no longer valid","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":139,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"isActive","description":"Indicates whether this entitlement is active","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":148,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"isTest","description":"Indicates whether this entitlement is a test entitlement","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":157,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSubscription","description":"Indicates whether this entitlement is a user subscription","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":166,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"isGuildSubscription","description":"Indicates whether this entitlement is a guild subscription","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":175,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"fetchUser","description":"Fetches the user that is granted access to this entitlement's SKU","scope":"instance","async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":184,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"consume","description":"Marks this entitlement as consumed\n<info>Only available for One-Time Purchase consumable SKUs.</info>","scope":"instance","async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":194,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"Entitlement.js","path":"packages/discord.js/src/structures"}},{"name":"FileComponent","description":"Represents a file component","extends":[[["Component"]]],"props":[{"name":"file","description":"The media associated with this file","scope":"instance","readonly":true,"type":[[["UnfurledMediaItem"]]],"meta":{"line":21,"file":"FileComponent.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether this thumbnail is spoilered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":30,"file":"FileComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIFileComponent"]]]],"meta":{"line":39,"file":"FileComponent.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"FileComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ForumChannel","description":"Represents a forum channel.","extends":[[["ThreadOnlyChannel"]]],"props":[{"name":"defaultForumLayout","description":"The default layout type used to display posts","scope":"instance","type":[[["ForumLayoutType"]]],"meta":{"line":19,"file":"ForumChannel.js","path":"packages/discord.js/src/structures"}},{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildForumThreadManager"]]],"meta":{"line":54,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"availableTags","description":"The set of tags that can be used in this channel.","scope":"instance","type":[[["Array","<"],["GuildForumTag",">"]]],"meta":{"line":67,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultReactionEmoji","description":"The emoji to show in the add reaction button on a thread in a guild forum channel","scope":"instance","nullable":true,"type":[[["DefaultReactionEmoji"]]],"meta":{"line":78,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":102,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel.","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":113,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If this channel is considered NSFW.","scope":"instance","type":[[["boolean"]]],"meta":{"line":124,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of this channel.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":135,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultSortOrder","description":"The default sort order mode used to order posts","scope":"instance","nullable":true,"type":[[["SortOrderType"]]],"meta":{"line":144,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setDefaultForumLayout","description":"Sets the default forum layout type used to display posts","scope":"instance","params":[{"name":"defaultForumLayout","description":"The default forum layout type to set on this channel","type":[[["ForumLayoutType"]]]},{"name":"reason","description":"Reason for changing the default forum layout","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ForumChannel",">"]]]],"meta":{"line":29,"file":"ForumChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setAvailableTags","description":"Sets the available tags for this forum channel","scope":"instance","inherits":"ThreadOnlyChannel#setAvailableTags","inherited":true,"params":[{"name":"availableTags","description":"The tags to set as available in this channel","type":[[["Array","<"],["GuildForumTagData",">"]]]},{"name":"reason","description":"Reason for changing the available tags","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":157,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultReactionEmoji","description":"Sets the default reaction emoji for this channel","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultReactionEmoji","inherited":true,"params":[{"name":"defaultReactionEmoji","description":"The emoji to set as the default reaction emoji","nullable":true,"type":[[["DefaultReactionEmoji"]]]},{"name":"reason","description":"Reason for changing the default reaction emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":168,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultThreadRateLimitPerUser","description":"Sets the default rate limit per user (slowmode) for new threads in this channel","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultThreadRateLimitPerUser","inherited":true,"params":[{"name":"defaultThreadRateLimitPerUser","description":"The rate limit to set on newly created threads in this channel","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the default rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":179,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"ThreadOnlyChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":194,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","inherits":"ThreadOnlyChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":205,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultAutoArchiveDuration","inherited":true,"params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":216,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","inherits":"ThreadOnlyChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":232,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultSortOrder","description":"Sets the default sort order mode used to order posts","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultSortOrder","inherited":true,"params":[{"name":"defaultSortOrder","description":"The default sort order mode to set on this channel","nullable":true,"type":[[["SortOrderType"]]]},{"name":"reason","description":"Reason for changing the default sort order","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":243,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"ThreadOnlyChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"ThreadOnlyChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","inherits":"ThreadOnlyChannel#setRateLimitPerUser","inherited":true,"implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"ThreadOnlyChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ForumChannel.js","path":"packages/discord.js/src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with {@link Guild#available}.</info>","extends":[[["AnonymousGuild"]]],"props":[{"name":"commands","description":"A manager of the application commands belonging to this guild","scope":"instance","type":[[["GuildApplicationCommandManager"]]],"meta":{"line":51,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A manager of the members belonging to this guild","scope":"instance","type":[[["GuildMemberManager"]]],"meta":{"line":58,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"channels","description":"A manager of the channels belonging to this guild","scope":"instance","type":[[["GuildChannelManager"]]],"meta":{"line":65,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"bans","description":"A manager of the bans belonging to this guild","scope":"instance","type":[[["GuildBanManager"]]],"meta":{"line":72,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"A manager of the roles belonging to this guild","scope":"instance","type":[[["RoleManager"]]],"meta":{"line":79,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"presences","description":"A manager of the presences belonging to this guild","scope":"instance","type":[[["PresenceManager"]]],"meta":{"line":86,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"voiceStates","description":"A manager of the voice states of this guild","scope":"instance","type":[[["VoiceStateManager"]]],"meta":{"line":93,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"stageInstances","description":"A manager of the stage instances of this guild","scope":"instance","type":[[["StageInstanceManager"]]],"meta":{"line":100,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"invites","description":"A manager of the invites of this guild","scope":"instance","type":[[["GuildInviteManager"]]],"meta":{"line":107,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"scheduledEvents","description":"A manager of the scheduled events of this guild","scope":"instance","type":[[["GuildScheduledEventManager"]]],"meta":{"line":114,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"autoModerationRules","description":"A manager of the auto moderation rules of this guild.","scope":"instance","type":[[["AutoModerationRuleManager"]]],"meta":{"line":121,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"soundboardSounds","description":"A manager of the soundboard sounds of this guild.","scope":"instance","type":[[["GuildSoundboardSoundManager"]]],"meta":{"line":128,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","scope":"instance","type":[[["boolean"]]],"meta":{"line":137,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"shardId","description":"The id of the shard this Guild belongs to.","scope":"instance","type":[[["number"]]],"meta":{"line":148,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"discoverySplash","description":"The hash of the guild discovery splash image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":168,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild","scope":"instance","type":[[["number"]]],"meta":{"line":177,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than {@link WebSocketOptions large_threshold} members, 50 by default)","scope":"instance","type":[[["boolean"]]],"meta":{"line":186,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"premiumProgressBarEnabled","description":"Whether this guild has its premium (boost) progress bar enabled","scope":"instance","type":[[["boolean"]]],"meta":{"line":195,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The id of the application that created this guild (if applicable)","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":204,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":213,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"afkChannelId","description":"The id of the voice channel where AFK members are moved","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":222,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"systemChannelId","description":"The system channel's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":231,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"premiumTier","description":"The premium tier of this guild","scope":"instance","type":[[["GuildPremiumTier"]]],"meta":{"line":240,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"widgetEnabled","description":"Whether widget images are enabled on this guild","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":249,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"widgetChannelId","description":"The widget channel's id, if enabled","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":260,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","scope":"instance","type":[[["GuildExplicitContentFilter"]]],"meta":{"line":271,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"mfaLevel","description":"The required MFA level for this guild","scope":"instance","type":[[["GuildMFALevel"]]],"meta":{"line":280,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","scope":"instance","type":[[["number"]]],"meta":{"line":289,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"defaultMessageNotifications","description":"The default message notification level of the guild","scope":"instance","type":[[["GuildDefaultMessageNotifications"]]],"meta":{"line":298,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"systemChannelFlags","description":"The value set for the guild's system channel flags","scope":"instance","type":[[["Readonly","<"],["SystemChannelFlagsBitField",">"]]],"meta":{"line":307,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"maximumMembers","description":"The maximum amount of members the guild can have","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":316,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"maximumPresences","description":"The maximum amount of presences the guild can have (this is `null` for all but the largest of guilds)\n<info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\nthis parameter</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":329,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"maxVideoChannelUsers","description":"The maximum amount of users allowed in a video channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":340,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"maxStageVideoChannelUsers","description":"The maximum amount of users allowed in a stage video channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":351,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"approximateMemberCount","description":"The approximate amount of members the guild has\n<info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\nthis parameter</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":364,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"approximatePresenceCount","description":"The approximate amount of presences the guild has\n<info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\nthis parameter</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":377,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"vanityURLUses","description":"The use count of the vanity URL code of the guild, if any\n<info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":388,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"rulesChannelId","description":"The rules channel's id for the guild","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":396,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"publicUpdatesChannelId","description":"The community updates channel's id for the guild","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":405,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"preferredLocale","description":"The preferred locale of the guild, defaults to `en-US`","scope":"instance","type":[[["Locale"]]],"meta":{"line":414,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"safetyAlertsChannelId","description":"The safety alerts channel's id for the guild","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":423,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"ownerId","description":"The user id of this guild's owner","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":457,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"emojis","description":"A manager of the emojis belonging to this guild","scope":"instance","type":[[["GuildEmojiManager"]]],"meta":{"line":493,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"stickers","description":"A manager of the stickers belonging to this guild","scope":"instance","type":[[["GuildStickerManager"]]],"meta":{"line":508,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"incidentsData","description":"The incidents data of this guild.\n<info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\nthis property.</info>","scope":"instance","nullable":true,"type":[[["IncidentActions"]]],"meta":{"line":535,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":554,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":589,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"systemChannel","description":"System channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":599,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"widgetChannel","description":"Widget channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]],[["AnnouncementChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":609,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"rulesChannel","description":"Rules channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":619,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"publicUpdatesChannel","description":"Public updates channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":629,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"safetyAlertsChannel","description":"Safety alerts channel for this guild","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":639,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"maximumBitrate","description":"The maximum bitrate available for this guild","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":649,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"voiceAdapterCreator","description":"The voice state adapter for this guild that can be used with `@discordjs/voice` to play audio in voice\nand stage channels.","scope":"instance","readonly":true,"type":[[["function"]]],"meta":{"line":1563,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"splash","description":"The hash of the guild invite splash image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The hash of the guild banner","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","scope":"instance","type":[[["GuildVerificationLevel"]]],"meta":{"line":53,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"vanityURLCode","description":"The vanity invite code of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":62,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nsfwLevel","description":"The NSFW level of this guild","scope":"instance","type":[[["GuildNSFWLevel"]]],"meta":{"line":71,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of boosts for this server","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":80,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The guild's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of features available to this guild","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":44,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":53,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":63,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"partnered","description":"Whether this guild is partnered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verified","description":"Whether this guild is verified","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":98,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"discoverySplashURL","description":"The URL to this guild's discovery splash image.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":564,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchOwner","description":"Fetches the owner of the guild.\nIf the member object isn't needed, use {@link Guild#ownerId} instead.","scope":"instance","params":[{"name":"options","description":"The options for fetching the member","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":575,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchIntegrations","description":"Fetches a collection of integrations to this guild.\nResolves with a collection mapping integrations by their ids.","scope":"instance","examples":["// Fetch integrations\nguild.fetchIntegrations()\n  .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<("],["Snowflake","|"],["string","), "],["Integration",">>"]]]],"meta":{"line":677,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchTemplates","description":"Fetches a collection of templates from this guild.\nResolves with a collection mapping templates by their codes.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["GuildTemplate",">>"]]]],"meta":{"line":691,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWelcomeScreen","description":"Fetches the welcome screen for this guild.","scope":"instance","async":true,"returns":[[[["Promise","<"],["WelcomeScreen",">"]]]],"meta":{"line":701,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"createTemplate","description":"Creates a template for the guild.","scope":"instance","params":[{"name":"name","description":"The name for the template","type":[[["string"]]]},{"name":"description","description":"The description for the template","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildTemplate",">"]]]],"meta":{"line":713,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchPreview","description":"Obtains a guild preview for this guild from Discord.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildPreview",">"]]]],"meta":{"line":723,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchVanityData","description":"Fetches the vanity URL invite object to this guild.\nResolves with an object containing the vanity URL invite code and the use count","scope":"instance","examples":["// Fetch invite data\nguild.fetchVanityData()\n  .then(res => {\n    console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n  })\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Vanity",">"]]]],"meta":{"line":749,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the guild.","scope":"instance","examples":["// Fetch webhooks\nguild.fetchWebhooks()\n  .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":767,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWidget","description":"Fetches the guild widget data, requires the widget to be enabled.","scope":"instance","examples":["// Fetches the guild widget data\nguild.fetchWidget()\n  .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Widget",">"]]]],"meta":{"line":784,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWidgetSettings","description":"Fetches the guild widget settings.","scope":"instance","examples":["// Fetches the guild widget settings\nguild.fetchWidgetSettings()\n  .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["GuildWidgetSettings",">"]]]],"meta":{"line":816,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"widgetImageURL","description":"Returns a URL for the PNG widget of the guild.","scope":"instance","params":[{"name":"style","description":"The style for the widget image","optional":true,"type":[[["GuildWidgetStyle"]]]}],"returns":[[[["string"]]]],"meta":{"line":832,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchAuditLogs","description":"Fetches audit logs for this guild.","scope":"instance","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries.first()))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["GuildAuditLogsFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildAuditLogs",">"]]]],"meta":{"line":858,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"fetchOnboarding","description":"Fetches the guild onboarding data for this guild.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildOnboarding",">"]]]],"meta":{"line":881,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","scope":"instance","examples":["// Set the guild name\nguild.edit({\n  name: 'Discord Guild',\n})\n  .then(updated => console.log(`New guild name ${updated}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":943,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"editOnboarding","description":"Edits the guild onboarding data for this guild.","scope":"instance","params":[{"name":"options","description":"The options to provide","type":[[["GuildOnboardingEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildOnboarding",">"]]]],"meta":{"line":1038,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"editWelcomeScreen","description":"Updates the guild's welcome screen","scope":"instance","examples":["guild.editWelcomeScreen({\n  description: 'Hello World',\n  enabled: true,\n  welcomeChannels: [\n    {\n      description: 'foobar',\n      channel: '222197033908436994',\n    }\n  ],\n})"],"params":[{"name":"options","description":"The options to provide","type":[[["WelcomeScreenEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["WelcomeScreen",">"]]]],"meta":{"line":1128,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setExplicitContentFilter","description":"Edits the level of the explicit content filter.","scope":"instance","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","nullable":true,"type":[[["GuildExplicitContentFilter"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1157,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultMessageNotifications","description":"Edits the setting of the default message notifications of the guild.","scope":"instance","params":[{"name":"defaultMessageNotifications","description":"The new default message notification level of the guild","nullable":true,"type":[[["GuildDefaultMessageNotifications"]]]},{"name":"reason","description":"Reason for changing the setting of the default message notifications","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1169,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setSystemChannelFlags","description":"Edits the flags of the default message notifications of the guild.","scope":"instance","params":[{"name":"systemChannelFlags","description":"The new flags for the default message notifications","type":[[["SystemChannelFlagsResolvable"]]]},{"name":"reason","description":"Reason for changing the flags of the default message notifications","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1180,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Edits the name of the guild.","scope":"instance","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(updated => console.log(`Updated guild name to ${updated.name}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1196,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setVerificationLevel","description":"Edits the verification level of the guild.","scope":"instance","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","nullable":true,"type":[[["GuildVerificationLevel"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1212,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setAFKChannel","description":"Edits the AFK channel of the guild.","scope":"instance","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","nullable":true,"type":[[["VoiceChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1228,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setSystemChannel","description":"Edits the system channel of the guild.","scope":"instance","examples":["// Edit the guild system channel\nguild.setSystemChannel(channel)\n .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n .catch(console.error);"],"params":[{"name":"systemChannel","description":"The new system channel","nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1244,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setAFKTimeout","description":"Edits the AFK timeout of the guild.","scope":"instance","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1260,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setIcon","description":"Sets a new guild icon.","scope":"instance","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(updated => console.log('Updated the guild icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","nullable":true,"type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1276,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","scope":"instance","examples":["// Edit the guild owner\nguild.setOwner(guild.members.cache.first())\n .then(guild => guild.fetchOwner())\n .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1293,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setSplash","description":"Sets a new guild invite splash image.","scope":"instance","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(updated => console.log('Updated the guild splash'))\n .catch(console.error);"],"params":[{"name":"splash","description":"The new invite splash image of the guild","nullable":true,"type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's invite splash image","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1309,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setDiscoverySplash","description":"Sets a new guild discovery splash image.","scope":"instance","examples":["// Edit the guild discovery splash\nguild.setDiscoverySplash('./discoverysplash.png')\n  .then(updated => console.log('Updated the guild discovery splash'))\n  .catch(console.error);"],"params":[{"name":"discoverySplash","description":"The new discovery splash image of the guild","nullable":true,"type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's discovery splash image","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1325,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setBanner","description":"Sets a new guild banner.","scope":"instance","examples":["guild.setBanner('./banner.png')\n .then(updated => console.log('Updated the guild banner'))\n .catch(console.error);"],"params":[{"name":"banner","description":"The new banner of the guild","nullable":true,"type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's banner","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1340,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setRulesChannel","description":"Edits the rules channel of the guild.","scope":"instance","examples":["// Edit the guild rules channel\nguild.setRulesChannel(channel)\n .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n .catch(console.error);"],"params":[{"name":"rulesChannel","description":"The new rules channel","nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's rules channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1356,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setPublicUpdatesChannel","description":"Edits the community updates channel of the guild.","scope":"instance","examples":["// Edit the guild community updates channel\nguild.setPublicUpdatesChannel(channel)\n .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n .catch(console.error);"],"params":[{"name":"publicUpdatesChannel","description":"The new community updates channel","nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's community updates channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1372,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setPreferredLocale","description":"Edits the preferred locale of the guild.","scope":"instance","examples":["// Edit the guild preferred locale\nguild.setPreferredLocale('en-US')\n .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n .catch(console.error);"],"params":[{"name":"preferredLocale","description":"The new preferred locale of the guild","nullable":true,"type":[[["Locale"]]]},{"name":"reason","description":"Reason for changing the guild's preferred locale","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1388,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setPremiumProgressBarEnabled","description":"Edits the enabled state of the guild's premium progress bar","scope":"instance","params":[{"name":"enabled","description":"The new enabled state of the guild's premium progress bar","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the state of the guild's premium progress bar","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1399,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setSafetyAlertsChannel","description":"Edits the safety alerts channel of the guild.","scope":"instance","examples":["// Edit the guild safety alerts channel\nguild.setSafetyAlertsChannel(channel)\n .then(updated => console.log(`Updated guild safety alerts channel to ${updated.safetyAlertsChannel.name}`))\n .catch(console.error);"],"params":[{"name":"safetyAlertsChannel","description":"The new safety alerts channel","nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's safety alerts channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1415,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setWidgetSettings","description":"Edits the guild's widget settings.","scope":"instance","params":[{"name":"settings","description":"The widget settings for the guild","type":[[["GuildWidgetSettingsData"]]]},{"name":"reason","description":"Reason for changing the guild's widget settings","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1426,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setMFALevel","description":"Sets the guild's MFA level\n<info>An elevated MFA level requires guild moderators to have 2FA enabled.</info>","scope":"instance","examples":["// Set the MFA level of the guild to Elevated\nguild.setMFALevel(GuildMFALevel.Elevated)\n  .then(guild => console.log(\"Set guild's MFA level to Elevated\"))\n  .catch(console.error);"],"params":[{"name":"level","description":"The MFA level","type":[[["GuildMFALevel"]]]},{"name":"reason","description":"Reason for changing the guild's MFA level","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1450,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"leave","description":"Leaves the guild.","scope":"instance","examples":["// Leave a guild\nguild.leave()\n  .then(guild => console.log(`Left the guild: ${guild.name}`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1470,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the guild.","scope":"instance","examples":["// Delete a guild\nguild.delete()\n  .then(guild => console.log(`Deleted the guild ${guild}`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1486,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"disableInvites","description":"Sets whether this guild's invites are disabled.","scope":"instance","params":[{"name":"disabled","description":"Whether the invites are disabled","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":1497,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"setIncidentActions","description":"Sets the incident actions for a guild.","scope":"instance","params":[{"name":"incidentActions","description":"The incident actions to set","type":[[["IncidentActionsEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["IncidentActions",">"]]]],"meta":{"line":1509,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","scope":"instance","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":1521,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"_sortedRoles","description":"Creates a collection of this guild's roles, sorted by their position and ids.","scope":"instance","access":"private","returns":[[[["Collection","<"],["Snowflake",", "],["Role",">"]]]],"meta":{"line":1584,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"_sortedChannels","description":"Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.","scope":"instance","access":"private","params":[{"name":"channel","description":"Category to get the channels of","optional":true,"type":[[["GuildChannel"]]]}],"returns":[[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]]],"meta":{"line":1595,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"bannerURL","description":"The URL to this guild's banner.","scope":"instance","inherits":"AnonymousGuild#bannerURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":92,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"splashURL","description":"The URL to this guild's invite splash image.","scope":"instance","inherits":"AnonymousGuild#splashURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":102,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","inherits":"BaseGuild#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":108,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","inherits":"BaseGuild#fetch","inherited":true,"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":117,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","inherits":"BaseGuild#toString","inherited":true,"returns":[[[["string"]]]],"meta":{"line":129,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":42,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","scope":"instance","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":23,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"integrations","description":"Cached integrations","scope":"instance","access":"private","type":[[["Collection","<("],["Snowflake","|"],["string","), "],["Integration",">"]]],"meta":{"line":36,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"guildScheduledEvents","description":"Cached {@link GuildScheduledEvent}s.","scope":"instance","access":"private","type":[[["Collection","<"],["Snowflake",", "],["GuildScheduledEvent",">"]]],"meta":{"line":49,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"applicationCommands","description":"Cached application commands, includes application commands from other applications","scope":"instance","access":"private","type":[[["Collection","<"],["Snowflake",", "],["ApplicationCommand",">"]]],"meta":{"line":61,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"autoModerationRules","description":"Cached auto moderation rules.","scope":"instance","access":"private","type":[[["Collection","<"],["Snowflake",", "],["AutoModerationRule",">"]]],"meta":{"line":74,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":85,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"GuildAuditLogs.js","path":"packages/discord.js/src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","scope":"instance","type":[[["AuditLogTargetType"]]],"meta":{"line":129,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"actionType","description":"The action type of this entry","scope":"instance","type":[[["AuditLogActionType"]]],"meta":{"line":137,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"action","description":"The type of action that occurred.","scope":"instance","type":[[["AuditLogEvent"]]],"meta":{"line":144,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"reason","description":"The reason of this entry","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":151,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"executorId","description":"The id of the user that executed this entry","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":158,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"executor","description":"The user that executed this entry","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":165,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"changes","description":"Specific property changes","scope":"instance","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":187,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The entry's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":199,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"extra","description":"Any extra data from the entry","scope":"instance","nullable":true,"type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":206,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"targetId","description":"The id of the target of this entry","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":307,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"target","description":"The target of this entry","scope":"instance","nullable":true,"type":[[["AuditLogEntryTarget"]]],"meta":{"line":314,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":523,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this entry was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":533,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["Object","<"],["string",", "],["string",">"]]],"meta":{"line":121,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"isAction","description":"Checks whether this GuildAuditLogsEntry is of the specified {@link AuditLogEvent} type.","scope":"instance","params":[{"name":"action","description":"The type to check for","type":[[["AuditLogEvent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":543,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"targetType","description":"Finds the target type of a guild audit log entry.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["AuditLogEvent"]]]}],"returns":[[[["AuditLogTargetType"]]]],"meta":{"line":404,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"actionType","description":"Finds the action type from the guild audit log entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogEvent"]]]}],"returns":[[[["AuditLogActionType"]]]],"meta":{"line":432,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":114,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"GuildBan","description":"Represents a ban in a guild on Discord.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild in which the ban is","scope":"instance","type":[[["Guild"]]],"meta":{"line":19,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user this ban applies to","scope":"instance","type":[[["User"]]],"meta":{"line":31,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}},{"name":"reason","description":"The reason for the ban","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this GuildBan is partial. If the reason is not provided the value is null","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetch","description":"Fetches this GuildBan.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildBan",">"]]]],"meta":{"line":60,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"GuildBan.js","path":"packages/discord.js/src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel from any of the following:\n- {@link TextChannel}\n- {@link VoiceChannel}\n- {@link CategoryChannel}\n- {@link AnnouncementChannel}\n- {@link StageChannel}\n- {@link ForumChannel}\n- {@link MediaChannel}","extends":[[["BaseChannel"]]],"abstract":true,"props":[{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":25,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildEmoji","description":"Represents a custom emoji.","extends":[[["BaseGuildEmoji"]]],"props":[{"name":"author","description":"The user who created this emoji","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":22,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"_roles","description":"Array of role ids this emoji is active for","scope":"instance","access":"private","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":24,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this emoji is part of","scope":"instance","type":[[["Guild"]]],"meta":{"line":36,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the emoji is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":62,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"A manager for roles this emoji is active for.","scope":"instance","readonly":true,"type":[[["GuildEmojiRoleManager"]]],"meta":{"line":73,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":38,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether this emoji is available","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":71,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"animated","description":"Whether or not the emoji is animated","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":81,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at.","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":91,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at.","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetchAuthor","description":"Fetches the author for this emoji","scope":"instance","async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":82,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the emoji.","scope":"instance","examples":["// Edit an emoji\nemoji.edit({ name: 'newemoji' })\n  .then(emoji => console.log(`Edited emoji ${emoji}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildEmojiEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":106,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","scope":"instance","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":117,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the emoji.","scope":"instance","params":[{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildEmoji",">"]]]],"meta":{"line":127,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","scope":"instance","params":[{"name":"other","description":"The emoji to compare it to","type":[[["GuildEmoji"]],[["APIEmoji"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":138,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"imageURL","description":"Returns a URL for the emoji.","scope":"instance","inherits":"BaseGuildEmoji#imageURL","inherited":true,"params":[{"name":"options","description":"Options for the emoji URL","optional":true,"default":"{}","type":[[["EmojiURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":61,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild that this member is part of","scope":"instance","type":[[["Guild"]]],"meta":{"line":25,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":32,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"premiumSinceTimestamp","description":"The last timestamp this member started boosting the guild","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":39,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"nickname","description":"The nickname of this member, if they have one","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":46,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"pending","description":"Whether this member has yet to pass the guild's membership gate","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":53,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"communicationDisabledUntilTimestamp","description":"The timestamp this member's timeout will be removed","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":60,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"_roles","description":"The role ids of the member","scope":"instance","access":"private","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":62,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user that this guild member instance represents","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":81,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"avatar","description":"The guild member's avatar hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The guild member's banner hash.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":102,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags of this member","scope":"instance","type":[[["Readonly","<"],["GuildMemberFlagsBitField",">"]]],"meta":{"line":132,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationData","description":"The member avatar decoration's data","scope":"instance","nullable":true,"type":[[["AvatarDecorationData"]]],"meta":{"line":143,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this GuildMember is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":164,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"A manager for the roles belonging to this member","scope":"instance","readonly":true,"type":[[["GuildMemberRoleManager"]]],"meta":{"line":174,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"voice","description":"The voice state of this member","scope":"instance","readonly":true,"type":[[["VoiceState"]]],"meta":{"line":184,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"joinedAt","description":"The time this member joined the guild","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":255,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"communicationDisabledUntil","description":"The time this member's timeout will be removed","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":265,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"premiumSince","description":"The last time this member started boosting the guild","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":275,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"presence","description":"The presence of this guild member","scope":"instance","readonly":true,"nullable":true,"type":[[["Presence"]]],"meta":{"line":285,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayColor","description":"The displayed role color of this member in base 10","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":295,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayHexColor","description":"The displayed role color of this member in hexadecimal","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":305,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The member's id","scope":"instance","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":315,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this member","scope":"instance","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":325,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayName","description":"The nickname of this member, or their user display name if they don't have one","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":335,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"permissions","description":"The overall set of permissions for this member, taking only roles and owner status into account","scope":"instance","readonly":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":345,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\nThis is a prerequisite for many moderative actions.","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":357,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"kickable","description":"Whether this member is kickable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":371,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"bannable","description":"Whether this member is bannable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":382,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"moderatable","description":"Whether this member is moderatable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":393,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the member's guild avatar.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":194,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationURL","description":"A link to the member's avatar decoration.","scope":"instance","returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":203,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"bannerURL","description":"A link to the member's banner.","scope":"instance","params":[{"name":"options","description":"Options for the banner URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":213,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayAvatarURL","description":"A link to the member's guild avatar if they have one.\nOtherwise, a link to their {@link User#displayAvatarURL} will be returned.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":224,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayBannerURL","description":"A link to the member's guild banner if they have one.\nOtherwise, a link to their {@link User#bannerURL} will be returned.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":235,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"displayAvatarDecorationURL","description":"A link to the member's guild avatar decoration if they have one.\nOtherwise, a link to their {@link User#avatarDecorationURL} will be returned.","scope":"instance","returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":245,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"isCommunicationDisabled","description":"Whether this member is currently timed out","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":406,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\ntaking into account roles and permission overwrites.","scope":"instance","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["GuildChannelResolvable"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":417,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this member.","scope":"instance","params":[{"name":"options","description":"The options to provide","type":[[["GuildMemberEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":429,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"setFlags","description":"Sets the flags for this member.","scope":"instance","params":[{"name":"flags","description":"The flags to set","type":[[["GuildMemberFlagsResolvable"]]]},{"name":"reason","description":"Reason for setting the flags","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":440,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"setNickname","description":"Sets the nickname for this member.","scope":"instance","examples":["// Set a nickname for a guild member\nguildMember.setNickname('cool nickname', 'Needed a new nickname')\n  .then(member => console.log(`Set nickname of ${member.user.username}`))\n  .catch(console.error);","// Remove a nickname for a guild member\nguildMember.setNickname(null, 'No nicknames allowed!')\n  .then(member => console.log(`Removed nickname for ${member.user.username}`))\n  .catch(console.error);"],"params":[{"name":"nick","description":"The nickname for the guild member, or `null` if you want to reset their nickname","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":461,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and this member.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":471,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this member.","scope":"instance","async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":480,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"kick","description":"Kicks this member from the guild.","scope":"instance","params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":490,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"ban","description":"Bans this guild member.","scope":"instance","examples":["// Ban a guild member, deleting a week's worth of messages\nawait guildMember.ban({ deleteMessageSeconds: 60 * 60 * 24 * 7, reason: 'They deserved it' });"],"params":[{"name":"options","description":"Options for the ban","optional":true,"type":[[["BanOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":503,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"disableCommunicationUntil","description":"Times this guild member out.","scope":"instance","examples":["// Time a guild member out for 5 minutes\nguildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n  .then(console.log)\n  .catch(console.error);","// Remove the timeout of a guild member\nguildMember.disableCommunicationUntil(null)\n  .then(member => console.log(`Removed timeout for ${member.displayName}`))\n  .catch(console.error);"],"params":[{"name":"communicationDisabledUntil","description":"The date or timestamp\nfor the member's communication to be disabled until. Provide `null` to remove the timeout.","nullable":true,"type":[[["DateResolvable"]]]},{"name":"reason","description":"The reason for this timeout.","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":525,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"timeout","description":"Times this guild member out.","scope":"instance","examples":["// Time a guild member out for 5 minutes\nguildMember.timeout(5 * 60 * 1000, 'They deserved it')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"timeout","description":"The duration in milliseconds\nfor the member's communication to be disabled. Provide `null` to remove the timeout.","nullable":true,"type":[[["number"]]]},{"name":"reason","description":"The reason for this timeout.","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":542,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this GuildMember.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":552,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this user.","scope":"instance","examples":["// Send a direct message\nguildMember.send('Hello!')\n  .then(message => console.log(`Sent message: ${message.content} to ${guildMember.displayName}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":567,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this guild member equals another guild member. It compares all properties, so for most\ncomparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\nand is often what most users need.","scope":"instance","params":[{"name":"member","description":"The member to compare with","type":[[["GuildMember"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":581,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.","scope":"instance","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[[["string"]]]],"meta":{"line":610,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"GuildMember.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboarding","description":"Represents the onboarding data of a guild.","extends":[[["Base"]]],"props":[{"name":"guildId","description":"The id of the guild this onboarding data is for","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"prompts","description":"The prompts shown during onboarding and in customize community","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildOnboardingPrompt",">"]]],"meta":{"line":30,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"defaultChannels","description":"The ids of the channels that new members get opted into automatically","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":40,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"enabled","description":"Whether onboarding is enabled","scope":"instance","type":[[["boolean"]]],"meta":{"line":50,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"mode","description":"The mode of this onboarding","scope":"instance","type":[[["GuildOnboardingMode"]]],"meta":{"line":57,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this onboarding is from","scope":"instance","readonly":true,"type":[[["Guild"]]],"meta":{"line":66,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"GuildOnboarding.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboardingPrompt","description":"Represents the data of a prompt of a guilds onboarding.","extends":[[["Base"]]],"props":[{"name":"guildId","description":"The id of the guild this onboarding prompt is from","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of the prompt","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":28,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The options available within the prompt","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildOnboardingPromptOption",">"]]],"meta":{"line":35,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"title","description":"The title of the prompt","scope":"instance","type":[[["string"]]],"meta":{"line":45,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"singleSelect","description":"Whether users are limited to selecting one option for the prompt","scope":"instance","type":[[["boolean"]]],"meta":{"line":52,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"required","description":"Whether the prompt is required before a user completes the onboarding flow","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"inOnboarding","description":"Whether the prompt is present in the onboarding flow.\nIf `false`, the prompt will only appear in the Channels & Roles tab","scope":"instance","type":[[["boolean"]]],"meta":{"line":67,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the prompt","scope":"instance","type":[[["GuildOnboardingPromptType"]]],"meta":{"line":74,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this onboarding prompt is from","scope":"instance","readonly":true,"type":[[["Guild"]]],"meta":{"line":83,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"GuildOnboardingPrompt.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboardingPromptOption","description":"Represents the data of an option from a prompt of a guilds onboarding.","extends":[[["Base"]]],"props":[{"name":"guildId","description":"The id of the guild this onboarding prompt option is from","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of the option","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":30,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"channels","description":"The channels a member is added to when the option is selected","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":37,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"The roles assigned to a member when the option is selected","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":47,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"_emoji","description":"The raw emoji of the option","scope":"instance","access":"private","type":[[["APIPartialEmoji"]]],"meta":{"line":58,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"title","description":"The title of the option","scope":"instance","type":[[["string"]]],"meta":{"line":65,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the option","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":72,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this onboarding prompt option is from","scope":"instance","readonly":true,"type":[[["Guild"]]],"meta":{"line":81,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of this onboarding prompt option","scope":"instance","nullable":true,"type":[[["GuildEmoji"]],[["Emoji"]]],"meta":{"line":90,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"GuildOnboardingPromptOption.js","path":"packages/discord.js/src/structures"}},{"name":"GuildPreview","description":"Represents the data about the guild any bot can preview, connected to the specified guild.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"splash","description":"The splash icon of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":56,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"discoverySplash","description":"The discovery splash icon of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":65,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of enabled guild features","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":74,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"approximateMemberCount","description":"The approximate count of members in this guild","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"approximatePresenceCount","description":"The approximate count of online members in this guild","scope":"instance","type":[[["number"]]],"meta":{"line":92,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description for this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":101,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"emojis","description":"Collection of emojis belonging to this guild","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["GuildPreviewEmoji",">"]]],"meta":{"line":114,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"stickers","description":"Collection of stickers belonging to this guild","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Sticker",">"]]],"meta":{"line":126,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":138,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":148,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"splashURL","description":"The URL to this guild's splash.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":158,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"discoverySplashURL","description":"The URL to this guild's discovery splash.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":168,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":178,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildPreview",">"]]]],"meta":{"line":187,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${previewGuild}!`);"],"returns":[[[["string"]]]],"meta":{"line":201,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":15,"file":"GuildPreview.js","path":"packages/discord.js/src/structures"}},{"name":"GuildPreviewEmoji","description":"Represents an instance of an emoji belonging to a public guild obtained through Discord's preview endpoint.","extends":[[["BaseGuildEmoji"]]],"props":[{"name":"guild","description":"The public guild this emoji is part of","scope":"instance","type":[[["GuildPreview"]]],"meta":{"line":11,"file":"GuildPreviewEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"The roles this emoji is active for","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":26,"file":"GuildPreviewEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":38,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether this emoji is available","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":71,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"animated","description":"Whether or not the emoji is animated","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":81,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at.","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":91,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at.","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":101,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"imageURL","description":"Returns a URL for the emoji.","scope":"instance","inherits":"BaseGuildEmoji#imageURL","inherited":true,"params":[{"name":"options","description":"Options for the emoji URL","optional":true,"default":"{}","type":[[["EmojiURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":61,"file":"BaseGuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"GuildPreviewEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"GuildScheduledEvent","description":"Represents a scheduled event in a {@link Guild}.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the guild scheduled event","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":22,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this guild scheduled event belongs to","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":29,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The channel id in which the scheduled event will be hosted,\nor `null` if entity type is {@link GuildScheduledEventEntityType.External}","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":42,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"creatorId","description":"The id of the user that created this guild scheduled event","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":53,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild scheduled event","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":64,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the guild scheduled event","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":76,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"scheduledStartTimestamp","description":"The timestamp the guild scheduled event will start at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":87,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"scheduledEndTimestamp","description":"The timestamp the guild scheduled event will end at\nor `null` if the event does not have a scheduled time to end","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":99,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"privacyLevel","description":"The privacy level of the guild scheduled event","scope":"instance","nullable":true,"type":[[["GuildScheduledEventPrivacyLevel"]]],"meta":{"line":110,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"status","description":"The status of the guild scheduled event","scope":"instance","nullable":true,"type":[[["GuildScheduledEventStatus"]]],"meta":{"line":122,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"entityType","description":"The type of hosting entity associated with the scheduled event","scope":"instance","nullable":true,"type":[[["GuildScheduledEventEntityType"]]],"meta":{"line":134,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"entityId","description":"The id of the hosting entity associated with the scheduled event","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":146,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"userCount","description":"The number of users who are subscribed to this guild scheduled event","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":157,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"creator","description":"The user that created this guild scheduled event","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":168,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"entityMetadata","description":"Additional metadata","scope":"instance","nullable":true,"type":[[["GuildScheduledEventEntityMetadata"]]],"meta":{"line":188,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"image","description":"The cover image hash for this scheduled event","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":204,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"recurrenceRule","description":"The recurrence rule for this scheduled event","scope":"instance","nullable":true,"type":[[["GuildScheduledEventRecurrenceRule"]]],"meta":{"line":239,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this guild scheduled event is partial.","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":268,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild scheduled event was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":288,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the guild scheduled event was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":298,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"scheduledStartAt","description":"The time the guild scheduled event will start at\n<info>This can be potentially `null` only when it's an {@link GuildAuditLogsEntry#target}</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":309,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"scheduledEndAt","description":"The time the guild scheduled event will end at,\nor `null` if the event does not have a scheduled time to end","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":320,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel associated with this scheduled event","scope":"instance","readonly":true,"nullable":true,"type":[[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":330,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this scheduled event belongs to","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":340,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the guild scheduled event","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":350,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"coverImageURL","description":"The URL of this scheduled event's cover image","scope":"instance","params":[{"name":"options","description":"Options for image URL","optional":true,"default":"{}","type":[[["BaseImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":278,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"createInviteURL","description":"Creates an invite URL to this guild scheduled event.","scope":"instance","params":[{"name":"options","description":"The options to create the invite","optional":true,"type":[[["GuildScheduledEventInviteURLCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["string",">"]]]],"meta":{"line":369,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this guild scheduled event.","scope":"instance","examples":["// Edit a guild scheduled event\nguildScheduledEvent.edit({ name: 'Party' })\n .then(guildScheduledEvent => console.log(guildScheduledEvent))\n .catch(console.error);"],"params":[{"name":"options","description":"The options to edit the guild scheduled event","type":[[["GuildScheduledEventEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":392,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild scheduled event.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":402,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this guild scheduled event.","scope":"instance","examples":["// Delete a guild scheduled event\nguildScheduledEvent.delete()\n .then(guildScheduledEvent => console.log(guildScheduledEvent))\n .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":416,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild scheduled event.","scope":"instance","examples":["// Set name of a guild scheduled event\nguildScheduledEvent.setName('Birthday Party')\n .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild scheduled event","type":[[["string"]]]},{"name":"reason","description":"The reason for changing the name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":433,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setScheduledStartTime","description":"Sets a new time to schedule the event at.","scope":"instance","examples":["// Set start time of a guild scheduled event\nguildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n .catch(console.error);"],"params":[{"name":"scheduledStartTime","description":"The time to schedule the event at","type":[[["DateResolvable"]]]},{"name":"reason","description":"The reason for changing the scheduled start time","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":449,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setScheduledEndTime","description":"Sets a new time to end the event at.","scope":"instance","examples":["// Set end time of a guild scheduled event\nguildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n .catch(console.error);"],"params":[{"name":"scheduledEndTime","description":"The time to end the event at","type":[[["DateResolvable"]]]},{"name":"reason","description":"The reason for changing the scheduled end time","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":466,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setDescription","description":"Sets the new description of the guild scheduled event.","scope":"instance","examples":["// Set description of a guild scheduled event\nguildScheduledEvent.setDescription('A virtual birthday party')\n .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n .catch(console.error);"],"params":[{"name":"description","description":"The description of the guild scheduled event","type":[[["string"]]]},{"name":"reason","description":"The reason for changing the description","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":482,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setStatus","description":"Sets the new status of the guild scheduled event.\n<info>If you're working with TypeScript, use this method in conjunction with status type-guards\nlike {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>","scope":"instance","examples":["// Set status of a guild scheduled event\nguildScheduledEvent.setStatus(GuildScheduledEventStatus.Active)\n .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n .catch(console.error);"],"params":[{"name":"status","description":"The status of the guild scheduled event","type":[[["GuildScheduledEventStatus"]]]},{"name":"reason","description":"The reason for changing the status","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":500,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"setLocation","description":"Sets the new location of the guild scheduled event.","scope":"instance","examples":["// Set location of a guild scheduled event\nguildScheduledEvent.setLocation('Earth')\n .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n .catch(console.error);"],"params":[{"name":"location","description":"The location of the guild scheduled event","type":[[["string"]]]},{"name":"reason","description":"The reason for changing the location","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildScheduledEvent",">"]]]],"meta":{"line":516,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"fetchSubscribers","description":"Fetches subscribers of this guild scheduled event.","scope":"instance","params":[{"name":"options","description":"Options for fetching the subscribers","optional":true,"type":[[["FetchGuildScheduledEventSubscribersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildScheduledEventUser",">>"]]]],"meta":{"line":526,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the event's URL instead of the object.","scope":"instance","examples":["// Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\nconsole.log(`Event: ${guildScheduledEvent}`);"],"returns":[[[["string"]]]],"meta":{"line":538,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"isActive","description":"Indicates whether this guild scheduled event has an {@link GuildScheduledEventStatus.Active} status.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":547,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"isCanceled","description":"Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Canceled} status.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":556,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"isCompleted","description":"Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Completed} status.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":565,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"isScheduled","description":"Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Scheduled} status.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":574,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"GuildTemplate","description":"Represents the template for a guild.","extends":[[["Base"]]],"props":[{"name":"code","description":"The unique code of this template","scope":"instance","type":[[["string"]]],"meta":{"line":36,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this template","scope":"instance","type":[[["string"]]],"meta":{"line":45,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this template","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"usageCount","description":"The amount of times this template has been used","scope":"instance","type":[[["number"]]],"meta":{"line":63,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"creatorId","description":"The id of the user that created this template","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":72,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"creator","description":"The user that created this template","scope":"instance","type":[[["User"]]],"meta":{"line":81,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp of when this template was created at","scope":"instance","type":[[["number"]]],"meta":{"line":90,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"updatedTimestamp","description":"The timestamp of when this template was last synced to the guild","scope":"instance","type":[[["number"]]],"meta":{"line":99,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild that this template belongs to","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":108,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"serializedGuild","description":"The data of the guild that this template would create","scope":"instance","type":[[["APIGuild"]]],"meta":{"line":117,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"unSynced","description":"Whether this template has unsynced changes","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":125,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time when this template was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":217,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"updatedAt","description":"The time when this template was last synced to the guild","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":227,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild that this template belongs to","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":237,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this template","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":247,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}},{"name":"GuildTemplatesPattern","description":"A regular expression that matches guild template links.\nThe `code` group property is present on the `exec()` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":22,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"createGuild","description":"Creates a guild based on this template.\n<warn>This is only available to bots in fewer than 10 guilds.</warn>","scope":"instance","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"icon","description":"The icon for the guild","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":138,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Updates the metadata of this template.","scope":"instance","params":[{"name":"options","description":"Options for editing the template","optional":true,"type":[[["GuildTemplateEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildTemplate",">"]]]],"meta":{"line":184,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this template.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildTemplate",">"]]]],"meta":{"line":196,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"sync","description":"Syncs this template to the current state of the guild.","scope":"instance","async":true,"returns":[[[["Promise","<"],["GuildTemplate",">"]]]],"meta":{"line":206,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the template's code instead of the template object.","scope":"instance","examples":["// Logs: Template: FKvmczH2HyUf\nconsole.log(`Template: ${guildTemplate}!`);"],"returns":[[[["string"]]]],"meta":{"line":259,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"Integration","description":"Represents a guild integration.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild this integration belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":39,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The integration id","scope":"instance","type":[[["Snowflake"]],[["string"]]],"meta":{"line":46,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The integration name","scope":"instance","type":[[["string"]]],"meta":{"line":53,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The integration type","scope":"instance","type":[[["IntegrationType"]]],"meta":{"line":60,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"enabled","description":"Whether this integration is enabled","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":67,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"syncing","description":"Whether this integration is syncing","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":75,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"role","description":"The role that this integration uses for subscribers","scope":"instance","nullable":true,"type":[[["Role"]]],"meta":{"line":85,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"enableEmoticons","description":"Whether emoticons should be synced for this integration (twitch only currently)","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":93,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user for this integration","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":104,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"account","description":"The account integration information","scope":"instance","type":[[["IntegrationAccount"]]],"meta":{"line":114,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"syncedTimestamp","description":"The timestamp at which this integration was last synced at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":122,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"subscriberCount","description":"How many subscribers this integration has","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":133,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"revoked","description":"Whether this integration has been revoked","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":144,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"syncedAt","description":"The date at which this integration was last synced at","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":158,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"All roles that are managed by this integration","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":168,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"expireBehavior","description":"The behavior of expiring subscribers","scope":"instance","nullable":true,"type":[[["IntegrationExpireBehavior"]]],"meta":{"line":180,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"expireGracePeriod","description":"The grace period (in days) before expiring subscribers","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":191,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"application","description":"The application for this integration","scope":"instance","nullable":true,"type":[[["IntegrationApplication"]]],"meta":{"line":205,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"scopes","description":"The scopes this application has been authorized for","scope":"instance","type":[[["Array","<"],["OAuth2Scopes",">"]]],"meta":{"line":217,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"delete","description":"Deletes this integration.","scope":"instance","params":[{"name":"reason","description":"Reason for deleting this integration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Integration",">"]]]],"meta":{"line":229,"file":"Integration.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":30,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationApplication","description":"Represents an Integration's OAuth2 Application.","extends":[[["Application"]]],"props":[{"name":"bot","description":"The bot user for this application","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":20,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"termsOfServiceURL","description":"The URL of the application's terms of service","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":31,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"privacyPolicyURL","description":"The URL of the application's privacy policy","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"rpcOrigins","description":"The Array of RPC origin URLs","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":53,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"cover","description":"The hash of the application's cover image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":64,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"verifyKey","description":"The hex-encoded key for verification in interactions and the GameSDK's GetTicket","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":75,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":24,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"name","description":"The name of the application","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"description","description":"The application's description","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"icon","description":"The application's icon hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdTimestamp","description":"The timestamp the application was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":121,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdAt","description":"The time the application was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":131,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","scope":"instance","inherits":"Application#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":141,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"coverURL","description":"A link to this application's cover image.","scope":"instance","inherits":"Application#coverURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":151,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nApplication object.","scope":"instance","inherits":"Application#toString","inherited":true,"examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":164,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":10,"file":"IntegrationApplication.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionCallback","description":"Represents an interaction callback response from Discord","props":[{"name":"client","description":"The client that instantiated this.","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of the original interaction response","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":24,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the original interaction","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":31,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"activityInstanceId","description":"The instance id of the Activity if one was launched or joined","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":38,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"responseMessageId","description":"The id of the message that was created by the interaction","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":45,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"responseMessageLoading","description":"Whether the message is in a loading state","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":52,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"responseMessageEphemeral","description":"Whether the response message was ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":59,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the original interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":68,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the original interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":78,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"InteractionCallback.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionCallbackResource","description":"Represents the resource that was created by the interaction response.","props":[{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction callback type","scope":"instance","type":[[["InteractionResponseType"]]],"meta":{"line":26,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}},{"name":"activityInstance","description":"Represents the Activity launched by this interaction","scope":"instance","nullable":true,"type":[[["ActivityInstance"]]],"meta":{"line":40,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message created by the interaction","scope":"instance","nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionCallbackResponse","description":"Represents an interaction's response","props":[{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":11,"file":"InteractionCallbackResponse.js","path":"packages/discord.js/src/structures"}},{"name":"interaction","description":"The interaction object associated with the interaction callback response","scope":"instance","type":[[["InteractionCallback"]]],"meta":{"line":25,"file":"InteractionCallbackResponse.js","path":"packages/discord.js/src/structures"}},{"name":"resource","description":"The resource that was created by the interaction response","scope":"instance","nullable":true,"type":[[["InteractionCallbackResource"]]],"meta":{"line":32,"file":"InteractionCallbackResponse.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":9,"file":"InteractionCallbackResponse.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionCollector","description":"Collects interactions.\nWill automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n{@link Client#event:messageDeleteBulk messageDeleteBulk}),\nchannel ({@link Client#event:channelDelete channelDelete}), or\nguild ({@link Client#event:guildDelete guildDelete}) is deleted.\n<info>Interaction collectors that do not specify `time` or `idle` may be prone to always running.\nEnsure your interaction collectors end via either of these options or manual cancellation.</info>","extends":[[["Collector"]]],"construct":{"name":"InteractionCollector","params":[{"name":"client","description":"The client on which to collect interactions","type":[[["Client"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["InteractionCollectorOptions"]]]}]},"props":[{"name":"messageId","description":"The message from which to collect interactions, if provided","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The channel from which to collect interactions, if provided","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The guild from which to collect interactions, if provided","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":58,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"interactionType","description":"The type of interaction to collect","scope":"instance","nullable":true,"type":[[["InteractionType"]]],"meta":{"line":69,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component to collect","scope":"instance","nullable":true,"type":[[["ComponentType"]]],"meta":{"line":76,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"The users that have interacted with this collector","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":83,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"total","description":"The total number of interactions collected","scope":"instance","type":[[["number"]]],"meta":{"line":90,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"endReason","description":"The reason this collector has ended with, or null if it hasn't ended yet","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":196,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this Collector","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":38,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","scope":"instance","type":[[["CollectorFilter"]]],"meta":{"line":53,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"options","description":"The options of this collector","scope":"instance","type":[[["CollectorOptions"]]],"meta":{"line":60,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","scope":"instance","type":[[["Collection"]]],"meta":{"line":67,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","scope":"instance","type":[[["boolean"]]],"meta":{"line":74,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":82,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":90,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_endReason","description":"The reason the collector ended","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedTimestamp","description":"The timestamp at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":115,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedAt","description":"The Date at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":123,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","scope":"instance","readonly":true,"type":[[["Promise"]]],"meta":{"line":200,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming interaction for possible collection.","scope":"instance","access":"private","params":[{"name":"interaction","description":"The interaction to possibly collect","type":[[["BaseInteraction"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":141,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Handles an interaction for possible disposal.","scope":"instance","params":[{"name":"interaction","description":"The interaction that could be disposed of","type":[[["BaseInteraction"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":164,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"empty","description":"Empties this interaction collector.","scope":"instance","meta":{"line":183,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleMessageDeletion","description":"Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.","scope":"instance","access":"private","params":[{"name":"message","description":"The message that was deleted","type":[[["Message"]]]}],"returns":[[[["void"]]]],"meta":{"line":210,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleChannelDeletion","description":"Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.","scope":"instance","access":"private","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GuildChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":223,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleThreadDeletion","description":"Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.","scope":"instance","access":"private","params":[{"name":"thread","description":"The thread that was deleted","type":[[["ThreadChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":236,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleGuildDeletion","description":"Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.","scope":"instance","access":"private","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"returns":[[[["void"]]]],"meta":{"line":249,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":134,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":176,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","scope":"instance","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":235,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collector's timeout and idle timer.","scope":"instance","inherits":"Collector#resetTimer","inherited":true,"params":[{"name":"options","description":"Options for resetting","optional":true,"type":[[["CollectorResetTimerOptions"]]]}],"meta":{"line":274,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","scope":"instance","inherits":"Collector#checkEnd","inherited":true,"returns":[{"types":[[["boolean"]]],"description":"Whether the collector ended or not"}],"meta":{"line":291,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an interaction is collected.","params":[{"name":"interaction","description":"The interaction that was collected","type":[[["BaseInteraction"]]]}],"meta":{"line":142,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Emitted whenever an interaction is disposed of.","params":[{"name":"interaction","description":"The interaction that was disposed of","type":[[["BaseInteraction"]]]}],"meta":{"line":165,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"ignore","description":"Emitted whenever an element is not collected by the collector.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":156,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":251,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":30,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionWebhook","description":"Represents a webhook for an Interaction","implements":[[["Webhook"]]],"construct":{"name":"InteractionWebhook","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"id","description":"The application's id","type":[[["Snowflake"]]]},{"name":"token","description":"The interaction's token","type":[[["string"]]]}]},"props":[{"name":"client","description":"The client that instantiated the interaction webhook","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":17,"file":"InteractionWebhook.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The webhook's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this webhook","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":456,"file":"Webhook.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","scope":"instance","implements":["Webhook#send"],"params":[{"name":"options","description":"The content for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":38,"file":"InteractionWebhook.js","path":"packages/discord.js/src/structures"}},{"name":"fetchMessage","description":"Gets a message that was sent by this webhook.","scope":"instance","implements":["Webhook#fetchMessage"],"params":[{"name":"message","description":"The id of the message to fetch","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Message",">"]]],"description":"Returns the message sent by this webhook"}],"meta":{"line":47,"file":"InteractionWebhook.js","path":"packages/discord.js/src/structures"}},{"name":"editMessage","description":"Edits a message that was sent by this webhook.","scope":"instance","implements":["Webhook#editMessage"],"params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]],[["'@original'"]]]},{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["WebhookMessageEditOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Message",">"]]],"description":"Returns the message edited by this webhook"}],"meta":{"line":57,"file":"InteractionWebhook.js","path":"packages/discord.js/src/structures"}},{"name":"deleteMessage","description":"Delete a message that was sent by this webhook.","scope":"instance","implements":["Webhook#deleteMessage"],"params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]],[["'@original'"]]]},{"name":"threadId","description":"The id of the thread this message belongs to","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":418,"file":"Webhook.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"InteractionWebhook.js","path":"packages/discord.js/src/structures"}},{"name":"Application","description":"Represents an OAuth2 Application.","extends":[[["Base"]]],"abstract":true,"props":[{"name":"id","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":24,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"name","description":"The name of the application","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"description","description":"The application's description","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"icon","description":"The application's icon hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"termsOfServiceURL","description":"The URL of the application's terms of service","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":65,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"privacyPolicyURL","description":"The URL of the application's privacy policy","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":76,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"rpcOrigins","description":"The application's RPC origins, if enabled","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":87,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"cover","description":"The hash of the application's cover image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"verifyKey","description":"The hex-encoded key for verification in interactions and the GameSDK's GetTicket","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":109,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdTimestamp","description":"The timestamp the application was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":121,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createdAt","description":"The time the application was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":131,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":141,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"coverURL","description":"A link to this application's cover image.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":151,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nApplication object.","scope":"instance","examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":164,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":12,"file":"Application.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","extends":[[["AsyncEventEmitter"]]],"abstract":true,"props":[{"name":"client","description":"The client that instantiated this Collector","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":38,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","scope":"instance","type":[[["CollectorFilter"]]],"meta":{"line":53,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"options","description":"The options of this collector","scope":"instance","type":[[["CollectorOptions"]]],"meta":{"line":60,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","scope":"instance","type":[[["Collection"]]],"meta":{"line":67,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","scope":"instance","type":[[["boolean"]]],"meta":{"line":74,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":82,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":90,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_endReason","description":"The reason the collector ended","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedTimestamp","description":"The timestamp at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":115,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedAt","description":"The Date at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":123,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","scope":"instance","readonly":true,"type":[[["Promise"]]],"meta":{"line":200,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended with, or null if it hasn't ended yet","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":339,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"methods":[{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","scope":"instance","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":134,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","scope":"instance","emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":176,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","scope":"instance","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":235,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collector's timeout and idle timer.","scope":"instance","params":[{"name":"options","description":"Options for resetting","optional":true,"type":[[["CollectorResetTimerOptions"]]]}],"meta":{"line":274,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","scope":"instance","returns":[{"types":[[["boolean"]]],"description":"Whether the collector ended or not"}],"meta":{"line":291,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"collect","description":"Handles incoming events from the `handleCollect` function. Returns null if the event should not\nbe collected, or returns an object describing the data that should be stored.","see":["Collector#handleCollect"],"scope":"instance","abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[[["*"]]]}],"returns":[{"types":[[["*"]],[["Promise","<?*>"]]],"description":"Data to insert into collection, if any","nullable":true}],"meta":{"line":353,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"dispose","description":"Handles incoming events from the `handleDispose`. Returns null if the event should not\nbe disposed, or returns the key that should be removed.","see":["Collector#handleDispose"],"scope":"instance","abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[[["*"]]]}],"returns":[{"types":[[["*"]]],"description":"Key to remove from the collection, if any","nullable":true}],"meta":{"line":365,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":142,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ignore","description":"Emitted whenever an element is not collected by the collector.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":156,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"dispose","description":"Emitted whenever an element is disposed of.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":183,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":251,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":34,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.","extends":[[["Base"]]],"props":[{"name":"type","description":"The type of this invite","scope":"instance","type":[[["InviteType"]]],"meta":{"line":32,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the invite is for including welcome screen data if present","scope":"instance","nullable":true,"type":[[["Guild"]],[["InviteGuild"]]],"meta":{"line":44,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"code","description":"The code for this invite","scope":"instance","type":[[["string"]]],"meta":{"line":55,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for\n<info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":65,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for\n<info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":77,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"temporary","description":"Whether or not this invite only grants temporary membership\n<info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\nor created through {@link GuildInviteManager#create}.</info>","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":90,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds, 0 if never expires\n<info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\nor created through {@link GuildInviteManager#create}.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":103,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"uses","description":"How many times this invite has been used\n<info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\nor created through {@link GuildInviteManager#create}.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":116,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite\n<info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\nor created through {@link GuildInviteManager#create}.</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":129,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"inviterId","description":"The user's id who created this invite","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":140,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"targetUser","description":"The user whose stream to display for this voice channel stream invite","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":156,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"targetApplication","description":"The embedded application to open for this voice channel embedded application invite","scope":"instance","nullable":true,"type":[[["IntegrationApplication"]]],"meta":{"line":167,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"targetType","description":"The target type","scope":"instance","nullable":true,"type":[[["InviteTargetType"]]],"meta":{"line":178,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this invite is for","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":189,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this invite is for","scope":"instance","nullable":true,"type":[[["BaseChannel"]]],"meta":{"line":198,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this invite was created at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":211,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"guildScheduledEvent","description":"The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for","scope":"instance","nullable":true,"type":[[["GuildScheduledEvent"]]],"meta":{"line":228,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the invite was created at","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":240,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the invite is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":250,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":267,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"expiresAt","description":"The time the invite will expire at","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":280,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"inviter","description":"The user who created this invite","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":290,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the invite","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":300,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}},{"name":"InvitesPattern","description":"A regular expression that matches Discord invite links.\nThe `code` group property is present on the `exec()` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":22,"file":"Invite.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","scope":"instance","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":310,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","scope":"instance","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[[["string"]]]],"meta":{"line":323,"file":"Invite.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"Invite.js","path":"packages/discord.js/src/structures"}},{"name":"InviteGuild","description":"Represents a guild received from an invite, includes welcome screen data if available.","extends":[[["AnonymousGuild"]]],"props":[{"name":"welcomeScreen","description":"The welcome screen for this invite guild","scope":"instance","nullable":true,"type":[[["WelcomeScreen"]]],"meta":{"line":20,"file":"InviteGuild.js","path":"packages/discord.js/src/structures"}},{"name":"splash","description":"The hash of the guild invite splash image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The hash of the guild banner","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","scope":"instance","type":[[["GuildVerificationLevel"]]],"meta":{"line":53,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"vanityURLCode","description":"The vanity invite code of the guild, if any","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":62,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nsfwLevel","description":"The NSFW level of this guild","scope":"instance","type":[[["GuildNSFWLevel"]]],"meta":{"line":71,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of boosts for this server","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":80,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The guild's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of features available to this guild","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":44,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":53,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":63,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"partnered","description":"Whether this guild is partnered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verified","description":"Whether this guild is verified","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":98,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"bannerURL","description":"The URL to this guild's banner.","scope":"instance","inherits":"AnonymousGuild#bannerURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":92,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"splashURL","description":"The URL to this guild's invite splash image.","scope":"instance","inherits":"AnonymousGuild#splashURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":102,"file":"AnonymousGuild.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","inherits":"BaseGuild#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":108,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","inherits":"BaseGuild#fetch","inherited":true,"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":117,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","inherits":"BaseGuild#toString","inherited":true,"returns":[[[["string"]]]],"meta":{"line":129,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"InviteGuild.js","path":"packages/discord.js/src/structures"}},{"name":"MediaChannel","description":"Represents a media channel.","extends":[[["ThreadOnlyChannel"]]],"props":[{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildForumThreadManager"]]],"meta":{"line":54,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"availableTags","description":"The set of tags that can be used in this channel.","scope":"instance","type":[[["Array","<"],["GuildForumTag",">"]]],"meta":{"line":67,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultReactionEmoji","description":"The emoji to show in the add reaction button on a thread in a guild forum channel","scope":"instance","nullable":true,"type":[[["DefaultReactionEmoji"]]],"meta":{"line":78,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":102,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel.","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":113,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If this channel is considered NSFW.","scope":"instance","type":[[["boolean"]]],"meta":{"line":124,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of this channel.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":135,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultSortOrder","description":"The default sort order mode used to order posts","scope":"instance","nullable":true,"type":[[["SortOrderType"]]],"meta":{"line":144,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setAvailableTags","description":"Sets the available tags for this forum channel","scope":"instance","inherits":"ThreadOnlyChannel#setAvailableTags","inherited":true,"params":[{"name":"availableTags","description":"The tags to set as available in this channel","type":[[["Array","<"],["GuildForumTagData",">"]]]},{"name":"reason","description":"Reason for changing the available tags","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":157,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultReactionEmoji","description":"Sets the default reaction emoji for this channel","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultReactionEmoji","inherited":true,"params":[{"name":"defaultReactionEmoji","description":"The emoji to set as the default reaction emoji","nullable":true,"type":[[["DefaultReactionEmoji"]]]},{"name":"reason","description":"Reason for changing the default reaction emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":168,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultThreadRateLimitPerUser","description":"Sets the default rate limit per user (slowmode) for new threads in this channel","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultThreadRateLimitPerUser","inherited":true,"params":[{"name":"defaultThreadRateLimitPerUser","description":"The rate limit to set on newly created threads in this channel","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the default rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":179,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"ThreadOnlyChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":194,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","inherits":"ThreadOnlyChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":205,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultAutoArchiveDuration","inherited":true,"params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":216,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","inherits":"ThreadOnlyChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":232,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultSortOrder","description":"Sets the default sort order mode used to order posts","scope":"instance","inherits":"ThreadOnlyChannel#setDefaultSortOrder","inherited":true,"params":[{"name":"defaultSortOrder","description":"The default sort order mode to set on this channel","nullable":true,"type":[[["SortOrderType"]]]},{"name":"reason","description":"Reason for changing the default sort order","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":243,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"ThreadOnlyChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"ThreadOnlyChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","inherits":"ThreadOnlyChannel#setRateLimitPerUser","inherited":true,"implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"ThreadOnlyChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"MediaChannel.js","path":"packages/discord.js/src/structures"}},{"name":"MediaGalleryComponent","description":"Represents a media gallery component","extends":[[["Component"]]],"props":[{"name":"items","description":"The items in this media gallery","scope":"instance","readonly":true,"type":[[["Array","<"],["MediaGalleryItem",">"]]],"meta":{"line":21,"file":"MediaGalleryComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIMediaGalleryComponent"]]]],"meta":{"line":29,"file":"MediaGalleryComponent.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"MediaGalleryComponent.js","path":"packages/discord.js/src/structures"}},{"name":"MediaGalleryItem","description":"Represents an item in a media gallery","props":[{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMediaGalleryItem"]]],"meta":{"line":15,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}},{"name":"media","description":"The media associated with this media gallery item","scope":"instance","readonly":true,"type":[[["UnfurledMediaItem"]]],"meta":{"line":23,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this media gallery item","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether this media gallery item is spoilered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":42,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIMediaGalleryItem"]]]],"meta":{"line":51,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"MediaGalleryItem.js","path":"packages/discord.js/src/structures"}},{"name":"MentionableSelectMenuComponent","description":"Represents a mentionable select menu component","extends":[[["BaseSelectMenuComponent"]]],"props":[{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"MentionableSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"MentionableSelectMenuInteraction","description":"Represents a {@link ComponentType.MentionableSelect} select menu interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"values","description":"An array of the selected user and role ids","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":23,"file":"MentionableSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"Collection of the selected users","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":30,"file":"MentionableSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"Collection of the selected users","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["GuildMember","|"],["APIGuildMember",")>"]]],"meta":{"line":37,"file":"MentionableSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"Collection of the selected roles","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["Role","|"],["APIRole",")>"]]],"meta":{"line":44,"file":"MentionableSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"MentionableSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"Message","description":"Represents a message on Discord.","extends":[[["Base"]]],"props":[{"name":"channelId","description":"The id of the channel the message was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":47,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the message was sent in, if any","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":54,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The message's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","scope":"instance","type":[[["number"]]],"meta":{"line":72,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the message","scope":"instance","nullable":true,"type":[[["MessageType"]]],"meta":{"line":80,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":87,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"content","description":"The content of the message.\n<info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\nin a guild for messages that do not mention the client.</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":101,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"author","description":"The author of the message","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":112,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":123,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":134,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery\n<warn>This is only received after the message was sent successfully, and\nlost if re-fetched</warn>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":147,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"embeds","description":"An array of embeds in the message - e.g. YouTube Player.\n<info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\nin a guild for messages that do not mention the client.</info>","scope":"instance","type":[[["Array","<"],["Embed",">"]]],"meta":{"line":160,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"components","description":"An array of components in the message.\n<info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\nin a guild for messages that do not mention the client.</info>","scope":"instance","type":[[["Array","<"],["Component",">"]]],"meta":{"line":173,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ids.\n<info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\nin a guild for messages that do not mention the client.</info>","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Attachment",">"]]],"meta":{"line":186,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"stickers","description":"A collection of stickers in the message","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Sticker",">"]]],"meta":{"line":202,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"A generally increasing integer (there may be gaps or duplicates) that represents\nthe approximate position of the message in a thread.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":216,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"roleSubscriptionData","description":"The data of the role subscription purchase or renewal.\n<info>This is present on {@link MessageType.RoleSubscriptionPurchase} messages.</info>","scope":"instance","nullable":true,"type":[[["RoleSubscriptionData"]]],"meta":{"line":238,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"resolved","description":"Resolved data from auto-populated select menus.","scope":"instance","nullable":true,"type":[[["CommandInteractionResolvedData"]]],"meta":{"line":254,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":269,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"reactions","description":"A manager of the reactions belonging to this message","scope":"instance","type":[[["ReactionManager"]]],"meta":{"line":280,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","scope":"instance","type":[[["MessageMentions"]]],"meta":{"line":295,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"webhookId","description":"The id of the webhook that sent the message, if applicable","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":310,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"groupActivityApplication","description":"Supplemental application information for group activities","scope":"instance","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":321,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The id of the application of the interaction that sent this message, if any","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":332,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"activity","description":"Group activity","scope":"instance","nullable":true,"type":[[["MessageActivity"]]],"meta":{"line":343,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"Flags that are applied to the message","scope":"instance","type":[[["Readonly","<"],["MessageFlagsBitField",">"]]],"meta":{"line":367,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"reference","description":"Message reference data","scope":"instance","nullable":true,"type":[[["MessageReference"]]],"meta":{"line":395,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"interactionMetadata","description":"Partial data of the interaction that this message is a result of","scope":"instance","nullable":true,"type":[[["MessageInteractionMetadata"]]],"meta":{"line":433,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"poll","description":"The poll that was sent with the message","scope":"instance","nullable":true,"type":[[["Poll"]]],"meta":{"line":447,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"messageSnapshots","description":"The message snapshots associated with the message reference","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":459,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"call","description":"The call associated with the message","scope":"instance","nullable":true,"type":[[["MessageCall"]]],"meta":{"line":492,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel that the message was sent in","scope":"instance","readonly":true,"type":[[["TextBasedChannels"]]],"meta":{"line":510,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether or not this message is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member.\nOnly available if the message comes from a guild where the author is still a member","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":531,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the message was sent at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":541,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":551,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":561,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"hasThread","description":"Whether this message has a thread associated with it","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":571,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"thread","description":"The thread started by this message\n<info>This property is not suitable for checking whether a message has a thread,\nuse {@link Message#hasThread} instead.</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["ThreadChannel"]]],"meta":{"line":583,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to jump to this message","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":593,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":604,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":725,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":751,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"bulkDeletable","description":"Whether the message is bulk deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":784,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":800,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"crosspostable","description":"Whether the message is crosspostable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":830,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"createReactionCollector","description":"Creates a reaction collector.","scope":"instance","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId';\nconst collector = message.createReactionCollector({ filter, time: 15_000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[[["ReactionCollector"]]]],"meta":{"line":621,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"awaitReactions","description":"Similar to createReactionCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","scope":"instance","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId'\nmessage.awaitReactions({ filter, time: 15_000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<("],["string","|"],["Snowflake","), "],["MessageReaction",">>"]]]],"meta":{"line":645,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"createMessageComponentCollector","description":"Creates a message component interaction collector.","scope":"instance","examples":["// Create a message component interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = message.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', i => console.log(`Collected ${i.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":675,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nmessage.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":707,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"fetchReference","description":"Fetches the Message this crosspost/reply/pin-add references, if available to the client","scope":"instance","async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":815,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the content of the message.","scope":"instance","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":857,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"crosspost","description":"Publishes a message in an announcement channel to all channels following it.","scope":"instance","examples":["// Crosspost a message\nif (message.channel.type === ChannelType.GuildAnnouncement) {\n  message.crosspost()\n    .then(() => console.log('Crossposted message'))\n    .catch(console.error);\n}"],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":874,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","scope":"instance","examples":["// Pin a message\nmessage.pin()\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":890,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","scope":"instance","examples":["// Unpin a message\nmessage.unpin()\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":907,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"react","description":"Adds a reaction to the message.","scope":"instance","examples":["// React to a message with a unicode emoji\nmessage.react('🤔')\n  .then(console.log)\n  .catch(console.error);","// React to a message with a custom emoji\nmessage.react(message.guild.emojis.cache.get('123456789012345678'))\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageReaction",">"]]]],"meta":{"line":929,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the message.","scope":"instance","examples":["// Delete a message\nmessage.delete()\n  .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":954,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"reply","description":"Send an inline reply to this message.","scope":"instance","examples":["// Reply to a message\nmessage.reply('This is a reply!')\n  .then(() => console.log(`Replied to message \"${message.content}\"`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":979,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"forward","description":"Forwards this message.","scope":"instance","params":[{"name":"channel","description":"The channel to forward this message to.","type":[[["TextChannelResolvable"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":1005,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"startThread","description":"Create a new public thread from this message","see":["GuildTextThreadManager#create"],"scope":"instance","params":[{"name":"options","description":"Options for starting a thread on this message","optional":true,"type":[[["StartThreadOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":1034,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetch this message.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":1050,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","scope":"instance","async":true,"returns":[[[["Promise","<?"],["Webhook",">"]]]],"meta":{"line":1060,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"suppressEmbeds","description":"Suppresses or unsuppresses embeds on a message.","scope":"instance","params":[{"name":"suppress","description":"If the embeds should be suppressed or not","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":1072,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"removeAttachments","description":"Removes the attachments from this message.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":1089,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"resolveComponent","description":"Resolves a component by a custom id.","scope":"instance","params":[{"name":"customId","description":"The custom id to resolve against","type":[[["string"]]]}],"returns":[{"types":[[["MessageActionRowComponent"]]],"nullable":true}],"meta":{"line":1099,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","scope":"instance","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["APIMessage"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":1112,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"inGuild","description":"Whether this message is from a guild.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":1143,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","scope":"instance","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[[["string"]]]],"meta":{"line":1155,"file":"Message.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":38,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.\nWill automatically stop if the channel ({@link Client#event:channelDelete channelDelete}),\nthread ({@link Client#event:threadDelete threadDelete}), or\nguild ({@link Client#event:guildDelete guildDelete}) is deleted.","extends":[[["Collector"]]],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextBasedChannels"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","scope":"instance","type":[[["TextBasedChannels"]]],"meta":{"line":34,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","scope":"instance","type":[[["number"]]],"meta":{"line":41,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"endReason","description":"The reason this collector has ended with, or null if it hasn't ended yet","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":111,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this Collector","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":38,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","scope":"instance","type":[[["CollectorFilter"]]],"meta":{"line":53,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"options","description":"The options of this collector","scope":"instance","type":[[["CollectorOptions"]]],"meta":{"line":60,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","scope":"instance","type":[[["Collection"]]],"meta":{"line":67,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","scope":"instance","type":[[["boolean"]]],"meta":{"line":74,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":82,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":90,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_endReason","description":"The reason the collector ended","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedTimestamp","description":"The timestamp at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":115,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedAt","description":"The Date at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":123,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","scope":"instance","readonly":true,"type":[[["Promise"]]],"meta":{"line":200,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles a message for possible collection.","scope":"instance","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":77,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Handles a message for possible disposal.","scope":"instance","params":[{"name":"message","description":"The message that could be disposed of","type":[[["Message"]]]}],"returns":[{"types":[[["Snowflake"]]],"nullable":true}],"meta":{"line":95,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleChannelDeletion","description":"Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.","scope":"instance","access":"private","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GuildChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":124,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleThreadDeletion","description":"Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.","scope":"instance","access":"private","params":[{"name":"thread","description":"The thread that was deleted","type":[[["ThreadChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":137,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleGuildDeletion","description":"Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.","scope":"instance","access":"private","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"returns":[[[["void"]]]],"meta":{"line":150,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":134,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":176,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","scope":"instance","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":235,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collector's timeout and idle timer.","scope":"instance","inherits":"Collector#resetTimer","inherited":true,"params":[{"name":"options","description":"Options for resetting","optional":true,"type":[[["CollectorResetTimerOptions"]]]}],"meta":{"line":274,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","scope":"instance","inherits":"Collector#checkEnd","inherited":true,"returns":[{"types":[[["boolean"]]],"description":"Whether the collector ended or not"}],"meta":{"line":291,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever a message is collected.","params":[{"name":"message","description":"The message that was collected","type":[[["Message"]]]}],"meta":{"line":78,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Emitted whenever a message is disposed of.","params":[{"name":"message","description":"The message that was disposed of","type":[[["Message"]]]}],"meta":{"line":96,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"ignore","description":"Emitted whenever an element is not collected by the collector.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":156,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":251,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":20,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"MessageComponentInteraction","description":"Represents a message component interaction.","extends":[[["BaseInteraction"]]],"implements":[[["InteractionResponses"]]],"props":[{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":17,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"MessageContextMenuCommandInteraction","description":"Represents a message context menu interaction.","extends":[[["ContextMenuCommandInteraction"]]],"props":[{"name":"targetMessage","description":"The message this interaction was sent from","scope":"instance","readonly":true,"type":[[["Message"]],[["APIMessage"]]],"meta":{"line":17,"file":"MessageContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The target of the interaction, parsed into options","scope":"instance","type":[[["CommandInteractionOptionResolver"]]],"meta":{"line":24,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"targetId","description":"The id of the target of this interaction","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":35,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"resolveContextMenuOptions","description":"Resolves and transforms options received from the API for a context menu interaction.","scope":"instance","access":"private","inherits":"ContextMenuCommandInteraction#resolveContextMenuOptions","inherited":true,"params":[{"name":"data","description":"The interaction data","type":[[["APIApplicationCommandInteractionData"]]]}],"returns":[[[["Array","<"],["CommandInteractionOption",">"]]]],"meta":{"line":45,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","inherits":"CommandInteraction#transformOption","inherited":true,"params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"CommandInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"CommandInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"CommandInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"CommandInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"CommandInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"CommandInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"CommandInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"CommandInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"CommandInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"MessageContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","scope":"instance","type":[[["boolean"]]],"meta":{"line":96,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"Any users that were mentioned\n<info>Order as received from the API, not as they appear in the message content</info>","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":106,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"Any roles that were mentioned\n<info>Order as received from the API, not as they appear in the message content</info>","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":129,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"_members","description":"Cached members for {@link MessageMentions#members}","scope":"instance","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":149,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"_channels","description":"Cached channels for {@link MessageMentions#channels}","scope":"instance","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["BaseChannel",">"]]],"meta":{"line":157,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"_parsedUsers","description":"Cached users for {@link MessageMentions#parsedUsers}","scope":"instance","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":165,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"crosspostedChannels","description":"A collection of crossposted channels\n<info>Order as received from the API, not as they appear in the message content</info>","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["CrosspostedChannel",">"]]],"meta":{"line":185,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"repliedUser","description":"The author of the message that this message is a reply to","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":206,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link Guild}s)\n<info>Order as received from the API, not as they appear in the message content</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":216,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"channels","description":"Any channels that were mentioned\n<info>Order as they appear first in the message content</info>","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["BaseChannel",">"]]],"meta":{"line":235,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"parsedUsers","description":"Any user mentions that were included in the message content\n<info>Order as they appear first in the message content</info>","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":255,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"EveryonePattern","description":"A regular expression that matches `@everyone` and `@here`.\nThe `mention` group property is present on the `exec` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":18,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"UsersPattern","description":"A regular expression that matches user mentions like `<@81440962496172032>`.\nThe `id` group property is present on the `exec` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":27,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"RolesPattern","description":"A regular expression that matches role mentions like `<@&297577916114403338>`.\nThe `id` group property is present on the `exec` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":36,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"ChannelsPattern","description":"A regular expression that matches channel mentions like `<#222079895583457280>`.\nThe `id` group property is present on the `exec` result of this expression.","scope":"static","type":[[["RegExp"]]],"meta":{"line":45,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"GlobalChannelsPattern","description":"A global regular expression variant of {@link MessageMentions.ChannelsPattern}.","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":54,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"GlobalUsersPattern","description":"A global regular expression variant of {@link MessageMentions.UsersPattern}.","scope":"static","access":"private","type":[[["RegExp"]]],"meta":{"line":63,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"has","description":"Checks if a user, guild member, thread member, role, or channel is mentioned.\nTakes into account user mentions, role mentions, channel mentions,\nreplied user mention, and `@everyone`/`@here` mentions.","scope":"instance","params":[{"name":"data","description":"The User/Role/Channel to check for","type":[[["UserResolvable"]],[["RoleResolvable"]],[["ChannelResolvable"]]]},{"name":"options","description":"The options for the check","optional":true,"type":[[["MessageMentionsHasOptions"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":286,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"MessagePayload","description":"Represents a message to be sent to the API.","construct":{"name":"MessagePayload","params":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]]},{"name":"options","description":"The payload of this message","type":[[["MessagePayloadOption"]]]}]},"props":[{"name":"target","description":"The target for this message to be sent to","scope":"instance","type":[[["MessageTarget"]]],"meta":{"line":25,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The payload of this message.","scope":"instance","type":[[["MessagePayloadOption"]]],"meta":{"line":32,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"body","description":"Body sendable to the API","scope":"instance","nullable":true,"type":[[["APIMessage"]]],"meta":{"line":39,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"files","description":"Files sendable to the API","scope":"instance","nullable":true,"type":[[["Array","<"],["RawFile",">"]]],"meta":{"line":46,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"isWebhook","description":"Whether or not the target is a {@link Webhook} or a {@link WebhookClient}","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":55,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"isUser","description":"Whether or not the target is a {@link User}","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":67,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"isMessage","description":"Whether or not the target is a {@link Message}","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":79,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageManager","description":"Whether or not the target is a {@link MessageManager}","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":90,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"makeContent","description":"Makes the content of this message.","scope":"instance","returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":100,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"resolveBody","description":"Resolves the body.","scope":"instance","returns":[[[["MessagePayload"]]]],"meta":{"line":116,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"resolveFiles","description":"Resolves files.","scope":"instance","async":true,"returns":[[[["Promise","<"],["MessagePayload",">"]]]],"meta":{"line":250,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"resolveFile","description":"Resolves a single file into an object sendable to the API.","scope":"static","params":[{"name":"fileLike","description":"Something that could be resolved to a file","type":[[["AttachmentPayload"]],[["BufferResolvable"]],[["Stream"]]]}],"async":true,"returns":[[[["Promise","<"],["RawFile",">"]]]],"meta":{"line":263,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"create","description":"Creates a {@link MessagePayload} from user-level arguments.","scope":"static","params":[{"name":"target","description":"Target to send to","type":[[["MessageTarget"]]]},{"name":"options","description":"Options or content to use","type":[[["string"]],[["MessagePayloadOption"]]]},{"name":"extra","description":"Extra options to add onto specified options","optional":true,"default":"{}","type":[[["MessagePayloadOption"]]]}],"returns":[[[["MessagePayload"]]]],"meta":{"line":289,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","props":[{"name":"client","description":"The client that instantiated this message reaction","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":15,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message that this reaction refers to","scope":"instance","type":[[["Message"]]],"meta":{"line":29,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"me","description":"Whether the client has given this reaction","scope":"instance","type":[[["boolean"]]],"meta":{"line":36,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"meBurst","description":"Whether the client has super-reacted using this emoji","scope":"instance","type":[[["boolean"]]],"meta":{"line":43,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"A manager of the users that have given this reaction","scope":"instance","type":[[["ReactionUserManager"]]],"meta":{"line":50,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"burstColors","description":"Hexadecimal colors used for this super reaction","scope":"instance","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":66,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":75,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"countDetails","description":"The reaction count details object contains information about super and normal reaction counts.","scope":"instance","type":[[["ReactionCountDetailsData"]]],"meta":{"line":92,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis,\n{@link ApplicationEmoji} for application emojis, or a {@link ReactionEmoji} object\nwhich has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","scope":"instance","readonly":true,"type":[[["GuildEmoji"]],[["ReactionEmoji"]],[["ApplicationEmoji"]]],"meta":{"line":131,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether or not this reaction is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":154,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"react","description":"Makes the client user react with this reaction","scope":"instance","async":true,"returns":[[[["Promise","<"],["MessageReaction",">"]]]],"meta":{"line":106,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"remove","description":"Removes all users from this reaction.","scope":"instance","async":true,"returns":[[[["Promise","<"],["MessageReaction",">"]]]],"meta":{"line":115,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetch this reaction.","scope":"instance","async":true,"returns":[[[["Promise","<"],["MessageReaction",">"]]]],"meta":{"line":163,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"ModalSubmitFields","description":"Represents the serialized fields from a modal submit interaction","props":[{"name":"components","description":"The components within the modal","scope":"instance","type":[[["Array","<"],["ActionRowModalData",">"]]],"meta":{"line":17,"file":"ModalSubmitFields.js","path":"packages/discord.js/src/structures"}},{"name":"fields","description":"The extracted fields from the modal","scope":"instance","type":[[["Collection","<"],["string",", "],["ModalData",">"]]],"meta":{"line":24,"file":"ModalSubmitFields.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"getField","description":"Gets a field given a custom id from a component","scope":"instance","params":[{"name":"customId","description":"The custom id of the component","type":[[["string"]]]},{"name":"type","description":"The type of the component","optional":true,"type":[[["ComponentType"]]]}],"returns":[[[["ModalData"]]]],"meta":{"line":37,"file":"ModalSubmitFields.js","path":"packages/discord.js/src/structures"}},{"name":"getTextInputValue","description":"Gets the value of a text input component given a custom id","scope":"instance","params":[{"name":"customId","description":"The custom id of the text input component","type":[[["string"]]]}],"returns":[[[["string"]]]],"meta":{"line":54,"file":"ModalSubmitFields.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"ModalSubmitFields.js","path":"packages/discord.js/src/structures"}},{"name":"ModalSubmitInteraction","description":"Represents a modal interaction","extends":[[["BaseInteraction"]]],"implements":[[["InteractionResponses"]]],"props":[{"name":"customId","description":"The custom id of the modal.","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message associated with this interaction","scope":"instance","nullable":true,"type":[[["Message"]]],"meta":{"line":46,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"components","description":"The components within the modal","scope":"instance","type":[[["Array","<"],["ActionRowModalData",">"]]],"meta":{"line":56,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"fields","description":"The fields within the modal","scope":"instance","type":[[["ModalSubmitFields"]]],"meta":{"line":63,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":70,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":77,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":84,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":91,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"isFromMessage","description":"Whether this is from a {@link MessageComponentInteraction}.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":118,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"transformComponent","description":"Transforms component data to discord.js-compatible data","scope":"static","params":[{"name":"rawComponent","description":"The data to transform","type":[[["*"]]]}],"returns":[[[["Array","<"],["ModalData",">"]]]],"meta":{"line":100,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":30,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"OAuth2Guild","description":"A partial guild received when using {@link GuildManager#fetch} to fetch multiple guilds.","extends":[[["BaseGuild"]]],"props":[{"name":"owner","description":"Whether the client user is the owner of the guild","scope":"instance","type":[[["boolean"]]],"meta":{"line":20,"file":"OAuth2Guild.js","path":"packages/discord.js/src/structures"}},{"name":"permissions","description":"The permissions that the client user has in this guild","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":27,"file":"OAuth2Guild.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The guild's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this guild","scope":"instance","type":[[["string"]]],"meta":{"line":30,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of this guild","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"features","description":"An array of features available to this guild","scope":"instance","type":[[["Array","<"],["GuildFeature",">"]]],"meta":{"line":44,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this guild was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":53,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this guild was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":63,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"partnered","description":"Whether this guild is partnered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"verified","description":"Whether this guild is verified","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":98,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"The URL to this guild's icon.","scope":"instance","inherits":"BaseGuild#iconURL","inherited":true,"params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":108,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this guild.","scope":"instance","inherits":"BaseGuild#fetch","inherited":true,"async":true,"returns":[[[["Promise","<"],["Guild",">"]]]],"meta":{"line":117,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","scope":"instance","inherits":"BaseGuild#toString","inherited":true,"returns":[[[["string"]]]],"meta":{"line":129,"file":"BaseGuild.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"OAuth2Guild.js","path":"packages/discord.js/src/structures"}},{"name":"PartialGroupDMChannel","description":"Represents a Partial Group DM Channel on Discord.","extends":[[["BaseChannel"]]],"implements":[[["TextBasedChannel"]]],"props":[{"name":"name","description":"The name of this Group DM Channel","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":26,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The hash of the channel icon","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"recipients","description":"The recipients of this Group DM Channel.","scope":"instance","type":[[["Array","<"],["PartialRecipient",">"]]],"meta":{"line":47,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messages","description":"A manager of the messages belonging to this channel","scope":"instance","type":[[["PartialGroupDMMessageManager"]]],"meta":{"line":54,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ownerId","description":"The user id of the owner of this Group DM Channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The channel's last message id, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":73,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":84,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"The URL to this channel's icon.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":96,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchOwner","description":"Fetches the owner of this Group DM Channel.","scope":"instance","params":[{"name":"options","description":"The options for fetching the user","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":106,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"BaseChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":114,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","extends":[[["Base"]]],"props":[{"name":"channel","description":"The GuildChannel this overwrite is for","scope":"instance","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":18,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The overwrite's id, either a {@link User} or a {@link Role} id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":36,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of this overwrite","scope":"instance","type":[[["OverwriteType"]]],"meta":{"line":44,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"deny","description":"The permissions that are denied for the user or role.","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":53,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"allow","description":"The permissions that are allowed for the user or role.","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":62,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this Permission Overwrite.","scope":"instance","examples":["// Update permission overwrites\npermissionOverwrites.edit({\n  SendMessages: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["PermissionOverwrites",">"]]]],"meta":{"line":80,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this Permission Overwrite.","scope":"instance","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["PermissionOverwrites",">"]]]],"meta":{"line":91,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"resolveOverwriteOptions","description":"Resolves bitfield permissions overwrites from an object.","scope":"static","params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"initialPermissions","description":"The initial permissions","type":[[["ResolvedOverwriteOptions"]]]}],"returns":[[[["ResolvedOverwriteOptions"]]]],"meta":{"line":131,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"resolve","description":"Resolves an overwrite into {@link APIOverwrite}.","scope":"static","params":[{"name":"overwrite","description":"The overwrite-like data to resolve","type":[[["OverwriteResolvable"]]]},{"name":"guild","description":"The guild to resolve from","optional":true,"type":[[["Guild"]]]}],"returns":[[[["RawOverwriteData"]]]],"meta":{"line":186,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"Poll","description":"Represents a Poll","extends":[[["Base"]]],"props":[{"name":"channelId","description":"The id of the channel that this poll is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":22,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel that this poll is in","scope":"instance","readonly":true,"type":[[["TextBasedChannel"]]],"meta":{"line":24,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"messageId","description":"The id of the message that started this poll","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":39,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message that started this poll","scope":"instance","readonly":true,"type":[[["Message"]]],"meta":{"line":41,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"answers","description":"The answers of this poll","scope":"instance","type":[[["Collection","<"],["number",", ("],["PollAnswer","|"],["PartialPollAnswer",")>"]]],"meta":{"line":56,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"resultsFinalized","description":"Whether this poll's results have been precisely counted","scope":"instance","type":[[["boolean"]]],"meta":{"line":79,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"allowMultiselect","description":"Whether this poll allows multiple answers","scope":"instance","type":[[["boolean"]]],"meta":{"line":95,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"layoutType","description":"The layout type of this poll","scope":"instance","type":[[["PollLayoutType"]]],"meta":{"line":106,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"expiresTimestamp","description":"The timestamp when this poll expires","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":117,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"question","description":"The media for this poll's question","scope":"instance","type":[[["PollQuestionMedia"]]],"meta":{"line":135,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"expiresAt","description":"The date when this poll expires","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":151,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this poll is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":161,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetch","description":"Fetches the message that started this poll, then updates the poll from the fetched message.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Poll",">"]]]],"meta":{"line":170,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"end","description":"Ends this poll.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":181,"file":"Poll.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"PollAnswer","description":"Represents an answer to a {@link Poll}","extends":[[["Base"]]],"props":[{"name":"poll","description":"The {@link Poll} this answer is part of","scope":"instance","readonly":true,"type":[[["Poll"]],[["PartialPoll"]]],"meta":{"line":17,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this answer","scope":"instance","type":[[["number"]]],"meta":{"line":31,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"voters","description":"The manager of the voters for this answer","scope":"instance","type":[[["PollAnswerVoterManager"]]],"meta":{"line":38,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"_emoji","description":"The raw emoji of this answer","scope":"instance","access":"private","nullable":true,"type":[[["APIPartialEmoji"]]],"meta":{"line":40,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"voteCount","description":"The amount of votes this answer has","scope":"instance","type":[[["number"]]],"meta":{"line":60,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"text","description":"The text of this answer","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":70,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of this answer","scope":"instance","nullable":true,"type":[[["GuildEmoji"]],[["Emoji"]]],"meta":{"line":82,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this poll answer is a partial.","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":93,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetchVoters","description":"Fetches the users that voted for this answer.","scope":"instance","deprecated":"Use {@link PollAnswerVoterManager#fetch} instead","params":[{"name":"options","description":"The options for fetching voters","optional":true,"default":"{}","type":[[["BaseFetchPollAnswerVotersOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]]],"meta":{"line":112,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"Presence","description":"Represents a user's presence.","extends":[[["Base"]]],"props":[{"name":"userId","description":"The presence's user id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":50,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this presence is in","scope":"instance","nullable":true,"type":[[["Guild"]]],"meta":{"line":57,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user of this presence","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The member of this presence","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":78,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"status","description":"The status of this presence","scope":"instance","type":[[["PresenceStatus"]]],"meta":{"line":89,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"activities","description":"The activities of this presence","scope":"instance","type":[[["Array","<"],["Activity",">"]]],"meta":{"line":100,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","scope":"instance","nullable":true,"type":[[["ClientPresenceStatusData"]]],"meta":{"line":118,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another.","scope":"instance","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":138,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":41,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"Activity","description":"Represents an activity that is part of a user's presence.","props":[{"name":"presence","description":"The presence of the Activity","scope":"instance","readonly":true,"type":[[["Presence"]]],"meta":{"line":161,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The activity's name","scope":"instance","type":[[["string"]]],"meta":{"line":175,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The activity status's type","scope":"instance","type":[[["ActivityType"]]],"meta":{"line":182,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"If the activity is being streamed, a link to the stream","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":189,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"details","description":"Details about the activity","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":196,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"state","description":"State of the activity","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":203,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The id of the application associated with this activity","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":210,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","scope":"instance","nullable":true,"type":[[["ActivityTimestamps"]]],"meta":{"line":225,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"party","description":"Party of the activity","scope":"instance","nullable":true,"type":[[["ActivityParty"]]],"meta":{"line":245,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"syncId","description":"The sync id of the activity\n<info>This property is not documented by Discord and represents the track id in spotify activities.</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":253,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"assets","description":"Assets for rich presence","scope":"instance","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":260,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"Flags that describe the activity","scope":"instance","type":[[["Readonly","<"],["ActivityFlagsBitField",">"]]],"meta":{"line":267,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"Emoji for a custom activity","scope":"instance","nullable":true,"type":[[["Emoji"]]],"meta":{"line":274,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"buttons","description":"The labels of the buttons of this rich presence","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":281,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"Creation date of the activity","scope":"instance","type":[[["number"]]],"meta":{"line":288,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the activity was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":317,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether this activity is equal to another activity.","scope":"instance","params":[{"name":"activity","description":"The activity to compare with","type":[[["Activity"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the activity's name instead of the Activity object.","scope":"instance","returns":[[[["string"]]]],"meta":{"line":326,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":159,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"activity","description":"The activity of the RichPresenceAssets","scope":"instance","readonly":true,"type":[[["Activity"]]],"meta":{"line":340,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"largeText","description":"Hover text for the large image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":354,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"smallText","description":"Hover text for the small image","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":361,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"largeImage","description":"The large image asset's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":368,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"smallImage","description":"The small image asset's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":375,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"smallImageURL","description":"Gets the URL of the small image asset","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":384,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"largeImageURL","description":"Gets the URL of the large image asset","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":405,"file":"Presence.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":338,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"PrimaryEntryPointCommandInteraction","description":"Represents a primary entry point command interaction.","extends":[[["CommandInteraction"]]],"props":[{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","inherits":"CommandInteraction#transformOption","inherited":true,"params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"CommandInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"CommandInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"CommandInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"CommandInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"CommandInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"CommandInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"CommandInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"CommandInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"CommandInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"PrimaryEntryPointCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.\nWill automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n{@link Client#event:messageDeleteBulk messageDeleteBulk}),\nchannel ({@link Client#event:channelDelete channelDelete}),\nthread ({@link Client#event:threadDelete threadDelete}), or\nguild ({@link Client#event:guildDelete guildDelete}) is deleted.","extends":[[["Collector"]]],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message upon which to collect reactions","scope":"instance","type":[[["Message"]]],"meta":{"line":37,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"The users that have reacted to this message","scope":"instance","type":[[["Collection"]]],"meta":{"line":44,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"total","description":"The total number of reactions collected","scope":"instance","type":[[["number"]]],"meta":{"line":51,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"endReason","description":"The reason this collector has ended with, or null if it hasn't ended yet","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":176,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this Collector","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":38,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","scope":"instance","type":[[["CollectorFilter"]]],"meta":{"line":53,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"options","description":"The options of this collector","scope":"instance","type":[[["CollectorOptions"]]],"meta":{"line":60,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","scope":"instance","type":[[["Collection"]]],"meta":{"line":67,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","scope":"instance","type":[[["boolean"]]],"meta":{"line":74,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":82,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","scope":"instance","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":90,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"_endReason","description":"The reason the collector ended","scope":"instance","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedTimestamp","description":"The timestamp at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":115,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastCollectedAt","description":"The Date at which this collector last collected an item","scope":"instance","nullable":true,"type":[[["Date"]]],"meta":{"line":123,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","scope":"instance","readonly":true,"type":[[["Promise"]]],"meta":{"line":200,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming reaction for possible collection.","scope":"instance","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":[{"types":[[["Snowflake"]],[["string"]]],"nullable":true}],"meta":{"line":116,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Handles a reaction deletion for possible disposal.","scope":"instance","params":[{"name":"reaction","description":"The reaction to possibly dispose of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"returns":[{"types":[[["Snowflake"]],[["string"]]],"nullable":true}],"meta":{"line":136,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"empty","description":"Empties this reaction collector.","scope":"instance","meta":{"line":163,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleMessageDeletion","description":"Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.","scope":"instance","access":"private","params":[{"name":"message","description":"The message that was deleted","type":[[["Message"]]]}],"returns":[[[["void"]]]],"meta":{"line":190,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleChannelDeletion","description":"Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.","scope":"instance","access":"private","params":[{"name":"channel","description":"The channel that was deleted","type":[[["GuildChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":203,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleThreadDeletion","description":"Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.","scope":"instance","access":"private","params":[{"name":"thread","description":"The thread that was deleted","type":[[["ThreadChannel"]]]}],"returns":[[[["void"]]]],"meta":{"line":216,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"_handleGuildDeletion","description":"Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.","scope":"instance","access":"private","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"returns":[[[["void"]]]],"meta":{"line":229,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":134,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","scope":"instance","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":176,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","scope":"instance","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":235,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"resetTimer","description":"Resets the collector's timeout and idle timer.","scope":"instance","inherits":"Collector#resetTimer","inherited":true,"params":[{"name":"options","description":"Options for resetting","optional":true,"type":[[["CollectorResetTimerOptions"]]]}],"meta":{"line":274,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","scope":"instance","inherits":"Collector#checkEnd","inherited":true,"returns":[{"types":[[["boolean"]]],"description":"Whether the collector ended or not"}],"meta":{"line":291,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"key","description":"Gets the collector key for a reaction.","scope":"static","params":[{"name":"reaction","description":"The message reaction to get the key for","type":[[["MessageReaction"]]]}],"returns":[[[["Snowflake"]],[["string"]]]],"meta":{"line":241,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}}],"events":[{"name":"create","description":"Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\nadded to the message, as opposed to {@link Collector#event:collect} which will\nbe emitted even when a reaction has already been added to the message.","params":[{"name":"reaction","description":"The reaction that was added","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":86,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"collect","description":"Emitted whenever a reaction is collected.","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":117,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"dispose","description":"Emitted when the reaction had all the users removed and the `dispose` option is set to true.","params":[{"name":"reaction","description":"The reaction that was disposed of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":137,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"remove","description":"Emitted when the reaction had one user removed and the `dispose` option is set to true.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":146,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"ignore","description":"Emitted whenever an element is not collected by the collector.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[[["*"]]]}],"meta":{"line":156,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":251,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":24,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","extends":[[["Emoji"]]],"props":[{"name":"reaction","description":"The message reaction this emoji refers to","scope":"instance","type":[[["MessageReaction"]]],"meta":{"line":21,"file":"ReactionEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"animated","description":"Whether or not the emoji is animated","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The emoji's name","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The emoji's id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":34,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":43,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":73,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":83,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"imageURL","description":"Returns a URL for the emoji or `null` if this is not a custom emoji.","scope":"instance","inherits":"Emoji#imageURL","inherited":true,"params":[{"name":"options","description":"Options for the emoji URL","optional":true,"default":"{}","type":[[["EmojiURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":54,"file":"Emoji.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","scope":"instance","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.cache.first();\nmsg.channel.send(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"Emoji.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"ReactionEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"Role","description":"Represents a role on Discord.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild that the role belongs to","scope":"instance","type":[[["Guild"]]],"meta":{"line":25,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The icon hash of the role","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"unicodeEmoji","description":"The unicode emoji for the role","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The role's id (unique to the guild it is part of)","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":50,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the role","scope":"instance","type":[[["string"]]],"meta":{"line":57,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"color","description":"The base 10 color of the role","scope":"instance","type":[[["number"]]],"meta":{"line":66,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","scope":"instance","type":[[["boolean"]]],"meta":{"line":75,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the role from the API","scope":"instance","type":[[["number"]]],"meta":{"line":84,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"permissions","description":"The permissions of the role","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":93,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","scope":"instance","type":[[["boolean"]]],"meta":{"line":102,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","scope":"instance","type":[[["boolean"]]],"meta":{"line":111,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags of this role","scope":"instance","type":[[["Readonly","<"],["RoleFlagsBitField",">"]]],"meta":{"line":124,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"tags","description":"The tags this role has","scope":"instance","nullable":true,"type":[[["Object"]]],"props":[{"name":"botId","description":"The id of the bot this role belongs to","optional":true,"type":[[["Snowflake"]]]},{"name":"integrationId","description":"The id of the integration this role belongs to","optional":true,"type":[[["Snowflake"]],[["string"]]]},{"name":"premiumSubscriberRole","description":"Whether this is the guild's premium subscription role","optional":true,"type":[[["true"]]]},{"name":"subscriptionListingId","description":"The id of this role's subscription SKU and listing","optional":true,"type":[[["Snowflake"]]]},{"name":"availableForPurchase","description":"Whether this role is available for purchase","optional":true,"type":[[["true"]]]},{"name":"guildConnections","description":"Whether this role is a guild's linked role","optional":true,"type":[[["true"]]]}],"meta":{"line":140,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":174,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the role was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":184,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":194,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The cached guild members that have this role","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":204,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":216,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the role in the role manager","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":229,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"comparePositionTo","description":"Compares this role's position to another role's.","scope":"instance","examples":["// Compare the position of a role to another\nconst roleCompare = role.comparePositionTo(otherRole);\nif (roleCompare >= 1) console.log(`${role.name} is higher than ${otherRole.name}`);"],"params":[{"name":"role","description":"Role to compare to this one","type":[[["RoleResolvable"]]]}],"returns":[{"types":[[["number"]]],"description":"Negative number if this role's position is lower (other role's is higher),\npositive number if this one is higher (other's is lower), 0 if equal"}],"meta":{"line":251,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the role.","scope":"instance","examples":["// Edit a role\nrole.edit({ name: 'new role' })\n  .then(updated => console.log(`Edited role name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["RoleEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":282,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\ntaking into account permission overwrites.","scope":"instance","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":295,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the role.","scope":"instance","examples":["// Set the name of the role\nrole.setName('new role')\n  .then(updated => console.log(`Updated role name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":313,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setColor","description":"Sets a new color for the role.","scope":"instance","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(updated => console.log(`Set color of role to ${updated.color}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":329,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setHoist","description":"Sets whether or not the role should be hoisted.","scope":"instance","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":345,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setPermissions","description":"Sets the permissions of the role.","scope":"instance","examples":["// Set the permissions of the role\nrole.setPermissions([PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers])\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);","// Remove all permissions from a role\nrole.setPermissions(0n)\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["PermissionResolvable"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":366,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setMentionable","description":"Sets whether this role is mentionable.","scope":"instance","examples":["// Make the role mentionable\nrole.setMentionable(true)\n  .then(updated => console.log(`Role updated ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":382,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setIcon","description":"Sets a new icon for the role.","scope":"instance","params":[{"name":"icon","description":"The icon for the role\n<warn>The `EmojiResolvable` should belong to the same guild as the role.\nIf not, pass the emoji's URL directly</warn>","nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]],[["EmojiResolvable"]]]},{"name":"reason","description":"Reason for changing the role's icon","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":395,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setUnicodeEmoji","description":"Sets a new unicode emoji for the role.","scope":"instance","examples":["// Set a new unicode emoji for the role\nrole.setUnicodeEmoji('🤖')\n  .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n  .catch(console.error);"],"params":[{"name":"unicodeEmoji","description":"The new unicode emoji for the role","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's unicode emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":411,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets the new position of the role.","scope":"instance","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the role","type":[[["number"]]]},{"name":"options","description":"Options for setting the position","optional":true,"type":[[["SetRolePositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":435,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the role.","scope":"instance","examples":["// Delete a role\nrole.delete('The role needed to go')\n  .then(deleted => console.log(`Deleted role ${deleted.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this role","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Role",">"]]]],"meta":{"line":450,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"iconURL","description":"A link to the role's icon","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":461,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","scope":"instance","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":473,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the role's mention instead of the Role object.","scope":"instance","examples":["// Logs: Role: <@&123456789012345678>\nconsole.log(`Role: ${role}`);"],"returns":[[[["string"]]]],"meta":{"line":496,"file":"Role.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"RoleSelectMenuComponent","description":"Represents a role select menu component","extends":[[["BaseSelectMenuComponent"]]],"props":[{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"RoleSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"RoleSelectMenuInteraction","description":"Represents a {@link ComponentType.RoleSelect} select menu interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"values","description":"An array of the selected role ids","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":21,"file":"RoleSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"roles","description":"Collection of the selected roles","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["Role","|"],["APIRole",")>"]]],"meta":{"line":28,"file":"RoleSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"RoleSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"SectionComponent","description":"Represents a section component","extends":[[["Component"]]],"props":[{"name":"components","description":"The components in this section","scope":"instance","readonly":true,"type":[[["Array","<"],["Component",">"]]],"meta":{"line":21,"file":"SectionComponent.js","path":"packages/discord.js/src/structures"}},{"name":"accessory","description":"The accessory component of this section","scope":"instance","readonly":true,"type":[[["Component"]]],"meta":{"line":29,"file":"SectionComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APISectionComponent"]]]],"meta":{"line":37,"file":"SectionComponent.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"SectionComponent.js","path":"packages/discord.js/src/structures"}},{"name":"SeparatorComponent","description":"Represents a separator component","extends":[[["Component"]]],"props":[{"name":"spacing","description":"The spacing of this separator","scope":"instance","readonly":true,"type":[[["SeparatorSpacingSize"]]],"meta":{"line":18,"file":"SeparatorComponent.js","path":"packages/discord.js/src/structures"}},{"name":"divider","description":"Whether this separator is a divider","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"SeparatorComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"SeparatorComponent.js","path":"packages/discord.js/src/structures"}},{"name":"SKU","description":"Represents a premium application SKU.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the SKU","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":20,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the SKU","scope":"instance","type":[[["SKUType"]]],"meta":{"line":27,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The id of the parent application","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":34,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The customer-facing name of the premium offering","scope":"instance","type":[[["string"]]],"meta":{"line":41,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"slug","description":"The system-generated URL slug based on this SKU's name","scope":"instance","type":[[["string"]]],"meta":{"line":48,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"Flags that describe the SKU","scope":"instance","type":[[["Readonly","<"],["SKUFlagsBitField",">"]]],"meta":{"line":55,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"SKU.js","path":"packages/discord.js/src/structures"}},{"name":"SoundboardSound","description":"Represents a soundboard sound.","extends":[[["Base"]]],"props":[{"name":"soundId","description":"The id of this soundboard sound","scope":"instance","type":[[["Snowflake"]],[["string"]]],"meta":{"line":22,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether this soundboard sound is available","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":34,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of this soundboard sound","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"volume","description":"The volume (a double) of this soundboard sound, from 0 to 1","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"_emoji","description":"The raw emoji data of this soundboard sound","scope":"instance","access":"private","nullable":true,"type":[[["Object"]]],"meta":{"line":68,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The guild id of this soundboard sound","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":82,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this soundboard sound","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":93,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this soundboard sound was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":105,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this soundboard sound was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":115,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of this soundboard sound","scope":"instance","readonly":true,"nullable":true,"type":[[["Emoji"]]],"meta":{"line":125,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this soundboard sound is part of","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":137,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"A link to this soundboard sound","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":147,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this soundboard sound.","scope":"instance","examples":["// Update the name of a soundboard sound\nsoundboardSound.edit({ name: 'new name' })\n  .then(sound => console.log(`Updated the name of the soundboard sound to ${sound.name}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildSoundboardSoundEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["SoundboardSound",">"]]]],"meta":{"line":162,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this soundboard sound.","scope":"instance","examples":["// Delete a soundboard sound\nsoundboardSound.delete()\n  .then(sound => console.log(`Deleted soundboard sound ${sound.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this soundboard sound","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["SoundboardSound",">"]]]],"meta":{"line":179,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this soundboard sound is the same as another one.","scope":"instance","params":[{"name":"other","description":"The soundboard sound to compare it to","type":[[["SoundboardSound"]],[["APISoundboardSound"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"SoundboardSound.js","path":"packages/discord.js/src/structures"}},{"name":"StageChannel","description":"Represents a guild stage channel on Discord.","extends":[[["BaseGuildVoiceChannel"]]],"props":[{"name":"topic","description":"The topic of the stage channel","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"stageInstance","description":"The stage instance of this stage channel, if it exists","scope":"instance","readonly":true,"nullable":true,"type":[[["StageInstance"]]],"meta":{"line":30,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":30,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rtcRegion","description":"The RTC region for this voice-based channel. This region is automatically selected if `null`.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"bitrate","description":"The bitrate of this voice-based channel","scope":"instance","type":[[["number"]]],"meta":{"line":53,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel.","scope":"instance","type":[[["number"]]],"meta":{"line":62,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"videoQualityMode","description":"The camera video quality mode of the channel.","scope":"instance","nullable":true,"type":[[["VideoQualityMode"]]],"meta":{"line":71,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":82,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel in seconds","scope":"instance","type":[[["number"]]],"meta":{"line":95,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The members in this voice-based channel","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":109,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"full","description":"Checks if the voice-based channel is full","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":126,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"joinable","description":"Whether the channel is joinable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":136,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"createStageInstance","description":"Creates a stage instance associated with this stage channel.","scope":"instance","params":[{"name":"options","description":"The options to create the stage instance","type":[[["StageInstanceCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":40,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","examples":["// Set a new channel topic\nstageChannel.setTopic('needs more rate limiting')\n  .then(channel => console.log(`Channel's new topic is ${channel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["StageChannel",">"]]]],"meta":{"line":56,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setBitrate","description":"Sets the bitrate of the channel.","scope":"instance","examples":["// Set the bitrate of a voice channel\nstageChannel.setBitrate(48_000)\n  .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["StageChannel",">"]]]],"meta":{"line":61,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setRTCRegion","description":"Sets the RTC region of the channel.","scope":"instance","examples":["// Set the RTC region to sydney\nstageChannel.setRTCRegion('sydney');","// Remove a fixed region for this channel - let Discord decide automatically\nstageChannel.setRTCRegion(null, 'We want to let Discord decide.');"],"params":[{"name":"rtcRegion","description":"The new region of the channel. Set to `null` to remove a specific region for the channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for modifying this region.","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["StageChannel",">"]]]],"meta":{"line":77,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","scope":"instance","examples":["// Set the user limit of a voice channel\nstageChannel.setUserLimit(42)\n  .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["StageChannel",">"]]]],"meta":{"line":94,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setVideoQualityMode","description":"Sets the camera video quality mode of the channel.","scope":"instance","params":[{"name":"videoQualityMode","description":"The new camera video quality mode.","type":[[["VideoQualityMode"]]]},{"name":"reason","description":"Reason for changing the camera video quality mode.","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["StageChannel",">"]]]],"meta":{"line":110,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":161,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":171,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#sendTyping","inherited":true,"implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","inherits":"BaseGuildVoiceChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","inherits":"BaseGuildVoiceChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","inherits":"BaseGuildVoiceChannel#createMessageComponentCollector","inherited":true,"implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"BaseGuildVoiceChannel#awaitMessageComponent","inherited":true,"implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","inherits":"BaseGuildVoiceChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#setRateLimitPerUser","inherited":true,"implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"BaseGuildVoiceChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"StageChannel.js","path":"packages/discord.js/src/structures"}},{"name":"StageInstance","description":"Represents a stage instance.","extends":[[["Base"]]],"props":[{"name":"id","description":"The stage instance's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":20,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild associated with the stage channel","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel associated with the stage channel","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of the stage instance","scope":"instance","type":[[["string"]]],"meta":{"line":50,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"privacyLevel","description":"The privacy level of the stage instance","scope":"instance","type":[[["StageInstancePrivacyLevel"]]],"meta":{"line":59,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"guildScheduledEventId","description":"The associated guild scheduled event id of this stage instance","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":68,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The stage channel associated with this stage instance","scope":"instance","readonly":true,"nullable":true,"type":[[["StageChannel"]]],"meta":{"line":80,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this stage instance belongs to","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":90,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"guildScheduledEvent","description":"The associated guild scheduled event of this stage instance","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildScheduledEvent"]]],"meta":{"line":100,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp this stage instances was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":155,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time this stage instance was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":165,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"edit","description":"Edits this stage instance.","scope":"instance","examples":["// Edit a stage instance\nstageInstance.edit({ topic: 'new topic' })\n .then(stageInstance => console.log(stageInstance))\n .catch(console.error)"],"params":[{"name":"options","description":"The options to edit the stage instance","type":[[["StageInstanceEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":115,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this stage instance.","scope":"instance","examples":["// Delete a stage instance\nstageInstance.delete()\n .then(stageInstance => console.log(stageInstance))\n .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":129,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets the topic of this stage instance.","scope":"instance","examples":["// Set topic of a stage instance\nstageInstance.setTopic('new topic')\n .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n .catch(console.error);"],"params":[{"name":"topic","description":"The topic for the stage instance","type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["StageInstance",">"]]]],"meta":{"line":145,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"StageInstance.js","path":"packages/discord.js/src/structures"}},{"name":"Sticker","description":"Represents a Sticker.","extends":[[["Base"]]],"props":[{"name":"id","description":"The sticker's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":27,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the sticker","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the sticker","scope":"instance","nullable":true,"type":[[["StickerType"]]],"meta":{"line":46,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"format","description":"The format of the sticker","scope":"instance","type":[[["StickerFormatType"]]],"meta":{"line":57,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the sticker","scope":"instance","type":[[["string"]]],"meta":{"line":66,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"packId","description":"The id of the pack the sticker is from, for standard stickers","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":75,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"tags","description":"Autocomplete/suggestions for the sticker","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":86,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"available","description":"Whether or not the guild sticker is available","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":97,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild that owns this sticker","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":108,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user that uploaded the guild sticker","scope":"instance","nullable":true,"type":[[["User"]]],"meta":{"line":119,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"sortValue","description":"The standard sticker's sort order within its pack","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":130,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the sticker was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":142,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the sticker was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":152,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this sticker is partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":162,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild that owns this sticker","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":172,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"A link to the sticker\n<info>If the sticker's format is {@link StickerFormatType.Lottie}, it returns\nthe URL of the Lottie JSON file.</info>","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":184,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetch","description":"Fetches this sticker.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Sticker",">"]]]],"meta":{"line":193,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"fetchPack","description":"Fetches the pack that contains this sticker.","scope":"instance","async":true,"returns":[{"types":[[["Promise","<?"],["StickerPack",">"]]],"description":"The sticker pack or `null` if this sticker does not belong to one."}],"meta":{"line":204,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"fetchUser","description":"Fetches the user who uploaded this sticker, if this is a guild sticker.","scope":"instance","async":true,"returns":[[[["Promise","<?"],["User",">"]]]],"meta":{"line":214,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the sticker.","scope":"instance","examples":["// Update the name of a sticker\nsticker.edit({ name: 'new name' })\n  .then(sticker => console.log(`Updated the name of the sticker to ${sticker.name}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildStickerEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Sticker",">"]]]],"meta":{"line":241,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the sticker.","scope":"instance","examples":["// Delete a sticker\nsticker.delete()\n  .then(sticker => console.log(`Deleted sticker ${sticker.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this sticker","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["Sticker",">"]]]],"meta":{"line":256,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether this sticker is the same as another one.","scope":"instance","params":[{"name":"other","description":"The sticker to compare it to","type":[[["Sticker"]],[["APISticker"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":267,"file":"Sticker.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"StickerPack","description":"Represents a pack of standard stickers.","extends":[[["Base"]]],"props":[{"name":"id","description":"The Sticker pack's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"stickers","description":"The stickers in the pack","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Sticker",">"]]],"meta":{"line":28,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the sticker pack","scope":"instance","type":[[["string"]]],"meta":{"line":35,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"skuId","description":"The id of the pack's SKU","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":42,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"coverStickerId","description":"The id of a sticker in the pack which is shown as the pack's icon","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":49,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of the sticker pack","scope":"instance","type":[[["string"]]],"meta":{"line":56,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"bannerId","description":"The id of the sticker pack's banner image","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":63,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the sticker was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the sticker was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":82,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"coverSticker","description":"The sticker which is shown as the pack's icon","scope":"instance","readonly":true,"nullable":true,"type":[[["Sticker"]]],"meta":{"line":92,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"bannerURL","description":"The URL to this sticker pack's banner.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":102,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"StickerPack.js","path":"packages/discord.js/src/structures"}},{"name":"StringSelectMenuComponent","description":"Represents a string select menu component","extends":[[["BaseSelectMenuComponent"]]],"props":[{"name":"options","description":"The options in this select menu","scope":"instance","readonly":true,"type":[[["Array","<"],["APISelectMenuOption",">"]]],"meta":{"line":17,"file":"StringSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"StringSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"StringSelectMenuInteraction","description":"Represents a {@link ComponentType.StringSelect} select menu interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"values","description":"The values selected","scope":"instance","type":[[["Array","<"],["string",">"]]],"meta":{"line":19,"file":"StringSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"StringSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"Subscription","description":"Represents a Subscription","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the subscription","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"userId","description":"The id of the user who subscribed","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":26,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"skuIds","description":"The SKU ids subscribed to","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":37,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"entitlementIds","description":"The entitlement ids granted for this subscription","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":44,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"currentPeriodStartTimestamp","description":"The timestamp the current subscription period will start at","scope":"instance","type":[[["number"]]],"meta":{"line":51,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"currentPeriodEndTimestamp","description":"The timestamp the current subscription period will end at","scope":"instance","type":[[["number"]]],"meta":{"line":58,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"status","description":"The current status of the subscription","scope":"instance","type":[[["SubscriptionStatus"]]],"meta":{"line":65,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"renewalSkuIds","description":"The SKU ids that this user will be subscribed to at renewal","scope":"instance","nullable":true,"type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":73,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"canceledTimestamp","description":"The timestamp of when the subscription was canceled","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":82,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"country","description":"ISO 3166-1 alpha-2 country code of the payment source used to purchase the subscription.\nMissing unless queried with a private OAuth scope.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":94,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"canceledAt","description":"The time the subscription was canceled","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":106,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"currentPeriodStartAt","description":"The time the current subscription period will start at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":116,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"currentPeriodEndAt","description":"The time the current subscription period will end at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":126,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"Subscription.js","path":"packages/discord.js/src/structures"}},{"name":"Team","description":"Represents a Client OAuth2 Application Team.","extends":[[["Base"]]],"props":[{"name":"id","description":"The Team's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":25,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the Team","scope":"instance","type":[[["string"]]],"meta":{"line":33,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"icon","description":"The Team's icon hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"ownerId","description":"The Team's owner id","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":53,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The Team's members","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["TeamMember",">"]]],"meta":{"line":63,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"owner","description":"The owner of this team","scope":"instance","readonly":true,"nullable":true,"type":[[["TeamMember"]]],"meta":{"line":77,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the team was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":87,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the team was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":97,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the team's icon.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":107,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Team's name instead of the\nTeam object.","scope":"instance","examples":["// Logs: Team name: My Team\nconsole.log(`Team name: ${team}`);"],"returns":[[[["string"]]]],"meta":{"line":120,"file":"Team.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"Team.js","path":"packages/discord.js/src/structures"}},{"name":"TeamMember","description":"Represents a Client OAuth2 Application Team Member.","extends":[[["Base"]]],"props":[{"name":"team","description":"The Team this member is part of","scope":"instance","type":[[["Team"]]],"meta":{"line":19,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"membershipState","description":"The permissions this Team Member has with regard to the team","scope":"instance","type":[[["TeamMemberMembershipState"]]],"meta":{"line":31,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user for this Team Member","scope":"instance","type":[[["User"]]],"meta":{"line":40,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"role","description":"The role of this Team Member","scope":"instance","type":[[["TeamMemberRole"]]],"meta":{"line":49,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The Team Member's id","scope":"instance","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":59,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the team member's mention instead of the\nTeamMember object.","scope":"instance","examples":["// Logs: Team Member's mention: <@123456789012345678>\nconsole.log(`Team Member's mention: ${teamMember}`);"],"returns":[[[["string"]]]],"meta":{"line":72,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"TeamMember.js","path":"packages/discord.js/src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":[[["BaseGuildTextChannel"]]],"props":[{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel in seconds","scope":"instance","type":[[["number"]]],"meta":{"line":20,"file":"TextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildTextThreadManager"]]],"meta":{"line":30,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":37,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of the text channel","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":51,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":64,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":73,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":82,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["TextChannel",">"]]]],"meta":{"line":31,"file":"TextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","inherits":"BaseGuildTextChannel#setDefaultAutoArchiveDuration","inherited":true,"params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["TextChannel",">"]]]],"meta":{"line":108,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setType","description":"Sets the type of this channel.\n<info>Only conversion between {@link TextChannel} and {@link AnnouncementChannel} is supported.</info>","scope":"instance","inherits":"BaseGuildTextChannel#setType","inherited":true,"params":[{"name":"type","description":"The new channel type","type":[[["ChannelTypeGuildText"]],[["ChannelTypeGuildAnnouncement"]]]},{"name":"reason","description":"Reason for changing the channel's type","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":120,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","inherits":"BaseGuildTextChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":136,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"BaseGuildTextChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":178,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","inherits":"BaseGuildTextChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether or not to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":189,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","inherits":"BaseGuildTextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","inherits":"BaseGuildTextChannel#sendTyping","inherited":true,"implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","inherits":"BaseGuildTextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","inherits":"BaseGuildTextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","inherits":"BaseGuildTextChannel#createMessageComponentCollector","inherited":true,"implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"BaseGuildTextChannel#awaitMessageComponent","inherited":true,"implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","inherits":"BaseGuildTextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"BaseGuildTextChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"BaseGuildTextChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"BaseGuildTextChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"TextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"TextDisplayComponent","description":"Represents a text display component","extends":[[["Component"]]],"props":[{"name":"content","description":"The content of this text display","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"TextDisplayComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"TextDisplayComponent.js","path":"packages/discord.js/src/structures"}},{"name":"TextInputComponent","description":"Represents a text input component.","extends":[[["Component"]]],"props":[{"name":"customId","description":"The custom id of this text input","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"TextInputComponent.js","path":"packages/discord.js/src/structures"}},{"name":"value","description":"The value for this text input","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":27,"file":"TextInputComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"TextInputComponent.js","path":"packages/discord.js/src/structures"}},{"name":"ThreadChannel","description":"Represents a thread channel on Discord.","extends":[[["BaseChannel"]]],"implements":[[["TextBasedChannel"]]],"props":[{"name":"guild","description":"The guild the thread is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":29,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":36,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ownerId","description":"The id of the member who created this thread","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":43,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messages","description":"A manager of the messages sent to this thread","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":50,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A manager of the members that are part of this thread","scope":"instance","type":[[["ThreadMemberManager"]]],"meta":{"line":57,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the thread","scope":"instance","type":[[["string"]]],"meta":{"line":72,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the parent channel of this thread","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":85,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"locked","description":"Whether the thread is locked","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":96,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"invitable","description":"Whether members without the {@link PermissionFlagsBits.ManageThreads} permission\ncan invite other members to this thread.\n<info>This property is always `null` in public threads.</info>","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":105,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"archived","description":"Whether the thread is archived","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":112,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"autoArchiveDuration","description":"The amount of time (in minutes) after which the thread will automatically archive in case of no recent activity","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":119,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"archiveTimestamp","description":"The timestamp when the thread's archive status was last changed\n<info>If the thread was never archived or unarchived, this is the timestamp at which the thread was\ncreated</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":128,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in this thread, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":150,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":161,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this thread in seconds","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":172,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messageCount","description":"The approximate count of messages in this thread\n<info>Threads created before July 1, 2022 may have an inaccurate count.\nIf you need an approximate value higher than that, use `ThreadChannel#messages.cache.size`</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":185,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberCount","description":"The approximate count of users in this thread\n<info>This stops counting at 50. If you need an approximate value higher than that, use\n`ThreadChannel#members.cache.size`</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":198,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"totalMessageSent","description":"The number of messages ever sent in a thread, similar to {@link ThreadChannel#messageCount} except it\nwill not decrement whenever a message is deleted","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":210,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"appliedTags","description":"The tags applied to this thread","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":224,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp when this thread was created. This isn't available for threads\ncreated before 2022-01-09","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":237,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildMembers","description":"A collection of associated guild member objects of this thread's members","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":247,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"archivedAt","description":"The time at which this thread's archive status was last changed\n<info>If the thread was never archived or unarchived, this is the time at which the thread was created</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":258,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the thread was created at","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":268,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The parent channel of this thread","scope":"instance","readonly":true,"nullable":true,"type":[[["AnnouncementChannel"]],[["TextChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":278,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"joined","description":"Whether the client user is a member of the thread.","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":526,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"editable","description":"Whether the thread is editable by the client user (name, archived, autoArchiveDuration)","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":536,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"joinable","description":"Whether the thread is joinable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":549,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the thread is manageable by the client user, for deleting or editing rateLimitPerUser or locked.","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":566,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the thread is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":584,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"sendable","description":"Whether the client user can send messages in this thread","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":597,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"unarchivable","description":"Whether the thread is unarchivable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":617,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"join","description":"Makes the client user join the thread.","scope":"instance","async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":287,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"leave","description":"Makes the client user leave the thread.","scope":"instance","async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":297,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this thread's parent channel, taking overwrites into\naccount.","scope":"instance","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":311,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchOwner","description":"Fetches the owner of this thread. If the thread member object isn't needed,\nuse {@link ThreadChannel#ownerId} instead.","scope":"instance","params":[{"name":"options","description":"Options for fetching the owner","optional":true,"type":[[["FetchThreadOwnerOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadMember",">"]]]],"meta":{"line":329,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchStarterMessage","description":"Fetches the message that started this thread, if any.\n<info>The `Promise` will reject if the original message in a forum post is deleted\nor when the original message in the parent channel is deleted.\nIf you just need the id of that message, use {@link BaseChannel#id} instead.</info>","scope":"instance","params":[{"name":"options","description":"Additional options for this fetch","optional":true,"type":[[["BaseFetchOptions"]]]}],"async":true,"returns":[[[["Promise","<?"],["Message","<"],["true",">>"]]]],"meta":{"line":342,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this thread.","scope":"instance","examples":["// Edit a thread\nthread.edit({ name: 'new-thread' })\n  .then(editedThread => console.log(editedThread))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["ThreadEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":375,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setArchived","description":"Sets whether the thread is archived.","scope":"instance","examples":["// Archive the thread\nthread.setArchived(true)\n  .then(newThread => console.log(`Thread is now ${newThread.archived ? 'archived' : 'active'}`))\n  .catch(console.error);"],"params":[{"name":"archived","description":"Whether the thread is archived","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for archiving or unarchiving","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":405,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setAutoArchiveDuration","description":"Sets the duration after which the thread will automatically archive in case of no recent activity.","scope":"instance","examples":["// Set the thread's auto archive time to 1 hour\nthread.setAutoArchiveDuration(ThreadAutoArchiveDuration.OneHour)\n  .then(newThread => {\n    console.log(`Thread will now archive after ${newThread.autoArchiveDuration} minutes of inactivity`);\n   });\n  .catch(console.error);"],"params":[{"name":"autoArchiveDuration","description":"The amount of time after which the thread\nshould automatically archive in case of no recent activity","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":424,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setInvitable","description":"Sets whether members without the {@link PermissionFlagsBits.ManageThreads} permission\ncan invite other members to this thread.","scope":"instance","params":[{"name":"invitable","description":"Whether non-moderators can invite non-moderators to this thread","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing invite","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":436,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setLocked","description":"Sets whether the thread can be **unarchived** by anyone with the\n{@link PermissionFlagsBits.SendMessages} permission. When a thread is locked, only members with the\n{@link PermissionFlagsBits.ManageThreads} permission can unarchive it.","scope":"instance","examples":["// Set the thread to locked\nthread.setLocked(true)\n  .then(newThread => console.log(`Thread is now ${newThread.locked ? 'locked' : 'unlocked'}`))\n  .catch(console.error);"],"params":[{"name":"locked","description":"Whether the thread is locked","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for locking or unlocking the thread","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":458,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for this thread.","scope":"instance","examples":["// Change the thread's name\nthread.setName('not_general')\n  .then(newThread => console.log(`Thread's new name is ${newThread.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the thread","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the thread's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":474,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this thread.","scope":"instance","implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the thread's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":485,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setAppliedTags","description":"Set the applied tags for this channel (only applicable to forum threads)","scope":"instance","params":[{"name":"appliedTags","description":"The tags to set for this channel","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"reason","description":"Reason for changing the thread's applied tags","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":496,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"pin","description":"Pins this thread from the forum channel (only applicable to forum threads).","scope":"instance","params":[{"name":"reason","description":"Reason for pinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":506,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"unpin","description":"Unpins this thread from the forum channel (only applicable to forum threads).","scope":"instance","params":[{"name":"reason","description":"Reason for unpinning","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":516,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this thread.","scope":"instance","examples":["// Delete the thread\nthread.delete('cleaning out old threads')\n  .then(deletedThread => console.log(deletedThread))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this thread","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["ThreadChannel",">"]]]],"meta":{"line":632,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":20,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ThreadMember","description":"Represents a Member for a Thread.","extends":[[["Base"]]],"props":[{"name":"thread","description":"The thread that this member is a part of","scope":"instance","type":[[["ThreadChannel"]]],"meta":{"line":20,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member last joined the thread at","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags for this thread member. This will be `null` if partial.","scope":"instance","nullable":true,"type":[[["ThreadMemberFlagsBitField"]]],"meta":{"line":34,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of the thread member","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The guild member associated with this thread member.","scope":"instance","access":"private","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":57,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this thread member is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":69,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"guildMember","description":"The guild member associated with this thread member","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":79,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"joinedAt","description":"The last time this member joined the thread","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":89,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user associated with this thread member","scope":"instance","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":99,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the client user can manage this thread member","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":109,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"remove","description":"Removes this member from the thread.","scope":"instance","async":true,"returns":[[[["Promise","<"],["ThreadMember",">"]]]],"meta":{"line":118,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"ThreadMember.js","path":"packages/discord.js/src/structures"}},{"name":"ThreadOnlyChannel","description":"Represents symbols utilized by thread-only channels.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"abstract":true,"props":[{"name":"threads","description":"A manager of the threads belonging to this channel","scope":"instance","type":[[["GuildForumThreadManager"]]],"meta":{"line":54,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"availableTags","description":"The set of tags that can be used in this channel.","scope":"instance","type":[[["Array","<"],["GuildForumTag",">"]]],"meta":{"line":67,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultReactionEmoji","description":"The emoji to show in the add reaction button on a thread in a guild forum channel","scope":"instance","nullable":true,"type":[[["DefaultReactionEmoji"]]],"meta":{"line":78,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode) to set on newly created threads in a channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":102,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for newly created threads in this channel.","scope":"instance","nullable":true,"type":[[["ThreadAutoArchiveDuration"]]],"meta":{"line":113,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If this channel is considered NSFW.","scope":"instance","type":[[["boolean"]]],"meta":{"line":124,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"topic","description":"The topic of this channel.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":135,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"defaultSortOrder","description":"The default sort order mode used to order posts","scope":"instance","nullable":true,"type":[[["SortOrderType"]]],"meta":{"line":144,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"A collection of cached members of this channel, mapped by their ids.\nMembers that can view this channel, if the channel is text-based.\nMembers in the channel, if the channel is voice-based.","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":296,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setAvailableTags","description":"Sets the available tags for this forum channel","scope":"instance","params":[{"name":"availableTags","description":"The tags to set as available in this channel","type":[[["Array","<"],["GuildForumTagData",">"]]]},{"name":"reason","description":"Reason for changing the available tags","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":157,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultReactionEmoji","description":"Sets the default reaction emoji for this channel","scope":"instance","params":[{"name":"defaultReactionEmoji","description":"The emoji to set as the default reaction emoji","nullable":true,"type":[[["DefaultReactionEmoji"]]]},{"name":"reason","description":"Reason for changing the default reaction emoji","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":168,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultThreadRateLimitPerUser","description":"Sets the default rate limit per user (slowmode) for new threads in this channel","scope":"instance","params":[{"name":"defaultThreadRateLimitPerUser","description":"The rate limit to set on newly created threads in this channel","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the default rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":179,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":194,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","scope":"instance","params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":205,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultAutoArchiveDuration","description":"Sets the default auto archive duration for all newly created threads in this channel.","scope":"instance","params":[{"name":"defaultAutoArchiveDuration","description":"The new default auto archive duration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for changing the channel's default auto archive duration","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":216,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","scope":"instance","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":232,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setDefaultSortOrder","description":"Sets the default sort order mode used to order posts","scope":"instance","params":[{"name":"defaultSortOrder","description":"The default sort order mode to set on this channel","nullable":true,"type":[[["SortOrderType"]]]},{"name":"reason","description":"Reason for changing the default sort order","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":243,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":45,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ThumbnailComponent","description":"Represents a thumbnail component","extends":[[["Component"]]],"props":[{"name":"media","description":"The media associated with this thumbnail","scope":"instance","readonly":true,"type":[[["UnfurledMediaItem"]]],"meta":{"line":21,"file":"ThumbnailComponent.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this thumbnail","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":30,"file":"ThumbnailComponent.js","path":"packages/discord.js/src/structures"}},{"name":"spoiler","description":"Whether this thumbnail is spoilered","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":40,"file":"ThumbnailComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","returns":[[[["APIThumbnailComponent"]]]],"meta":{"line":49,"file":"ThumbnailComponent.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"ThumbnailComponent.js","path":"packages/discord.js/src/structures"}},{"name":"Typing","description":"Represents a typing state for a user in a channel.","extends":[[["Base"]]],"props":[{"name":"channel","description":"The channel the status is from","scope":"instance","type":[[["TextBasedChannels"]]],"meta":{"line":19,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who is typing","scope":"instance","type":[[["User"]]],"meta":{"line":26,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"startedTimestamp","description":"The UNIX timestamp in milliseconds the user started typing at","scope":"instance","type":[[["number"]]],"meta":{"line":38,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"startedAt","description":"The time the user started typing at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":57,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild the status is from","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":67,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The member who is typing","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":77,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"inGuild","description":"Indicates whether the status is received from a guild.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":47,"file":"Typing.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"Typing.js","path":"packages/discord.js/src/structures"}},{"name":"UnfurledMediaItem","description":"Represents a media item in a component","props":[{"name":"data","description":"The API data associated with this media item","scope":"instance","type":[[["APIUnfurledMediaItem"]]],"meta":{"line":13,"file":"UnfurledMediaItem.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this media item","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":22,"file":"UnfurledMediaItem.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"toJSON","description":"Returns the API-compatible JSON for this media item","scope":"instance","returns":[[[["APIUnfurledMediaItem"]]]],"meta":{"line":31,"file":"UnfurledMediaItem.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":6,"file":"UnfurledMediaItem.js","path":"packages/discord.js/src/structures"}},{"name":"User","description":"Represents a user on Discord.","extends":[[["Base"]]],"props":[{"name":"id","description":"The user's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":23,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"username","description":"The username of the user","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"globalName","description":"The global name of this user","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":52,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"discriminator","description":"The discriminator of this user\n<info>`'0'`, or a 4-digit stringified number if they're using the legacy username system</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":75,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatar","description":"The user avatar's hash","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":86,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"banner","description":"The user banner's hash\n<info>The user must be force fetched for this property to be present or be updated</info>","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"accentColor","description":"The base 10 accent color of the user's banner\n<info>The user must be force fetched for this property to be present or be updated</info>","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":110,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"system","description":"Whether the user is an Official Discord System user (part of the urgent message system)","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":121,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags for this user","scope":"instance","nullable":true,"type":[[["UserFlagsBitField"]]],"meta":{"line":132,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationData","description":"The user avatar decoration's data","scope":"instance","nullable":true,"type":[[["AvatarDecorationData"]]],"meta":{"line":147,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this User is a partial","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":162,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":172,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the user was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":182,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":211,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"hexAccentColor","description":"The hexadecimal version of the user accent color, with a leading hash\n<info>The user must be force fetched for this property to be present</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":234,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"tag","description":"The tag of this user\n<info>This user's username, or their legacy tag (e.g. `hydrabolt#0001`)\nif they're using the legacy username system</info>","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":257,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"displayName","description":"The global name of this user, or their username if they don't have one","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":271,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","scope":"instance","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":281,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the user's avatar.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":192,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"avatarDecorationURL","description":"A link to the user's avatar decoration.","scope":"instance","returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":201,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[[["string"]]]],"meta":{"line":223,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"bannerURL","description":"A link to the user's banner. See {@link User#banner} for more info","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":245,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":291,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","scope":"instance","async":true,"returns":[[[["Promise","<"],["DMChannel",">"]]]],"meta":{"line":300,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this user.","scope":"instance","examples":["// Send a direct message\nuser.send('Hello!')\n  .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":315,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if the user is equal to another.\nIt compares id, username, discriminator, avatar, banner, accent color, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","scope":"instance","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":329,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"_equals","description":"Compares the user with an API user object","scope":"instance","access":"private","params":[{"name":"user","description":"The API user object to compare","type":[[["APIUser"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":352,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this user.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["User",">"]]]],"meta":{"line":376,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","scope":"instance","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[[["string"]]]],"meta":{"line":388,"file":"User.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":14,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"UserContextMenuCommandInteraction","description":"Represents a user context menu interaction.","extends":[[["ContextMenuCommandInteraction"]]],"props":[{"name":"targetUser","description":"The target user from this interaction","scope":"instance","readonly":true,"type":[[["User"]]],"meta":{"line":17,"file":"UserContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"targetMember","description":"The target member from this interaction","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]],[["APIGuildMember"]]],"meta":{"line":27,"file":"UserContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"options","description":"The target of the interaction, parsed into options","scope":"instance","type":[[["CommandInteractionOptionResolver"]]],"meta":{"line":24,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"targetId","description":"The id of the target of this interaction","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":35,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":19,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandId","description":"The invoked application command's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":31,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandName","description":"The invoked application command's name","scope":"instance","type":[[["string"]]],"meta":{"line":38,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandType","description":"The invoked application command's type","scope":"instance","type":[[["ApplicationCommandType"]]],"meta":{"line":45,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"commandGuildId","description":"The id of the guild the invoked application command is registered to","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":52,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":59,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":66,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":73,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"command","description":"The invoked application command, if it was fetched before","scope":"instance","nullable":true,"type":[[["ApplicationCommand"]]],"meta":{"line":88,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"resolveContextMenuOptions","description":"Resolves and transforms options received from the API for a context menu interaction.","scope":"instance","access":"private","inherits":"ContextMenuCommandInteraction#resolveContextMenuOptions","inherited":true,"params":[{"name":"data","description":"The interaction data","type":[[["APIApplicationCommandInteractionData"]]]}],"returns":[[[["Array","<"],["CommandInteractionOption",">"]]]],"meta":{"line":45,"file":"ContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"transformOption","description":"Transforms an option received from the API.","scope":"instance","access":"private","inherits":"CommandInteraction#transformOption","inherited":true,"params":[{"name":"option","description":"The received option","type":[[["APIApplicationCommandOption"]]]},{"name":"resolved","description":"The resolved interaction data","type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionOption"]]]],"meta":{"line":132,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"CommandInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"CommandInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"CommandInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"CommandInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"CommandInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"CommandInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"CommandInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"CommandInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"CommandInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"UserContextMenuCommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"UserSelectMenuComponent","description":"Represents a user select menu component","extends":[[["BaseSelectMenuComponent"]]],"props":[{"name":"placeholder","description":"The placeholder for this select menu","scope":"instance","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":17,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"maxValues","description":"The maximum amount of options that can be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":27,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"minValues","description":"The minimum amount of options that must be selected","scope":"instance","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of this select menu","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"disabled","description":"Whether this select menu is disabled","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":57,"file":"BaseSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"data","description":"The API data associated with this component","scope":"instance","type":[[["APIMessageComponent"]]],"meta":{"line":15,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of this component","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":24,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the component","scope":"instance","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":34,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"equals","description":"Whether or not the given components are equal","scope":"instance","inherits":"Component#equals","inherited":true,"params":[{"name":"other","description":"The component to compare against","type":[[["Component"]],[["APIMessageComponent"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":44,"file":"Component.js","path":"packages/discord.js/src/structures"}},{"name":"toJSON","description":"Returns the API-compatible JSON for this component","scope":"instance","inherits":"Component#toJSON","inherited":true,"returns":[[[["APIMessageComponent"]]]],"meta":{"line":57,"file":"Component.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"UserSelectMenuComponent.js","path":"packages/discord.js/src/structures"}},{"name":"UserSelectMenuInteraction","description":"Represents a {@link ComponentType.UserSelect} select menu interaction.","extends":[[["MessageComponentInteraction"]]],"props":[{"name":"values","description":"An array of the selected user ids","scope":"instance","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":22,"file":"UserSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"users","description":"Collection of the selected users","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":29,"file":"UserSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"Collection of the selected members","scope":"instance","type":[[["Collection","<"],["Snowflake",", ("],["GuildMember","|"],["APIGuildMember",")>"]]],"meta":{"line":36,"file":"UserSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel this interaction was sent in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":21,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"message","description":"The message to which the component was attached","scope":"instance","type":[[["Message"]]],"meta":{"line":33,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"customId","description":"The custom id of the component which was interacted with","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"componentType","description":"The type of component which was interacted with","scope":"instance","type":[[["ComponentType"]]],"meta":{"line":47,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"deferred","description":"Whether the reply to this interaction has been deferred","scope":"instance","type":[[["boolean"]]],"meta":{"line":54,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ephemeral","description":"Whether the reply to this interaction is ephemeral","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"replied","description":"Whether this interaction has already been replied to","scope":"instance","type":[[["boolean"]]],"meta":{"line":68,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"webhook","description":"An associated interaction webhook, can be used to further interact with this interaction","scope":"instance","type":[[["InteractionWebhook"]]],"meta":{"line":75,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"component","description":"The component which was interacted with","scope":"instance","readonly":true,"type":[[["MessageActionRowComponent"]],[["APIComponentInMessageActionRow"]]],"meta":{"line":97,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The interaction's type","scope":"instance","type":[[["InteractionType"]]],"meta":{"line":25,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The interaction's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":32,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The interaction's token","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":62,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"user","description":"The user who created this interaction","scope":"instance","type":[[["User"]]],"meta":{"line":69,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it","scope":"instance","nullable":true,"type":[[["GuildMember"]],[["APIInteractionGuildMember"]]],"meta":{"line":76,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"version","description":"The version","scope":"instance","type":[[["number"]]],"meta":{"line":83,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"appPermissions","description":"Set of permissions the application or bot has within the channel the interaction was sent from","scope":"instance","type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":90,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"The permissions of the member, if one exists, in the channel this interaction was executed in","scope":"instance","nullable":true,"type":[[["Readonly","<"],["PermissionsBitField",">"]]],"meta":{"line":97,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"locale","description":"The locale of the user who invoked this interaction","scope":"instance","type":[[["Locale"]]],"meta":{"line":106,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guildLocale","description":"The preferred locale from the guild this interaction was sent in","scope":"instance","nullable":true,"type":[[["Locale"]]],"meta":{"line":113,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"entitlements","description":"The entitlements for the invoking user, representing access to premium SKUs","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["Entitlement",">"]]],"meta":{"line":120,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"authorizingIntegrationOwners","description":"Mapping of installation contexts that the interaction was authorized for the related user or guild ids","see":["{@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}"],"scope":"instance","type":[[["APIAuthorizingIntegrationOwnersMap"]]],"meta":{"line":131,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"context","description":"Context where the interaction was triggered from","scope":"instance","nullable":true,"type":[[["InteractionContextType"]]],"meta":{"line":138,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"attachmentSizeLimit","description":"Attachment size limit in bytes","scope":"instance","type":[[["number"]]],"meta":{"line":145,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":154,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the interaction was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":164,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["TextBasedChannels"]]],"meta":{"line":174,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"guild","description":"The guild this interaction was sent in","scope":"instance","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":184,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#deferReply","inherited":true,"implements":["InteractionResponses#deferReply"],"examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","inherits":"MessageComponentInteraction#reply","inherited":true,"implements":["InteractionResponses#reply"],"examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","inherits":"MessageComponentInteraction#fetchReply","inherited":true,"implements":["InteractionResponses#fetchReply"],"examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","inherits":"MessageComponentInteraction#editReply","inherited":true,"implements":["InteractionResponses#editReply"],"examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","inherits":"MessageComponentInteraction#deleteReply","inherited":true,"implements":["InteractionResponses#deleteReply"],"examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","inherits":"MessageComponentInteraction#followUp","inherited":true,"implements":["InteractionResponses#followUp"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","inherits":"MessageComponentInteraction#deferUpdate","inherited":true,"implements":["InteractionResponses#deferUpdate"],"examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","inherits":"MessageComponentInteraction#update","inherited":true,"implements":["InteractionResponses#update"],"examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","inherits":"MessageComponentInteraction#launchActivity","inherited":true,"implements":["InteractionResponses#launchActivity"],"params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","inherits":"MessageComponentInteraction#showModal","inherited":true,"implements":["InteractionResponses#showModal"],"params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"MessageComponentInteraction#awaitModalSubmit","inherited":true,"implements":["InteractionResponses#awaitModalSubmit"],"examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"inGuild","description":"Indicates whether this interaction is received from a guild.","scope":"instance","inherits":"BaseInteraction#inGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":193,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inCachedGuild","description":"Indicates whether this interaction is received from a cached guild.","scope":"instance","inherits":"BaseInteraction#inCachedGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":202,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"inRawGuild","description":"Indicates whether or not this interaction is received from an uncached guild.","scope":"instance","inherits":"BaseInteraction#inRawGuild","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":211,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isAutocomplete","description":"Indicates whether this interaction is an {@link AutocompleteInteraction}","scope":"instance","inherits":"BaseInteraction#isAutocomplete","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":220,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isCommand","description":"Indicates whether this interaction is a {@link CommandInteraction}","scope":"instance","inherits":"BaseInteraction#isCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":229,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChatInputCommand","description":"Indicates whether this interaction is a {@link ChatInputCommandInteraction}.","scope":"instance","inherits":"BaseInteraction#isChatInputCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":238,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isContextMenuCommand","description":"Indicates whether this interaction is a {@link ContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":247,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isPrimaryEntryPointCommand","description":"Indicates whether this interaction is a {@link PrimaryEntryPointCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isPrimaryEntryPointCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":259,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageComponent","description":"Indicates whether this interaction is a {@link MessageComponentInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageComponent","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":270,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isModalSubmit","description":"Indicates whether this interaction is a {@link ModalSubmitInteraction}","scope":"instance","inherits":"BaseInteraction#isModalSubmit","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":279,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserContextMenuCommand","description":"Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isUserContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":288,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMessageContextMenuCommand","description":"Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}","scope":"instance","inherits":"BaseInteraction#isMessageContextMenuCommand","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":297,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isButton","description":"Indicates whether this interaction is a {@link ButtonInteraction}.","scope":"instance","inherits":"BaseInteraction#isButton","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":306,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isSelectMenu","description":"Indicates whether this interaction is a select menu of any known type.","scope":"instance","inherits":"BaseInteraction#isSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":315,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isStringSelectMenu","description":"Indicates whether this interaction is a {@link StringSelectMenuInteraction}.","scope":"instance","inherits":"BaseInteraction#isStringSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":324,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isUserSelectMenu","description":"Indicates whether this interaction is a {@link UserSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isUserSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":333,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRoleSelectMenu","description":"Indicates whether this interaction is a {@link RoleSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isRoleSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":342,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelSelectMenu","description":"Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isChannelSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":351,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isMentionableSelectMenu","description":"Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}","scope":"instance","inherits":"BaseInteraction#isMentionableSelectMenu","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":360,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"isRepliable","description":"Indicates whether this interaction can be replied to.","scope":"instance","inherits":"BaseInteraction#isRepliable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":369,"file":"BaseInteraction.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"UserSelectMenuInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":[[["BaseGuildVoiceChannel"]]],"props":[{"name":"joinable","description":"Whether the channel is joinable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":29,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":23,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","scope":"instance","type":[[["boolean"]]],"meta":{"line":30,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rtcRegion","description":"The RTC region for this voice-based channel. This region is automatically selected if `null`.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"bitrate","description":"The bitrate of this voice-based channel","scope":"instance","type":[[["number"]]],"meta":{"line":53,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel.","scope":"instance","type":[[["number"]]],"meta":{"line":62,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"videoQualityMode","description":"The camera video quality mode of the channel.","scope":"instance","nullable":true,"type":[[["VideoQualityMode"]]],"meta":{"line":71,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessageId","description":"The last message id sent in the channel, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":82,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for this channel in seconds","scope":"instance","type":[[["number"]]],"meta":{"line":95,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The members in this voice-based channel","scope":"instance","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":109,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"full","description":"Checks if the voice-based channel is full","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":126,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","scope":"instance","type":[[["Guild"]]],"meta":{"line":34,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The id of the guild the channel is in","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":41,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionOverwrites","description":"A manager of permission overwrites that belong to this channel","scope":"instance","type":[[["PermissionOverwriteManager"]]],"meta":{"line":47,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild channel","scope":"instance","type":[[["string"]]],"meta":{"line":61,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from Discord","scope":"instance","type":[[["number"]]],"meta":{"line":70,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parentId","description":"The id of the category parent of this channel","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":83,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"parent","description":"The category parent of this channel","scope":"instance","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":108,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"position","description":"The position of the channel","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":160,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":453,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":463,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":484,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the channel","scope":"instance","type":[[["ChannelType"]]],"meta":{"line":25,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"flags","description":"The flags that are applied to the channel.\n<info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>","scope":"instance","nullable":true,"type":[[["Readonly","<"],["ChannelFlagsBitField",">"]]],"meta":{"line":38,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The channel's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":48,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the channel was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL to the channel","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":77,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"partial","description":"Whether this Channel is a partial\n<info>This is always false outside of DM channels.</info>","scope":"instance","readonly":true,"type":[[["boolean"]]],"meta":{"line":88,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"sendSoundboardSound","description":"Send a soundboard sound to a voice channel the user is connected to.","scope":"instance","params":[{"name":"sound","description":"The sound to send","type":[[["SoundboardSound"]],[["SendSoundboardSoundOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":53,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setBitrate","description":"Sets the bitrate of the channel.","scope":"instance","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48_000)\n  .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["VoiceChannel",">"]]]],"meta":{"line":63,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setRTCRegion","description":"Sets the RTC region of the channel.","scope":"instance","examples":["// Set the RTC region to sydney\nvoiceChannel.setRTCRegion('sydney');","// Remove a fixed region for this channel - let Discord decide automatically\nvoiceChannel.setRTCRegion(null, 'We want to let Discord decide.');"],"params":[{"name":"rtcRegion","description":"The new region of the channel. Set to `null` to remove a specific region for the channel","nullable":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for modifying this region.","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["VoiceChannel",">"]]]],"meta":{"line":79,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","scope":"instance","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["VoiceChannel",">"]]]],"meta":{"line":96,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setVideoQualityMode","description":"Sets the camera video quality mode of the channel.","scope":"instance","params":[{"name":"videoQualityMode","description":"The new camera video quality mode.","type":[[["VideoQualityMode"]]]},{"name":"reason","description":"Reason for changing the camera video quality mode.","optional":true,"type":[[["string"]]]}],"returns":[[[["Promise","<"],["VoiceChannel",">"]]]],"meta":{"line":112,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for creating the invite","optional":true,"default":"{}","type":[[["InviteCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Invite",">"]]]],"meta":{"line":161,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#fetchInvites","inherited":true,"params":[{"name":"cache","description":"Whether to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]]],"meta":{"line":171,"file":"BaseGuildVoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"send","description":"Sends a message to this channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#sendTyping","inherited":true,"implements":["TextBasedChannel#sendTyping"],"examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","inherits":"BaseGuildVoiceChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","inherits":"BaseGuildVoiceChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","inherits":"BaseGuildVoiceChannel#createMessageComponentCollector","inherited":true,"implements":["TextBasedChannel#createMessageComponentCollector"],"examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","inherits":"BaseGuildVoiceChannel#awaitMessageComponent","inherited":true,"implements":["TextBasedChannel#awaitMessageComponent"],"examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","inherits":"BaseGuildVoiceChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#fetchWebhooks","inherited":true,"implements":["TextBasedChannel#fetchWebhooks"],"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#createWebhook","inherited":true,"implements":["TextBasedChannel#createWebhook"],"examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","inherits":"BaseGuildVoiceChannel#setRateLimitPerUser","inherited":true,"implements":["TextBasedChannel#setRateLimitPerUser"],"params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","inherits":"BaseGuildVoiceChannel#setNSFW","inherited":true,"implements":["TextBasedChannel#setNSFW"],"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","scope":"instance","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[{"types":[[["Readonly","<"],["PermissionsBitField",">"]]],"nullable":true}],"meta":{"line":186,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":228,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","scope":"instance","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]},{"name":"checkAdmin","description":"Whether having the {@link PermissionFlagsBits.Administrator} permission\nwill return all permissions","type":[[["boolean"]]]}],"returns":[[[["Readonly","<"],["PermissionsBitField",">"]]]],"meta":{"line":261,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","scope":"instance","inherits":"GuildChannel#lockPermissions","inherited":true,"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":282,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits the channel.","scope":"instance","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["GuildChannelEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":313,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","scope":"instance","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":329,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setParent","description":"Sets the parent of this channel.","scope":"instance","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066')\n  .then(channel => console.log(`New parent of ${channel.name}: ${channel.parent.name}`))\n  .catch(console.error);","// Move a channel and sync its permissions with the parent\nmessage.channel.setParent('355908108431917066', { lockPermissions: true })\n  .then(channel => console.log(`Moved ${message.channel.name} to ${channel.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"The category channel to set as the parent","nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"options","description":"The options for setting the parent","optional":true,"default":"{}","type":[[["SetParentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":358,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","scope":"instance","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["SetChannelPositionOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":386,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"clone","description":"Clones this channel.","scope":"instance","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options for cloning this channel","optional":true,"type":[[["GuildChannelCloneOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":403,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","scope":"instance","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":427,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes this channel.","scope":"instance","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildChannel",">"]]]],"meta":{"line":502,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","scope":"instance","inherits":"BaseChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[[["string"]]]],"meta":{"line":100,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this channel.","scope":"instance","inherits":"BaseChannel#fetch","inherited":true,"params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["BaseChannel",">"]]]],"meta":{"line":125,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThread","description":"Indicates whether this channel is a {@link ThreadChannel}.","scope":"instance","inherits":"BaseChannel#isThread","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":134,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isTextBased","description":"Indicates whether this channel is {@link TextBasedChannels text-based}.","scope":"instance","inherits":"BaseChannel#isTextBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":143,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isDMBased","description":"Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).","scope":"instance","inherits":"BaseChannel#isDMBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":152,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isVoiceBased","description":"Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.","scope":"instance","inherits":"BaseChannel#isVoiceBased","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":161,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isThreadOnly","description":"Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.","scope":"instance","inherits":"BaseChannel#isThreadOnly","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":170,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}},{"name":"isSendable","description":"Indicates whether this channel is sendable.","scope":"instance","inherits":"BaseChannel#isSendable","inherited":true,"returns":[[[["boolean"]]]],"meta":{"line":179,"file":"BaseChannel.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceChannelEffect","description":"Represents an effect used in a {@link VoiceChannel}.","props":[{"name":"guild","description":"The guild where the effect was sent from.","scope":"instance","type":[[["Guild"]]],"meta":{"line":15,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel the effect was sent in.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":22,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"userId","description":"The id of the user that sent the effect.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":29,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of the effect.","scope":"instance","nullable":true,"type":[[["Emoji"]]],"meta":{"line":36,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"animationType","description":"The animation type of the effect.","scope":"instance","nullable":true,"type":[[["VoiceChannelEffectSendAnimationType"]]],"meta":{"line":43,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"animationId","description":"The animation id of the effect.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"soundId","description":"The id of the soundboard sound for soundboard effects.","scope":"instance","nullable":true,"type":[[["Snowflake"]],[["number"]]],"meta":{"line":57,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"soundVolume","description":"The volume of the soundboard sound [0-1] for soundboard effects.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel the effect was sent in.","scope":"instance","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":73,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"soundboardSound","description":"The soundboard sound for soundboard effects.","scope":"instance","readonly":true,"nullable":true,"type":[[["SoundboardSound"]]],"meta":{"line":83,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"VoiceChannelEffect.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The region's id","scope":"instance","type":[[["string"]]],"meta":{"line":15,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"Name of the region","scope":"instance","type":[[["string"]]],"meta":{"line":22,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","scope":"instance","type":[[["boolean"]]],"meta":{"line":29,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}},{"name":"optimal","description":"Whether the region is optimal","scope":"instance","type":[[["boolean"]]],"meta":{"line":36,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}},{"name":"custom","description":"Whether the region is custom","scope":"instance","type":[[["boolean"]]],"meta":{"line":43,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":8,"file":"VoiceRegion.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceState","description":"Represents the voice state for a Guild Member.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild of this voice state","scope":"instance","type":[[["Guild"]]],"meta":{"line":20,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The id of the member of this voice state","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":26,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":37,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":48,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":59,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":70,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"selfVideo","description":"Whether this member's camera is enabled","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":81,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"sessionId","description":"The session id for this member's connection","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":92,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"streaming","description":"Whether this member is streaming using \"Screen Share\"","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":105,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The {@link VoiceChannel} or {@link StageChannel} id the member is in","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":116,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"suppress","description":"Whether this member is suppressed from speaking. This property is specific to stage channels only.","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":127,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"requestToSpeakTimestamp","description":"The time at which the member requested to speak. This property is specific to stage channels only.","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":138,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"member","description":"The member that this voice state belongs to","scope":"instance","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":152,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel that the member is connected to","scope":"instance","readonly":true,"nullable":true,"type":[[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":162,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"deaf","description":"Whether this member is either self-deafened or server-deafened","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":172,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"mute","description":"Whether this member is either self-muted or server-muted","scope":"instance","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":182,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"setMute","description":"Mutes/unmutes the member of this voice state.","scope":"instance","params":[{"name":"mute","description":"Whether or not the member should be muted","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":193,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"setDeaf","description":"Deafens/undeafens the member of this voice state.","scope":"instance","params":[{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":204,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"disconnect","description":"Disconnects the member from the channel.","scope":"instance","params":[{"name":"reason","description":"Reason for disconnecting the member from the channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":214,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"setChannel","description":"Moves the member to a different channel, or disconnects them from the one they're in.","scope":"instance","params":[{"name":"channel","description":"Channel to move the member to, or `null` if you want to\ndisconnect them from voice.","nullable":true,"type":[[["GuildVoiceChannelResolvable"]]]},{"name":"reason","description":"Reason for moving member to another channel or disconnecting","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["GuildMember",">"]]]],"meta":{"line":226,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this voice state. Currently only available when in a stage channel","scope":"instance","params":[{"name":"options","description":"The options to provide","type":[[["VoiceStateEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["VoiceState",">"]]]],"meta":{"line":245,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"fetch","description":"Fetches this voice state.","scope":"instance","params":[{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["VoiceState",">"]]]],"meta":{"line":282,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"setRequestToSpeak","description":"Toggles the request to speak in the channel.\nOnly applicable for stage channels and for the client's own voice state.","scope":"instance","examples":["// Making the client request to speak in a stage channel (raise its hand)\nguild.members.me.voice.setRequestToSpeak(true);","// Making the client cancel a request to speak\nguild.members.me.voice.setRequestToSpeak(false);"],"params":[{"name":"requestToSpeak","description":"Whether or not the client is requesting to become a speaker.","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["VoiceState",">"]]]],"meta":{"line":299,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"setSuppressed","description":"Suppress/unsuppress the user. Only applicable for stage channels.","scope":"instance","examples":["// Making the client a speaker\nguild.members.me.voice.setSuppressed(false);","// Making the client an audience member\nguild.members.me.voice.setSuppressed(true);","// Inviting another user to speak\nvoiceState.setSuppressed(false);","// Moving another user to the audience, or cancelling their invite to speak\nvoiceState.setSuppressed(true);"],"params":[{"name":"suppressed","description":"Whether or not the user should be suppressed.","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[[["Promise","<"],["VoiceState",">"]]]],"meta":{"line":321,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":12,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":18,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the webhook","scope":"instance","type":[[["string"]]],"meta":{"line":36,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"token","description":"The token for the webhook, unavailable for follower webhooks and webhooks owned by another application.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"avatar","description":"The avatar for the webhook","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":57,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"id","description":"The webhook's id","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"type","description":"The type of the webhook","scope":"instance","type":[[["WebhookType"]]],"meta":{"line":73,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"guildId","description":"The guild the webhook belongs to","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":82,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the channel the webhook belongs to","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":91,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"owner","description":"The owner of the webhook","scope":"instance","nullable":true,"type":[[["User"]],[["APIUser"]]],"meta":{"line":100,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"applicationId","description":"The application that created this webhook","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":111,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"sourceGuild","description":"The source guild of the webhook","scope":"instance","nullable":true,"type":[[["Guild"]],[["APIGuild"]]],"meta":{"line":122,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"sourceChannel","description":"The source channel of the webhook","scope":"instance","nullable":true,"type":[[["AnnouncementChannel"]],[["APIChannel"]]],"meta":{"line":133,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel the webhook belongs to","scope":"instance","readonly":true,"nullable":true,"type":[[["TextChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["AnnouncementChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":173,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"createdTimestamp","description":"The timestamp the webhook was created at","scope":"instance","readonly":true,"type":[[["number"]]],"meta":{"line":436,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"createdAt","description":"The time the webhook was created at","scope":"instance","readonly":true,"type":[[["Date"]]],"meta":{"line":446,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"url","description":"The URL of this webhook","scope":"instance","readonly":true,"type":[[["string"]]],"meta":{"line":456,"file":"Webhook.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","scope":"instance","examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a basic message in a thread\nwebhook.send({ content: 'hello!', threadId: '836856309672348295' })\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send({\n  content: 'This is an embed',\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["WebhookMessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":226,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","see":["{@link https://api.slack.com/messaging/webhooks}"],"scope":"instance","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1_000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"async":true,"returns":[[[["Promise","<"],["boolean",">"]]]],"meta":{"line":277,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"edit","description":"Edits this webhook.","scope":"instance","params":[{"name":"options","description":"Options for editing the webhook","type":[[["WebhookEditOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Webhook",">"]]]],"meta":{"line":305,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"fetchMessage","description":"Gets a message that was sent by this webhook.","scope":"instance","params":[{"name":"message","description":"The id of the message to fetch","type":[[["Snowflake"]],[["'@original'"]]]},{"name":"options","description":"The options to provide to fetch the message.","optional":true,"default":"{}","type":[[["WebhookFetchMessageOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Message",">"]]],"description":"Returns the message sent by this webhook"}],"meta":{"line":340,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"editMessage","description":"Edits a message that was sent by this webhook.","scope":"instance","params":[{"name":"message","description":"The message to edit","type":[[["MessageResolvable"]],[["'@original'"]]]},{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["WebhookMessageEditOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Message",">"]]],"description":"Returns the message edited by this webhook"}],"meta":{"line":362,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"delete","description":"Deletes the webhook.","scope":"instance","params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":407,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"deleteMessage","description":"Delete a message that was sent by this webhook.","scope":"instance","params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]],[["'@original'"]]]},{"name":"threadId","description":"The id of the thread this message belongs to","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":418,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"avatarURL","description":"A link to the webhook's avatar.","scope":"instance","params":[{"name":"options","description":"Options for the image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[{"types":[[["string"]]],"nullable":true}],"meta":{"line":466,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"isUserCreated","description":"Whether this webhook is created by a user.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":475,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"isApplicationCreated","description":"Whether this webhook is created by an application.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":484,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"isChannelFollower","description":"Whether or not this webhook is a channel follower webhook.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":493,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"isIncoming","description":"Whether or not this webhook is an incoming webhook.","scope":"instance","returns":[[[["boolean"]]]],"meta":{"line":502,"file":"Webhook.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":16,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"WelcomeChannel","description":"Represents a channel link in a guild's welcome screen.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild for this welcome channel","scope":"instance","type":[[["Guild"]],[["InviteGuild"]]],"meta":{"line":20,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this welcome channel","scope":"instance","type":[[["string"]]],"meta":{"line":27,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"_emoji","description":"The raw emoji data","scope":"instance","access":"private","type":[[["Object"]]],"meta":{"line":35,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of this welcome channel","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":45,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"channel","description":"The channel of this welcome channel","scope":"instance","nullable":true,"type":[[["TextChannel"]],[["AnnouncementChannel"]],[["ForumChannel"]],[["MediaChannel"]]],"meta":{"line":53,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"emoji","description":"The emoji of this welcome channel","scope":"instance","type":[[["GuildEmoji"]],[["Emoji"]]],"meta":{"line":62,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":11,"file":"WelcomeChannel.js","path":"packages/discord.js/src/structures"}},{"name":"WelcomeScreen","description":"Represents a welcome screen.","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild for this welcome screen","scope":"instance","type":[[["Guild"]]],"meta":{"line":22,"file":"WelcomeScreen.js","path":"packages/discord.js/src/structures"}},{"name":"description","description":"The description of this welcome screen","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":29,"file":"WelcomeScreen.js","path":"packages/discord.js/src/structures"}},{"name":"welcomeChannels","description":"Collection of welcome channels belonging to this welcome screen","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["WelcomeChannel",">"]]],"meta":{"line":36,"file":"WelcomeScreen.js","path":"packages/discord.js/src/structures"}},{"name":"enabled","description":"Whether the welcome screen is enabled on the guild","scope":"instance","type":[[["boolean"]]],"meta":{"line":49,"file":"WelcomeScreen.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"WelcomeScreen.js","path":"packages/discord.js/src/structures"}},{"name":"Widget","description":"Represents a Widget.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the guild.","scope":"instance","type":[[["Snowflake"]]],"meta":{"line":34,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"name","description":"The name of the guild.","scope":"instance","type":[[["string"]]],"meta":{"line":42,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"instantInvite","description":"The invite of the guild.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":51,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"channels","description":"The list of channels in the guild.","scope":"instance","type":[[["Collection","<"],["Snowflake",", "],["WidgetChannel",">"]]],"meta":{"line":59,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"members","description":"The list of members in the guild.\nThese strings are just arbitrary numbers, they aren't Snowflakes.","scope":"instance","type":[[["Collection","<"],["string",", "],["WidgetMember",">"]]],"meta":{"line":70,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"presenceCount","description":"The number of members online.","scope":"instance","type":[[["number"]]],"meta":{"line":81,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"methods":[{"name":"fetch","description":"Update the Widget.","scope":"instance","async":true,"returns":[[[["Promise","<"],["Widget",">"]]]],"meta":{"line":90,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"imageURL","description":"Returns a URL for the PNG widget of the guild.","scope":"instance","params":[{"name":"style","description":"The style for the widget image","optional":true,"type":[[["GuildWidgetStyle"]]]}],"returns":[[[["string"]]]],"meta":{"line":102,"file":"Widget.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":13,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"WidgetMember","description":"Represents a WidgetMember.","extends":[[["Base"]]],"props":[{"name":"id","description":"The id of the user. It's an arbitrary number.","scope":"instance","type":[[["string"]]],"meta":{"line":26,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"username","description":"The username of the member.","scope":"instance","type":[[["string"]]],"meta":{"line":33,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"discriminator","description":"The discriminator of the member.","scope":"instance","type":[[["string"]]],"meta":{"line":40,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"avatar","description":"The avatar of the member.","scope":"instance","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"status","description":"The status of the member.","scope":"instance","type":[[["PresenceStatus"]]],"meta":{"line":54,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"deaf","description":"If the member is server deafened","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"mute","description":"If the member is server muted","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":68,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"selfDeaf","description":"If the member is self deafened","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":75,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"selfMute","description":"If the member is self muted","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":82,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"suppress","description":"If the member is suppressed","scope":"instance","nullable":true,"type":[[["boolean"]]],"meta":{"line":89,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"channelId","description":"The id of the voice channel the member is in, if any","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":96,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"avatarURL","description":"The avatar URL of the member.","scope":"instance","type":[[["string"]]],"meta":{"line":103,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"activity","description":"The activity of the member.","scope":"instance","nullable":true,"type":[[["WidgetActivity"]]],"meta":{"line":110,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"client","description":"The client that instantiated this","scope":"instance","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Base.js","path":"packages/discord.js/src/structures"}}],"meta":{"line":10,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityFlagsBitField","description":"Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"ActivityFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric activity flags.","scope":"static","type":[[["ActivityFlags"]]],"meta":{"line":19,"file":"ActivityFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"ActivityFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationFlagsBitField","description":"Data structure that makes it easy to interact with a {@link ClientApplication#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"ApplicationFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":29,"file":"ApplicationFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric application flags. All available properties:","scope":"static","type":[[["ApplicationFlags"]]],"meta":{"line":19,"file":"ApplicationFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"ApplicationFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"AttachmentFlagsBitField","description":"Data structure that makes it easy to interact with an {@link Attachment#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"AttachmentFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric attachment flags.","scope":"static","type":[[["AttachmentFlags"]]],"meta":{"line":19,"file":"AttachmentFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"AttachmentFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"BitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":"this.constructor.DefaultBit","type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric bitfield flags.\n<info>Defined in extension classes</info>","scope":"static","abstract":true,"type":[[["Object"]]],"meta":{"line":18,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"DefaultBit","scope":"static","access":"private","type":[[["number"]],[["bigint"]]],"meta":{"line":25,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[[["number"]],[["bigint"]]]],"meta":{"line":180,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":9,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"ChannelFlagsBitField","description":"Data structure that makes it easy to interact with a {@link BaseChannel#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"ChannelFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":29,"file":"ChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric guild channel flags.","scope":"static","type":[[["ChannelFlags"]]],"meta":{"line":19,"file":"ChannelFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"ChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"GuildMemberFlagsBitField","description":"Data structure that makes it easy to interact with a {@link GuildMember#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"GuildMemberFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":29,"file":"GuildMemberFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric guild guild member flags.","scope":"static","type":[[["GuildMemberFlags"]]],"meta":{"line":19,"file":"GuildMemberFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"GuildMemberFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"IntentsBitField","description":"Data structure that makes it easy to calculate intents.","extends":[[["BitField"]]],"construct":{"name":"IntentsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["IntentsResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric WebSocket intents","scope":"static","type":[[["GatewayIntentBits"]]],"meta":{"line":18,"file":"IntentsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":11,"file":"IntentsBitField.js","path":"packages/discord.js/src/util"}},{"name":"LimitedCollection","description":"A Collection which holds a max amount of entries.","extends":[[["Collection"]]],"construct":{"name":"LimitedCollection","params":[{"name":"options","description":"Options for constructing the Collection.","optional":true,"default":"{}","type":[[["LimitedCollectionOptions"]]]},{"name":"iterable","description":"Optional entries passed to the Map constructor.","optional":true,"default":null,"type":[[["Iterable"]]]}]},"props":[{"name":"maxSize","description":"The max size of the Collection.","scope":"instance","type":[[["number"]]],"meta":{"line":45,"file":"LimitedCollection.js","path":"packages/discord.js/src/util"}},{"name":"keepOverLimit","description":"A function called to check if an entry should be kept when the Collection is at max size.","scope":"instance","nullable":true,"type":[[["function"]]],"meta":{"line":52,"file":"LimitedCollection.js","path":"packages/discord.js/src/util"}}],"meta":{"line":22,"file":"LimitedCollection.js","path":"packages/discord.js/src/util"}},{"name":"MessageFlagsBitField","description":"Data structure that makes it easy to interact with a {@link Message#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"MessageFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":39,"file":"MessageFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric message flags.","scope":"static","type":[[["MessageFlags"]]],"meta":{"line":19,"file":"MessageFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"MessageFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Options","description":"Contains various utilities for client options.","props":[{"name":"userAgentAppendix","description":"The default user agent appendix.","scope":"static","access":"private","type":[[["string"]]],"meta":{"line":73,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"DefaultMakeCacheSettings","description":"The default settings passed to {@link ClientOptions.makeCache}.\nThe caches that this changes are:\n- `MessageManager` - Limit to 200 messages\n<info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n`makeCache: Options.cacheWithLimits({ ...Options.DefaultMakeCacheSettings, ReactionManager: 0 })`</info>","scope":"static","type":[[["Object","<"],["string",", ("],["LimitedCollectionOptions","|"],["number",")>"]]],"meta":{"line":168,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"DefaultSweeperSettings","description":"The default settings passed to {@link ClientOptions.sweepers}.\nThe sweepers that this changes are:\n- `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n<info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n`sweepers: { ...Options.DefaultSweeperSettings, messages: { interval: 300, lifetime: 600 } }`</info>","scope":"static","type":[[["SweeperOptions"]]],"meta":{"line":183,"file":"Options.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"createDefault","description":"The default client options.","scope":"static","returns":[[[["ClientOptions"]]]],"meta":{"line":80,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"cacheWithLimits","description":"Create a cache factory using predefined settings to sweep or limit.","scope":"static","examples":["// Store up to 200 messages per channel and 200 members per guild, always keeping the client member.\nOptions.cacheWithLimits({\n   MessageManager: 200,\n   GuildMemberManager: {\n     maxSize: 200,\n     keepOverLimit: (member) => member.id === client.user.id,\n   },\n });"],"params":[{"name":"settings","description":"Settings passed to the relevant constructor.\nIf no setting is provided for a manager, it uses Collection.\nIf a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\nIf LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.","optional":true,"default":"{}","type":[[["Object","<"],["string",", ("],["LimitedCollectionOptions","|"],["number",")>"]]]}],"returns":[[[["CacheFactory"]]]],"meta":{"line":120,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"cacheEverything","description":"Create a cache factory that always caches everything.","scope":"static","returns":[[[["CacheFactory"]]]],"meta":{"line":154,"file":"Options.js","path":"packages/discord.js/src/util"}}],"meta":{"line":65,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"PermissionsBitField","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["bigint"]]],"meta":{"line":57,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric permission flags.","see":["{@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}"],"scope":"static","type":[[["PermissionFlagsBits"]]],"meta":{"line":21,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"All","description":"Bitfield representing every permission combined","scope":"static","type":[[["bigint"]]],"meta":{"line":31,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Default","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["bigint"]]],"meta":{"line":39,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"StageModerator","description":"Bitfield representing the permissions required for moderators of stage channels","scope":"static","type":[[["bigint"]]],"meta":{"line":47,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"DefaultBit","scope":"static","access":"private","type":[[["bigint"]]],"meta":{"line":55,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":81,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"any","description":"Checks whether the bitfield has a permission, or any of multiple permissions.","scope":"instance","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":92,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","scope":"instance","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":103,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the permissions available.","scope":"instance","returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":112,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":13,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"RoleFlagsBitField","description":"Data structure that makes it easy to interact with a {@link Role#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"RoleFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric role flags.","scope":"static","type":[[["RoleFlags"]]],"meta":{"line":19,"file":"RoleFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"RoleFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"SKUFlagsBitField","description":"Data structure that makes it easy to interact with an {@link SKU#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"SKUFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]],[["bigint"]]],"meta":{"line":36,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric SKU flags.","scope":"static","type":[[["SKUFlags"]]],"meta":{"line":19,"file":"SKUFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"SKUFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Sweepers","description":"A container for all cache sweeping intervals and their associated sweep methods.","props":[{"name":"options","description":"The options the sweepers were instantiated with","scope":"instance","type":[[["SweeperOptions"]]],"meta":{"line":33,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"intervals","description":"A record of interval timeout that is used to sweep the indicated items, or null if not being swept","scope":"instance","type":[[["Object","<"],["SweeperKey",", ?"],["Timeout",">"]]],"meta":{"line":40,"file":"Sweepers.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"sweepApplicationCommands","description":"Sweeps all guild and global application commands and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which commands will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of commands that were removed from the caches"}],"meta":{"line":76,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepAutoModerationRules","description":"Sweeps all auto moderation rules and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine\nwhich auto moderation rules will be removed from the caches","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of auto moderation rules that were removed from the caches"}],"meta":{"line":95,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepBans","description":"Sweeps all guild bans and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which bans will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of bans that were removed from the caches"}],"meta":{"line":105,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepEmojis","description":"Sweeps all guild emojis and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which emojis will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of emojis that were removed from the caches"}],"meta":{"line":115,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepEntitlements","description":"Sweeps all client application entitlements and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which entitlements will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of entitlements that were removed from the caches"}],"meta":{"line":125,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepInvites","description":"Sweeps all guild invites and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which invites will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of invites that were removed from the caches"}],"meta":{"line":143,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepGuildMembers","description":"Sweeps all guild members and removes the ones which are indicated by the filter.\n<info>It is highly recommended to keep the client guild member cached</info>","scope":"instance","params":[{"name":"filter","description":"The function used to determine which guild members will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of guild members that were removed from the caches"}],"meta":{"line":154,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones which are indicated by the filter.","scope":"instance","examples":["// Remove all messages older than 1800 seconds from the messages cache\nconst amount = sweepers.sweepMessages(\n  Sweepers.filterByLifetime({\n    lifetime: 1800,\n    getComparisonTimestamp: m => m.editedTimestamp ?? m.createdTimestamp,\n  })(),\n);\nconsole.log(`Successfully removed ${amount} messages from the cache.`);"],"params":[{"name":"filter","description":"The function used to determine which messages will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches"}],"meta":{"line":173,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepPresences","description":"Sweeps all presences and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which presences will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of presences that were removed from the caches"}],"meta":{"line":198,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepReactions","description":"Sweeps all message reactions and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which reactions will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of reactions that were removed from the caches"}],"meta":{"line":208,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepStageInstances","description":"Sweeps all guild stage instances and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which stage instances will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of stage instances that were removed from the caches"}],"meta":{"line":240,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepStickers","description":"Sweeps all guild stickers and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which stickers will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of stickers that were removed from the caches"}],"meta":{"line":250,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepThreadMembers","description":"Sweeps all thread members and removes the ones which are indicated by the filter.\n<info>It is highly recommended to keep the client thread member cached</info>","scope":"instance","params":[{"name":"filter","description":"The function used to determine which thread members will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of thread members that were removed from the caches"}],"meta":{"line":261,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepThreads","description":"Sweeps all threads and removes the ones which are indicated by the filter.","scope":"instance","examples":["// Remove all threads archived greater than 1 day ago from all the channel caches\nconst amount = sweepers.sweepThreads(\n  Sweepers.filterByLifetime({\n    getComparisonTimestamp: t => t.archivedTimestamp,\n    excludeFromSweep: t => !t.archived,\n  })(),\n);\nconsole.log(`Successfully removed ${amount} threads from the cache.`);"],"params":[{"name":"filter","description":"The function used to determine which threads will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"filter Amount of threads that were removed from the caches"}],"meta":{"line":293,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepUsers","description":"Sweeps all users and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which users will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of users that were removed from the caches"}],"meta":{"line":317,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"sweepVoiceStates","description":"Sweeps all guild voice states and removes the ones which are indicated by the filter.","scope":"instance","params":[{"name":"filter","description":"The function used to determine which voice states will be removed from the caches.","type":[[["function"]]]}],"returns":[{"types":[[["number"]]],"description":"Amount of voice states that were removed from the caches"}],"meta":{"line":335,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"destroy","description":"Cancels all sweeping intervals","scope":"instance","returns":[[[["void"]]]],"meta":{"line":344,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"_sweepGuildDirectProp","description":"Sweep a direct sub property of all guilds","scope":"instance","access":"private","params":[{"name":"key","description":"The name of the property","type":[[["string"]]]},{"name":"filter","description":"Filter function passed to sweep","type":[[["function"]]]},{"name":"eventOptions","description":"Options for the Client event emitted here","optional":true,"default":"{}","type":[[["SweepEventOptions"]]]}],"returns":[{"types":[[["Object"]]],"description":"Object containing the number of guilds swept and the number of items swept"}],"meta":{"line":459,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"_validateProperties","description":"Validates a set of properties","scope":"instance","access":"private","params":[{"name":"key","description":"Key of the options object to check","type":[[["string"]]]}],"meta":{"line":490,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"_initInterval","description":"Initialize an interval for sweeping","scope":"instance","access":"private","params":[{"name":"intervalKey","description":"The name of the property that stores the interval for this sweeper","type":[[["string"]]]},{"name":"sweepKey","description":"The name of the function that sweeps the desired caches","type":[[["string"]]]},{"name":"opts","description":"Validated options for a sweep","type":[[["Object"]]]}],"meta":{"line":522,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"filterByLifetime","description":"Create a sweepFilter function that uses a lifetime to determine sweepability.","scope":"static","params":[{"name":"options","description":"The options used to generate the filter function","optional":true,"default":"{}","type":[[["LifetimeFilterOptions"]]]}],"returns":[[[["GlobalSweepFilter"]]]],"meta":{"line":368,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"archivedThreadSweepFilter","description":"Creates a sweep filter that sweeps archived threads","scope":"static","params":[{"name":"lifetime","description":"How long a thread has to be archived to be valid for sweeping","optional":true,"default":14400,"type":[[["number"]]]}],"returns":[[[["GlobalSweepFilter"]]]],"meta":{"line":407,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"expiredInviteSweepFilter","description":"Creates a sweep filter that sweeps expired invites","scope":"static","params":[{"name":"lifetime","description":"How long ago an invite has to have expired to be valid for sweeping","optional":true,"default":14400,"type":[[["number"]]]}],"returns":[[[["GlobalSweepFilter"]]]],"meta":{"line":421,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"outdatedMessageSweepFilter","description":"Creates a sweep filter that sweeps outdated messages (edits taken into account)","scope":"static","params":[{"name":"lifetime","description":"How long ago a message has to have been sent or edited to be valid for sweeping","optional":true,"default":3600,"type":[[["number"]]]}],"returns":[[[["GlobalSweepFilter"]]]],"meta":{"line":434,"file":"Sweepers.js","path":"packages/discord.js/src/util"}}],"meta":{"line":18,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"SystemChannelFlagsBitField","description":"Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.\n<info>Note that all event message types are enabled by default,\nand by setting their corresponding flags you are disabling them</info>","extends":[[["BitField"]]],"construct":{"name":"SystemChannelFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["SystemChannelFlagsResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":31,"file":"SystemChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric system channel flags.","scope":"static","type":[[["GuildSystemChannelFlags"]]],"meta":{"line":21,"file":"SystemChannelFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":14,"file":"SystemChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"ThreadMemberFlagsBitField","description":"Data structure that makes it easy to interact with a {@link ThreadMember#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"ThreadMemberFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":28,"file":"ThreadMemberFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric thread member flags. There are currently no bitflags relevant to bots for this.","scope":"static","type":[[["Object","<"],["string",", "],["number",">"]]],"meta":{"line":18,"file":"ThreadMemberFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":11,"file":"ThreadMemberFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"UserFlagsBitField","description":"Data structure that makes it easy to interact with a {@link User#flags} bitfield.","extends":[[["BitField"]]],"construct":{"name":"UserFlagsBitField","params":[{"name":"bits","description":"Bit(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","scope":"instance","type":[[["number"]]],"meta":{"line":29,"file":"UserFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"Flags","description":"Numeric user flags.","scope":"static","type":[[["UserFlags"]]],"meta":{"line":19,"file":"UserFlagsBitField.js","path":"packages/discord.js/src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","scope":"instance","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":45,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","scope":"instance","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":55,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","scope":"instance","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[[["boolean"]]]],"meta":{"line":65,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","scope":"instance","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":77,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","scope":"instance","inherits":"BitField#freeze","inherited":true,"returns":[[[["Readonly","<"],["BitField",">"]]]],"meta":{"line":86,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"add","description":"Adds bits to these ones.","scope":"instance","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":96,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"remove","description":"Removes bits from these.","scope":"instance","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":[{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."}],"meta":{"line":113,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","scope":"instance","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Object"]]]],"meta":{"line":131,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","scope":"instance","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[[["*"]]]}],"returns":[[[["Array","<"],["string",">"]]]],"meta":{"line":146,"file":"BitField.js","path":"packages/discord.js/src/util"}}],"meta":{"line":12,"file":"UserFlagsBitField.js","path":"packages/discord.js/src/util"}}],"functions":[{"name":"resolveCode","description":"Resolves the string to a code based on the passed regex.","scope":"global","access":"private","params":[{"name":"data","description":"The string to resolve","type":[[["string"]]]},{"name":"regex","description":"The RegExp used to extract the code","type":[[["RegExp"]]]}],"returns":[[[["string"]]]],"meta":{"line":34,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","scope":"global","access":"private","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[[["string"]]]],"meta":{"line":45,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"resolveGuildTemplateCode","description":"Resolves GuildTemplateResolvable to a template code.","scope":"global","access":"private","params":[{"name":"data","description":"The template resolvable to resolve","type":[[["GuildTemplateResolvable"]]]}],"returns":[[[["string"]]]],"meta":{"line":56,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer.","scope":"global","access":"private","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"async":true,"returns":[[[["Promise","<"],["ResolvedFile",">"]]]],"meta":{"line":90,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 string.","scope":"global","access":"private","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]},{"name":"contentType","description":"The content type of the data","optional":true,"default":"'image/jpg'","type":[[["string"]]]}],"returns":[[[["string"]]]],"meta":{"line":131,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","scope":"global","access":"private","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[[["Promise","<?"],["string",">"]]]],"meta":{"line":143,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"toSnakeCase","description":"Transforms camel-cased keys into snake cased keys","scope":"global","params":[{"name":"obj","description":"The object to transform","type":[[["*"]]]}],"returns":[[[["*"]]]],"meta":{"line":12,"file":"Transformers.js","path":"packages/discord.js/src/util"}},{"name":"flatten","description":"Flatten an object. Any properties that are collections will get converted to an array of keys.","scope":"global","params":[{"name":"obj","description":"The object to flatten.","type":[[["Object"]]]},{"name":"props","description":"Specific properties to include/exclude.","optional":true,"variable":true,"type":[[["Object","<"],["string",", ("],["boolean","|"],["string",")>"]]]}],"returns":[[[["Object"]]]],"meta":{"line":21,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"fetchRecommendedShardCount","description":"Gets the recommended shard count from Discord.","scope":"global","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"options","description":"Options for fetching the recommended shard count","optional":true,"type":[[["FetchRecommendedShardCountOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"}],"meta":{"line":74,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n- A UTF-8 emoji (no id)\n- A URL-encoded UTF-8 emoji (no id)\n- A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"global","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":[{"types":[[["PartialEmoji"]]],"nullable":true}],"meta":{"line":107,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"resolvePartialEmoji","description":"Resolves a partial emoji object from an {@link EmojiIdentifierResolvable}, without checking a Client.","scope":"global","params":[{"name":"emoji","description":"Emoji identifier to resolve","type":[[["Emoji"]],[["EmojiIdentifierResolvable"]]]}],"returns":[{"types":[[["PartialEmoji"]],[["PartialEmojiOnlyId"]]],"description":"Supplying a snowflake yields `PartialEmojiOnlyId`.","nullable":true}],"meta":{"line":127,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"resolveGuildEmoji","description":"Resolves a {@link GuildEmoji} from an emoji id.","scope":"global","access":"private","params":[{"name":"client","description":"The client to use to resolve the emoji","type":[[["Client"]]]},{"name":"emojiId","description":"The emoji id to resolve","type":[[["Snowflake"]]]}],"returns":[{"types":[[["GuildEmoji"]]],"nullable":true}],"meta":{"line":143,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"global","access":"private","params":[{"name":"obj","description":"Error info","type":[[["MakeErrorOptions"]]]}],"returns":[[[["Error"]]]],"meta":{"line":176,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"global","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[[["MakeErrorOptions"]]]],"meta":{"line":190,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"getSortableGroupTypes","description":"Gets an array of the channel types that can be moved in the channel group. For example, a GuildText channel would\nreturn an array containing the types that can be ordered within the text channels (always at the top), and a voice\nchannel would return an array containing the types that can be ordered within the voice channels (always at the\nbottom).","scope":"global","access":"private","params":[{"name":"type","description":"The type of the channel","type":[[["ChannelType"]]]}],"returns":[[[["Array","<"],["ChannelType",">"]]]],"meta":{"line":218,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"global","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<*>"]]]},{"name":"element","description":"Element to move","type":[[["*"]]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[[["number"]]]],"meta":{"line":245,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"verifyString","description":"Verifies the provided data is a string, otherwise throws provided error.","scope":"global","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["string"]]]},{"name":"error","description":"The Error constructor to instantiate. Defaults to Error","optional":true,"default":"Error","type":[[["function"]]]},{"name":"errorMessage","description":"The error message to throw with. Defaults to \"Expected string, got <data> instead.\"","optional":true,"default":"\"Expected string, got <data> instead.\"","type":[[["string"]]]},{"name":"allowEmpty","description":"Whether an empty string should be allowed","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[[["string"]]]],"meta":{"line":265,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"global","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":[{"types":[[["number"]]],"description":"A color"}],"meta":{"line":323,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"discordSort","description":"Sorts by Discord's position and id.","scope":"global","params":[{"name":"collection","description":"Collection of objects to sort","type":[[["Collection"]]]}],"returns":[[[["Collection"]]]],"meta":{"line":354,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"setPosition","description":"Sets the position of a Channel or Role.","scope":"global","access":"private","params":[{"name":"item","description":"Object to set the position of","type":[[["BaseChannel"]],[["Role"]]]},{"name":"position","description":"New position for the object","type":[[["number"]]]},{"name":"relative","description":"Whether `position` is relative to its current position","type":[[["boolean"]]]},{"name":"sorted","description":"A collection of the objects sorted properly","type":[[["Collection","<"],["string",", ("],["BaseChannel","|"],["Role",")>"]]]},{"name":"client","description":"The client to use to patch the data","type":[[["Client"]]]},{"name":"route","description":"Route to call PATCH on","type":[[["string"]]]},{"name":"reason","description":"Reason for the change","optional":true,"type":[[["string"]]]}],"async":true,"returns":[{"types":[[["Promise","<("],["Array","<"],["BaseChannel",">|"],["Array","<"],["Role",">)>"]]],"description":"Updated item list, with `id` and `position` properties"}],"meta":{"line":377,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"basename","description":"Alternative to Node's `path.basename`, removing query string after the extension if it exists.","scope":"global","access":"private","params":[{"name":"path","description":"Path to get the basename of","type":[[["string"]]]},{"name":"ext","description":"File extension to remove","optional":true,"type":[[["string"]]]}],"returns":[{"types":[[["string"]]],"description":"Basename of the path"}],"meta":{"line":393,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"findName","description":"Find the filename to use for attachments.","scope":"global","params":[{"name":"thing","description":"The thing to attach as attachment","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[{"types":[[["string"]]],"description":"filename to use"}],"meta":{"line":404,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"cleanContent","description":"The content to have all mentions replaced by the equivalent text.","scope":"global","params":[{"name":"str","description":"The string to be converted","type":[[["string"]]]},{"name":"channel","description":"The channel the string was sent in","type":[[["TextBasedChannels"]]]}],"returns":[[[["string"]]]],"meta":{"line":423,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"cleanCodeBlockContent","description":"The content to put in a code block with all code block fences replaced by the equivalent backticks.","scope":"global","params":[{"name":"text","description":"The string to be converted","type":[[["string"]]]}],"returns":[[[["string"]]]],"meta":{"line":468,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"parseWebhookURL","description":"Parses a webhook URL for the id and token.","scope":"global","params":[{"name":"url","description":"The URL to parse","type":[[["string"]]]}],"returns":[{"types":[[["WebhookClientDataIdWithToken"]]],"description":"`null` if the URL is invalid, otherwise the id and the token","nullable":true}],"meta":{"line":478,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"transformResolved","description":"Transforms the resolved data received from the API.","scope":"global","access":"private","params":[{"name":"supportingData","description":"Data to support the transformation","type":[[["SupportingInteractionResolvedData"]]]},{"name":"data","description":"The received resolved objects","optional":true,"type":[[["APIInteractionDataResolved"]]]}],"returns":[[[["CommandInteractionResolvedData"]]]],"meta":{"line":505,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"resolveSKUId","description":"Resolves a SKU id from a SKU resolvable.","scope":"global","params":[{"name":"resolvable","description":"The SKU resolvable to resolve","type":[[["SKUResolvable"]]]}],"returns":[{"types":[[["Snowflake"]]],"description":"The resolved SKU id, or `null` if the resolvable was invalid","nullable":true}],"meta":{"line":565,"file":"Util.js","path":"packages/discord.js/src/util"}}],"interfaces":[{"name":"InteractionResponses","description":"Interface for classes that support shared interaction response types.","methods":[{"name":"deferReply","description":"Defers the reply to this interaction.","scope":"instance","examples":["// Defer the reply to this interaction\ninteraction.deferReply()\n  .then(console.log)\n  .catch(console.error)","// Defer to send an ephemeral reply later\ninteraction.deferReply({ flags: MessageFlags.Ephemeral })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the reply to this interaction","optional":true,"type":[[["InteractionDeferReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":89,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"reply","description":"Creates a reply to this interaction.\n<info>Use the `withResponse` option to get the interaction callback response.</info>","scope":"instance","examples":["// Reply to the interaction and fetch the response\ninteraction.reply({ content: 'Pong!', withResponse: true })\n  .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n  .catch(console.error);","// Create an ephemeral reply with an embed\nconst embed = new EmbedBuilder().setDescription('Pong!');\n\ninteraction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n  .then(() => console.log('Reply sent.'))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":130,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchReply","description":"Fetches a reply to this interaction.","see":["Webhook#fetchMessage"],"scope":"instance","examples":["// Fetch the initial reply to this interaction\ninteraction.fetchReply()\n  .then(reply => console.log(`Replied with ${reply.content}`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to fetch","optional":true,"default":"'@original'","type":[[["Snowflake"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":167,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"editReply","description":"Edits a reply to this interaction.","see":["Webhook#editMessage"],"scope":"instance","examples":["// Edit the initial reply to this interaction\ninteraction.editReply('New content')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The new options for the message","type":[[["string"]],[["MessagePayload"]],[["InteractionEditReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":190,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deleteReply","description":"Deletes a reply to this interaction.","see":["Webhook#deleteMessage"],"scope":"instance","examples":["// Delete the initial reply to this interaction\ninteraction.deleteReply()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"message","description":"The response to delete","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"async":true,"returns":[[[["Promise","<"],["void",">"]]]],"meta":{"line":209,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"followUp","description":"Send a follow-up message to this interaction.","scope":"instance","params":[{"name":"options","description":"The options for the reply","type":[[["string"]],[["MessagePayload"]],[["InteractionReplyOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":221,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"deferUpdate","description":"Defers an update to the message to which the component was attached.","scope":"instance","examples":["// Defer updating and reset the component's loading state\ninteraction.deferUpdate()\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for deferring the update to this interaction","optional":true,"type":[[["InteractionDeferUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":239,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"update","description":"Updates the original message of the component on which the interaction was received on.","scope":"instance","examples":["// Remove the components from the message\ninteraction.update({\n  content: \"A component interaction was received\",\n  components: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the updated message","optional":true,"type":[[["string"]],[["MessagePayload"]],[["InteractionUpdateOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":267,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"launchActivity","description":"Launches this application's activity, if enabled","scope":"instance","params":[{"name":"options","description":"Options for launching the activity","optional":true,"default":"{}","type":[[["LaunchActivityOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":296,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"showModal","description":"Shows a modal component","scope":"instance","params":[{"name":"modal","description":"The modal to show","type":[[["ModalBuilder"]],[["ModalComponentData"]],[["APIModalInteractionResponseCallbackData"]]]},{"name":"options","description":"The options for sending this interaction response","optional":true,"default":"{}","type":[[["ShowModalOptions"]]]}],"async":true,"returns":[[[["Promise","<("],["InteractionCallbackResponse","|"],["undefined",")>"]]]],"meta":{"line":317,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitModalSubmit","description":"Collects a single modal submit interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","examples":["// Collect a modal submit interaction\nconst filter = (interaction) => interaction.customId === 'modal';\ninteraction.awaitModalSubmit({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was submitted!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","type":[[["AwaitModalSubmitOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["ModalSubmitInteraction",">"]]]],"meta":{"line":353,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":24,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"messages","description":"A manager of the messages sent to this channel","scope":"instance","type":[[["GuildMessageManager"]]],"meta":{"line":25,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastMessageId","description":"The channel's last message id, if one was sent","scope":"instance","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":32,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","scope":"instance","nullable":true,"type":[[["number"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","scope":"instance","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","scope":"instance","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":58,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}}],"methods":[{"name":"send","description":"Sends a message to this channel.","scope":"instance","examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://github.com/discordjs.png']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg',\n    description: 'A description of the file'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"The options to provide","type":[[["string"]],[["MessagePayload"]],[["MessageCreateOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Message",">"]]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"sendTyping","description":"Sends a typing indicator in the channel.","scope":"instance","examples":["// Start typing in a channel\nchannel.sendTyping();"],"async":true,"returns":[{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the typing status being sent"}],"meta":{"line":195,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","scope":"instance","examples":["// Create a message collector\nconst filter = message => message.content.includes('discord');\nconst collector = channel.createMessageCollector({ filter, time: 15_000 });\ncollector.on('collect', message => console.log(`Collected ${message.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[[["MessageCollector"]]]],"meta":{"line":211,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","scope":"instance","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]]],"meta":{"line":236,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createMessageComponentCollector","description":"Creates a component interaction collector.","scope":"instance","examples":["// Create a button interaction collector\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nconst collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\ncollector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["MessageComponentCollectorOptions"]]]}],"returns":[[[["InteractionCollector"]]]],"meta":{"line":261,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"awaitMessageComponent","description":"Collects a single component interaction that passes the filter.\nThe Promise will reject if the time expires.","scope":"instance","examples":["// Collect a message component interaction\nconst filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\nchannel.awaitMessageComponent({ filter, time: 15_000 })\n  .then(interaction => console.log(`${interaction.customId} was clicked!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessageComponentOptions"]]]}],"async":true,"returns":[[[["Promise","<"],["MessageComponentInteraction",">"]]]],"meta":{"line":282,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages up to 2 weeks old.","scope":"instance","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.length} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["MessageResolvable",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Array","<"],["Snowflake",">>"]]],"description":"Returns the deleted messages ids"}],"meta":{"line":307,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","scope":"instance","examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"async":true,"returns":[[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]]],"meta":{"line":347,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","scope":"instance","examples":["// Create a webhook for the current channel\nchannel.createWebhook({\n  name: 'Snek',\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["ChannelWebhookCreateOptions"]]]}],"async":true,"returns":[{"types":[[["Promise","<"],["Webhook",">"]]],"description":"Returns the created Webhook"}],"meta":{"line":375,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user (slowmode) for this channel.","scope":"instance","params":[{"name":"rateLimitPerUser","description":"The new rate limit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's rate limit","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":386,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","scope":"instance","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[[["Promise","<"],["this",">"]]]],"meta":{"line":397,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}}],"meta":{"line":17,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}}],"typedefs":[{"name":"MessageReactionEventDetails","description":"Provides additional information about altered reaction","type":[[["Object"]]],"props":[{"name":"type","description":"The type of the reaction","type":[[["ReactionType"]]]},{"name":"burst","description":"Determines whether a super reaction was used","type":[[["boolean"]]]}],"meta":{"line":51,"file":"MessageReactionAdd.js","path":"packages/discord.js/src/client/actions"}},{"name":"WebhookDeleteOptions","description":"Options used for deleting a webhook.","type":[[["Object"]]],"props":[{"name":"token","description":"Token of the webhook","optional":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for deleting the webhook","optional":true,"type":[[["string"]]]}],"meta":{"line":74,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"Snowflake","description":"A {@link https://docs.x.com/resources/fundamentals/x-ids Twitter snowflake},\nexcept the epoch is 2015-01-01T00:00:00.000Z.\n\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n```\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n number of milliseconds since Discord epoch  worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":813,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ClientFetchInviteOptions","description":"Options used when fetching an invite from Discord.","type":[[["Object"]]],"props":[{"name":"guildScheduledEventId","description":"The id of the guild scheduled event to include with\nthe invite","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":458,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"StickerPackFetchOptions","description":"Options for fetching sticker packs.","type":[[["Object"]]],"props":[{"name":"packId","description":"The id of the sticker pack to fetch","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":550,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"InviteGenerationOptions","description":"Options for {@link Client#generateInvite}.","type":[[["Object"]]],"props":[{"name":"scopes","description":"Scopes that should be requested","type":[[["Array","<"],["OAuth2Scopes",">"]]]},{"name":"permissions","description":"Permissions to request","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"guild","description":"Guild to preselect","optional":true,"type":[[["GuildResolvable"]]]},{"name":"disableGuildSelect","description":"Whether to disable the guild selection","optional":true,"type":[[["boolean"]]]}],"meta":{"line":622,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"WebhookClientDataIdWithToken","description":"Represents the credentials used for a webhook in the form of its id and token.","type":[[["Object"]]],"props":[{"name":"id","description":"The webhook's id","type":[[["Snowflake"]]]},{"name":"token","description":"The webhook's token","type":[[["string"]]]}],"meta":{"line":15,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"WebhookClientDataURL","description":"Represents the credentials used for a webhook in the form of a URL.","type":[[["Object"]]],"props":[{"name":"url","description":"The full URL for the webhook","type":[[["string"]]]}],"meta":{"line":23,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"WebhookClientData","description":"Represents the credentials used for a webhook.","type":[[["WebhookClientDataIdWithToken"]],[["WebhookClientDataURL"]]],"meta":{"line":30,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"WebhookClientOptions","description":"Options for a webhook client.","type":[[["Object"]]],"props":[{"name":"allowedMentions","description":"Default value for {@link BaseMessageOptions#allowedMentions}","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"rest","description":"Options for the REST manager","optional":true,"type":[[["RESTOptions"]]]}],"meta":{"line":36,"file":"WebhookClient.js","path":"packages/discord.js/src/client"}},{"name":"GuildMembersChunk","description":"Represents the properties of a guild members chunk","type":[[["Object"]]],"props":[{"name":"index","description":"Index of the received chunk","type":[[["number"]]]},{"name":"count","description":"Number of chunks the client should receive","type":[[["number"]]]},{"name":"notFound","description":"An array of whatever could not be found\nwhen using {@link GatewayOpcodes.RequestGuildMembers}","type":[[["Array","<*>"]]]},{"name":"nonce","description":"Nonce for this chunk","nullable":true,"type":[[["string"]]]}],"meta":{"line":16,"file":"GUILD_MEMBERS_CHUNK.js","path":"packages/discord.js/src/client/websocket/handlers"}},{"name":"DiscordjsErrorCodes","type":[[["Object"]]],"props":[{"name":"ClientInvalidOption","type":[[["'ClientInvalidOption'"]]]},{"name":"ClientInvalidProvidedShards","type":[[["'ClientInvalidProvidedShards'"]]]},{"name":"ClientMissingIntents","type":[[["'ClientMissingIntents'"]]]},{"name":"ClientNotReady","type":[[["'ClientNotReady'"]]]},{"name":"TokenInvalid","type":[[["'TokenInvalid'"]]]},{"name":"TokenMissing","type":[[["'TokenMissing'"]]]},{"name":"ApplicationCommandPermissionsTokenMissing","type":[[["'ApplicationCommandPermissionsTokenMissing'"]]]},{"name":"BitFieldInvalid","type":[[["'BitFieldInvalid'"]]]},{"name":"ShardingNoShards","type":[[["'ShardingNoShards'"]]]},{"name":"ShardingInProcess","type":[[["'ShardingInProcess'"]]]},{"name":"ShardingInvalidEvalBroadcast","type":[[["'ShardingInvalidEvalBroadcast'"]]]},{"name":"ShardingShardNotFound","type":[[["'ShardingShardNotFound'"]]]},{"name":"ShardingAlreadySpawned","type":[[["'ShardingAlreadySpawned'"]]]},{"name":"ShardingProcessExists","type":[[["'ShardingProcessExists'"]]]},{"name":"ShardingWorkerExists","type":[[["'ShardingWorkerExists'"]]]},{"name":"ShardingReadyTimeout","type":[[["'ShardingReadyTimeout'"]]]},{"name":"ShardingReadyDisconnected","type":[[["'ShardingReadyDisconnected'"]]]},{"name":"ShardingReadyDied","type":[[["'ShardingReadyDied'"]]]},{"name":"ShardingNoChildExists","type":[[["'ShardingNoChildExists'"]]]},{"name":"ShardingShardMiscalculation","type":[[["'ShardingShardMiscalculation'"]]]},{"name":"ColorRange","type":[[["'ColorRange'"]]]},{"name":"ColorConvert","type":[[["'ColorConvert'"]]]},{"name":"InviteOptionsMissingChannel","type":[[["'InviteOptionsMissingChannel'"]]]},{"name":"InteractionCollectorError","type":[[["'InteractionCollectorError'"]]]},{"name":"FileNotFound","type":[[["'FileNotFound'"]]]},{"name":"UserNoDMChannel","type":[[["'UserNoDMChannel'"]]]},{"name":"VoiceNotStageChannel","type":[[["'VoiceNotStageChannel'"]]]},{"name":"VoiceStateNotOwn","type":[[["'VoiceStateNotOwn'"]]]},{"name":"VoiceStateInvalidType","type":[[["'VoiceStateInvalidType'"]]]},{"name":"ReqResourceType","type":[[["'ReqResourceType'"]]]},{"name":"MessageBulkDeleteType","type":[[["'MessageBulkDeleteType'"]]]},{"name":"MessageContentType","type":[[["'MessageContentType'"]]]},{"name":"MessageNonceRequired","type":[[["'MessageNonceRequired'"]]]},{"name":"MessageNonceType","type":[[["'MessageNonceType'"]]]},{"name":"BanResolveId","type":[[["'BanResolveId'"]]]},{"name":"FetchBanResolveId","type":[[["'FetchBanResolveId'"]]]},{"name":"PruneDaysType","type":[[["'PruneDaysType'"]]]},{"name":"GuildChannelResolve","type":[[["'GuildChannelResolve'"]]]},{"name":"GuildVoiceChannelResolve","type":[[["'GuildVoiceChannelResolve'"]]]},{"name":"GuildChannelOrphan","type":[[["'GuildChannelOrphan'"]]]},{"name":"GuildChannelUnowned","type":[[["'GuildChannelUnowned'"]]]},{"name":"GuildOwned","type":[[["'GuildOwned'"]]]},{"name":"GuildMembersTimeout","type":[[["'GuildMembersTimeout'"]]]},{"name":"GuildSoundboardSoundsTimeout","type":[[["'GuildSoundboardSoundsTimeout'"]]]},{"name":"GuildUncachedMe","type":[[["'GuildUncachedMe'"]]]},{"name":"ChannelNotCached","type":[[["'ChannelNotCached'"]]]},{"name":"StageChannelResolve","type":[[["'StageChannelResolve'"]]]},{"name":"GuildScheduledEventResolve","type":[[["'GuildScheduledEventResolve'"]]]},{"name":"FetchOwnerId","type":[[["'FetchOwnerId'"]]]},{"name":"InvalidType","type":[[["'InvalidType'"]]]},{"name":"InvalidElement","type":[[["'InvalidElement'"]]]},{"name":"MessageThreadParent","type":[[["'MessageThreadParent'"]]]},{"name":"MessageExistingThread","type":[[["'MessageExistingThread'"]]]},{"name":"ThreadInvitableType","type":[[["'ThreadInvitableType'"]]]},{"name":"NotAThreadOfParent","type":[[["'NotAThreadOfParent'"]]]},{"name":"WebhookMessage","type":[[["'WebhookMessage'"]]]},{"name":"WebhookTokenUnavailable","type":[[["'WebhookTokenUnavailable'"]]]},{"name":"WebhookURLInvalid","type":[[["'WebhookURLInvalid'"]]]},{"name":"WebhookApplication","type":[[["'WebhookApplication'"]]]},{"name":"MessageReferenceMissing","type":[[["'MessageReferenceMissing'"]]]},{"name":"EmojiType","type":[[["'EmojiType'"]]]},{"name":"EmojiManaged","type":[[["'EmojiManaged'"]]]},{"name":"MissingManageGuildExpressionsPermission","type":[[["'MissingManageGuildExpressionsPermission'"]]]},{"name":"NotGuildSoundboardSound","type":[[["'NotGuildSoundboardSound'"]]]},{"name":"NotGuildSticker","type":[[["'NotGuildSticker'"]]]},{"name":"ReactionResolveUser","type":[[["'ReactionResolveUser'"]]]},{"name":"InviteResolveCode","type":[[["'InviteResolveCode'"]]]},{"name":"InviteNotFound","type":[[["'InviteNotFound'"]]]},{"name":"DeleteGroupDMChannel","type":[[["'DeleteGroupDMChannel'"]]]},{"name":"FetchGroupDMChannel","type":[[["'FetchGroupDMChannel'"]]]},{"name":"MemberFetchNonceLength","type":[[["'MemberFetchNonceLength'"]]]},{"name":"GlobalCommandPermissions","type":[[["'GlobalCommandPermissions'"]]]},{"name":"GuildUncachedEntityResolve","type":[[["'GuildUncachedEntityResolve'"]]]},{"name":"InteractionAlreadyReplied","type":[[["'InteractionAlreadyReplied'"]]]},{"name":"InteractionNotReplied","type":[[["'InteractionNotReplied'"]]]},{"name":"CommandInteractionOptionNotFound","type":[[["'CommandInteractionOptionNotFound'"]]]},{"name":"CommandInteractionOptionType","type":[[["'CommandInteractionOptionType'"]]]},{"name":"CommandInteractionOptionEmpty","type":[[["'CommandInteractionOptionEmpty'"]]]},{"name":"CommandInteractionOptionNoSubcommand","type":[[["'CommandInteractionOptionNoSubcommand'"]]]},{"name":"CommandInteractionOptionNoSubcommandGroup","type":[[["'CommandInteractionOptionNoSubcommandGroup'"]]]},{"name":"CommandInteractionOptionInvalidChannelType","type":[[["'CommandInteractionOptionInvalidChannelType'"]]]},{"name":"AutocompleteInteractionOptionNoFocusedOption","type":[[["'AutocompleteInteractionOptionNoFocusedOption'"]]]},{"name":"ModalSubmitInteractionFieldNotFound","type":[[["'ModalSubmitInteractionFieldNotFound'"]]]},{"name":"ModalSubmitInteractionFieldType","type":[[["'ModalSubmitInteractionFieldType'"]]]},{"name":"InvalidMissingScopes","type":[[["'InvalidMissingScopes'"]]]},{"name":"InvalidScopesWithPermissions","type":[[["'InvalidScopesWithPermissions'"]]]},{"name":"NotImplemented","type":[[["'NotImplemented'"]]]},{"name":"GuildForumMessageRequired","type":[[["'GuildForumMessageRequired'"]]]},{"name":"SweepFilterReturn","type":[[["'SweepFilterReturn'"]]]},{"name":"EntitlementCreateInvalidOwner","type":[[["'EntitlementCreateInvalidOwner'"]]]},{"name":"BulkBanUsersOptionEmpty","type":[[["'BulkBanUsersOptionEmpty'"]]]},{"name":"PollAlreadyExpired","type":[[["'PollAlreadyExpired'"]]]},{"name":"PermissionOverwritesTypeMandatory","type":[[["'PermissionOverwritesTypeMandatory'"]]]},{"name":"PermissionOverwritesTypeMismatch","type":[[["'PermissionOverwritesTypeMismatch'"]]]}],"meta":{"line":4,"file":"ErrorCodes.js","path":"packages/discord.js/src/errors"}},{"name":"ApplicationCommandResolvable","description":"Data that resolves to give an ApplicationCommand object. This can be:\n- An ApplicationCommand object\n- A Snowflake","type":[[["ApplicationCommand"]],[["Snowflake"]]],"meta":{"line":67,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationCommandDataResolvable","description":"Data that resolves to the data of an ApplicationCommand","type":[[["ApplicationCommandData"]],[["APIApplicationCommand"]]],"meta":{"line":75,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"BaseFetchOptions","description":"Options used to fetch data from Discord","type":[[["Object"]]],"props":[{"name":"cache","description":"Whether to cache the fetched data if it wasn't already","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":81,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchApplicationCommandOptions","description":"Options used to fetch Application Commands from Discord","type":[[["BaseFetchOptions"]]],"props":[{"name":"id","description":"The command's id to fetch","optional":true,"type":[[["Snowflake"]]]},{"name":"guildId","description":"The guild's id to fetch commands for, for when the guild is not cached","optional":true,"type":[[["Snowflake"]]]},{"name":"locale","description":"The locale to use when fetching this command","optional":true,"type":[[["Locale"]]]},{"name":"withLocalizations","description":"Whether to fetch all localization data","optional":true,"type":[[["boolean"]]]}],"meta":{"line":89,"file":"ApplicationCommandManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationCommandPermissionIdResolvable","description":"Data that resolves to an id used for an application command permission","type":[[["UserResolvable"]],[["RoleResolvable"]],[["GuildChannelResolvable"]],[["RolePermissionConstant"]],[["ChannelPermissionConstant"]]],"meta":{"line":448,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationCommandPermissions","description":"The object returned when fetching permissions for an application command.","type":[[["Object"]]],"props":[{"name":"id","description":"The role, user, or channel's id. Can also be a\n{@link https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants permission constant}.","type":[[["Snowflake"]]]},{"name":"type","description":"Whether this permission is for a role or a user","type":[[["ApplicationCommandPermissionType"]]]},{"name":"permission","description":"Whether the role or user has the permission to use this command","type":[[["boolean"]]]}],"meta":{"line":63,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"BaseApplicationCommandPermissionsOptions","description":"Options for managing permissions for one or more Application Commands\n<warn>When passing these options to a manager where `guildId` is `null`,\n`guild` is a required parameter</warn>","type":[[["Object"]]],"props":[{"name":"guild","description":"The guild to modify / check permissions for\n<warn>Ignored when the manager has a non-null `guildId` property</warn>","optional":true,"type":[[["GuildResolvable"]]]},{"name":"command","description":"The command to modify / check permissions for\n<warn>Ignored when the manager has a non-null `commandId` property</warn>","optional":true,"type":[[["ApplicationCommandResolvable"]]]}],"meta":{"line":73,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationCommandPermissionsEditOptions","description":"Options used to set permissions for one or more Application Commands in a guild\n<warn>Omitting the `command` parameter edits the guild wide permissions\nwhen the manager's `commandId` is `null`</warn>","type":[[["BaseApplicationCommandPermissionsOptions"]]],"props":[{"name":"permissions","description":"The new permissions for the guild or overwrite","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]},{"name":"token","description":"The bearer token to use that authorizes the permission edit","type":[[["string"]]]}],"meta":{"line":118,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"RolePermissionConstant","description":"A static snowflake that identifies the everyone role for application command permissions.\nIt is the same as the guild id","type":[[["Snowflake"]]],"meta":{"line":242,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"ChannelPermissionConstant","description":"A static snowflake that identifies the \"all channels\" entity for application command permissions.\nIt will be the result of the calculation `guildId - 1`","type":[[["Snowflake"]]],"meta":{"line":249,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"RemoveApplicationCommandPermissionsOptions","description":"Options used to remove permissions from a command\n<warn>Omitting the `command` parameter removes from the guild wide permissions\nwhen the managers `commandId` is `null`</warn>\n<warn>At least one of `users`, `roles`, and `channels` is required</warn>","type":[[["BaseApplicationCommandPermissionsOptions"]]],"props":[{"name":"token","description":"The bearer token to use that authorizes the permission removal","type":[[["string"]]]},{"name":"users","description":"The user(s) to remove","optional":true,"type":[[["Array","<"],["UserResolvable",">"]]]},{"name":"roles","description":"The role(s) to remove","optional":true,"type":[[["Array","<("],["RoleResolvable","|"],["RolePermissionConstant",")>"]]]},{"name":"channels","description":"The channel(s) to remove","optional":true,"type":[[["Array","<("],["GuildChannelResolvable","|"],["ChannelPermissionConstant",")>"]]]}],"meta":{"line":256,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"HasApplicationCommandPermissionsOptions","description":"Options used to check the existence of permissions on a command\n<warn>The `command` parameter is not optional when the managers `commandId` is `null`</warn>","type":[[["BaseApplicationCommandPermissionsOptions"]]],"props":[{"name":"permissionId","description":"The entity to check if a permission exists for\non this command.","type":[[["ApplicationCommandPermissionIdResolvable"]]]},{"name":"permissionType","description":"Check for a specific type of permission","optional":true,"type":[[["ApplicationCommandPermissionType"]]]}],"meta":{"line":364,"file":"ApplicationCommandPermissionsManager.js","path":"packages/discord.js/src/managers"}},{"name":"ApplicationEmojiCreateOptions","description":"Options used for creating an emoji of the application","type":[[["Object"]]],"props":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]}],"meta":{"line":31,"file":"ApplicationEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationTriggerMetadataOptions","description":"Options used to set the trigger metadata of an auto moderation rule.","type":[[["Object"]]],"props":[{"name":"keywordFilter","description":"The substrings that will be searched for in the content","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"regexPatterns","description":"The regular expression patterns which will be matched against the content\n<info>Only Rust-flavored regular expressions are supported.</info>","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"presets","description":"The internally pre-defined wordsets which will be searched for in the content","optional":true,"type":[[["Array","<"],["AutoModerationRuleKeywordPresetType",">"]]]},{"name":"allowList","description":"The substrings that will be exempt from triggering\n{@link AutoModerationRuleTriggerType.Keyword},\n{@link AutoModerationRuleTriggerType.KeywordPreset},\nand {@link AutoModerationRuleTriggerType.MemberProfile}","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"mentionTotalLimit","description":"The total number of role & user mentions allowed per message","optional":true,"nullable":true,"type":[[["number"]]]},{"name":"mentionRaidProtectionEnabled","description":"Whether to automatically detect mention raids","optional":true,"type":[[["boolean"]]]}],"meta":{"line":56,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationActionOptions","description":"Options used to set the actions of an auto moderation rule.","type":[[["Object"]]],"props":[{"name":"type","description":"The type of this auto moderation rule action","type":[[["AutoModerationActionType"]]]},{"name":"metadata","description":"Additional metadata needed during execution\n<info>This property is required if using a `type` of\n{@link AutoModerationActionType.SendAlertMessage} or {@link AutoModerationActionType.Timeout}.</info>","optional":true,"type":[[["AutoModerationActionMetadataOptions"]]]}],"meta":{"line":73,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationActionMetadataOptions","description":"Options used to set the metadata of an auto moderation rule action.","type":[[["Object"]]],"props":[{"name":"channel","description":"The channel to which content will be logged","optional":true,"type":[[["GuildTextChannelResolvable"]],[["ThreadChannel"]]]},{"name":"durationSeconds","description":"The timeout duration in seconds","optional":true,"type":[[["number"]]]},{"name":"customMessage","description":"The custom message that is shown whenever a message is blocked","optional":true,"type":[[["string"]]]}],"meta":{"line":83,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationRuleCreateOptions","description":"Options used to create an auto moderation rule.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the auto moderation rule","type":[[["string"]]]},{"name":"eventType","description":"The event type of the auto moderation rule","type":[[["AutoModerationRuleEventType"]]]},{"name":"triggerType","description":"The trigger type of the auto moderation rule","type":[[["AutoModerationRuleTriggerType"]]]},{"name":"triggerMetadata","description":"The trigger metadata of the auto moderation rule\n<info>This property is required if using a `triggerType` of\n{@link AutoModerationRuleTriggerType.Keyword},\n{@link AutoModerationRuleTriggerType.KeywordPreset},\n{@link AutoModerationRuleTriggerType.MentionSpam},\nor {@link AutoModerationRuleTriggerType.MemberProfile}.</info>","optional":true,"type":[[["AutoModerationTriggerMetadataOptions"]]]},{"name":"actions","description":"The actions that will execute when the auto moderation rule is triggered","type":[[["Array","<"],["AutoModerationActionOptions",">"]]]},{"name":"enabled","description":"Whether the auto moderation rule should be enabled","optional":true,"type":[[["boolean"]]]},{"name":"exemptRoles","description":"The roles that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"exemptChannels","description":"The channels that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["GuildChannel","|"],["ThreadChannel",")>"]],[["Array","<"],["GuildChannelResolvable",">"]]]},{"name":"reason","description":"The reason for creating the auto moderation rule","optional":true,"type":[[["string"]]]}],"meta":{"line":92,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationRuleEditOptions","description":"Options used to edit an auto moderation rule.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the auto moderation rule","optional":true,"type":[[["string"]]]},{"name":"eventType","description":"The event type of the auto moderation rule","optional":true,"type":[[["AutoModerationRuleEventType"]]]},{"name":"triggerMetadata","description":"The trigger metadata of the auto moderation rule","optional":true,"type":[[["AutoModerationTriggerMetadataOptions"]]]},{"name":"actions","description":"The actions that will execute when the auto moderation rule is triggered","optional":true,"type":[[["Array","<"],["AutoModerationActionOptions",">"]]]},{"name":"enabled","description":"Whether the auto moderation rule should be enabled","optional":true,"type":[[["boolean"]]]},{"name":"exemptRoles","description":"The roles that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"exemptChannels","description":"The channels that should not be affected by the auto moderation rule","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["GuildChannel","|"],["ThreadChannel",")>"]],[["Array","<"],["GuildChannelResolvable",">"]]]},{"name":"reason","description":"The reason for creating the auto moderation rule","optional":true,"type":[[["string"]]]}],"meta":{"line":163,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"AutoModerationRuleResolvable","description":"Data that can be resolved to give an AutoModerationRule object. This can be:\n- An AutoModerationRule\n- A Snowflake","type":[[["AutoModerationRule"]],[["Snowflake"]]],"meta":{"line":223,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchAutoModerationRuleOptions","description":"Options used to fetch a single auto moderation rule from a guild.","type":[[["BaseFetchOptions"]]],"props":[{"name":"autoModerationRule","description":"The auto moderation rule to fetch","type":[[["AutoModerationRuleResolvable"]]]}],"meta":{"line":231,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchAutoModerationRulesOptions","description":"Options used to fetch all auto moderation rules from a guild.","type":[[["Object"]]],"props":[{"name":"cache","description":"Whether to cache the fetched auto moderation rules","optional":true,"type":[[["boolean"]]]}],"meta":{"line":238,"file":"AutoModerationRuleManager.js","path":"packages/discord.js/src/managers"}},{"name":"CategoryCreateChannelOptions","description":"Options for creating a channel using {@link CategoryChannelChildManager#create}.","type":[[["Object"]]],"props":[{"name":"name","description":"The name for the new channel","type":[[["string"]]]},{"name":"type","description":"The type of the new channel.","optional":true,"default":"ChannelType.GuildText","type":[[["ChannelType"]]]},{"name":"topic","description":"The topic for the new channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the new channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"type":[[["number"]]]},{"name":"permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"position","description":"Position of the new channel","optional":true,"type":[[["number"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for the new channel in seconds","optional":true,"type":[[["number"]]]},{"name":"rtcRegion","description":"The specific region of the new channel.","optional":true,"type":[[["string"]]]},{"name":"videoQualityMode","description":"The camera video quality mode of the voice channel","optional":true,"type":[[["VideoQualityMode"]]]},{"name":"defaultThreadRateLimitPerUser","description":"The initial rate limit per user (slowmode)\nto set on newly created threads in a channel.","optional":true,"type":[[["number"]]]},{"name":"availableTags","description":"The tags that can be used in this channel (forum only).","optional":true,"type":[[["Array","<"],["GuildForumTagData",">"]]]},{"name":"defaultReactionEmoji","description":"The emoji to show in the add reaction button on a thread in a guild forum channel.","optional":true,"type":[[["DefaultReactionEmoji"]]]},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for all new threads in this channel","optional":true,"type":[[["ThreadAutoArchiveDuration"]]]},{"name":"defaultSortOrder","description":"The default sort order mode used to order posts (forum only).","optional":true,"type":[[["SortOrderType"]]]},{"name":"defaultForumLayout","description":"The default layout used to display posts (forum only).","optional":true,"type":[[["ForumLayoutType"]]]},{"name":"reason","description":"Reason for creating the new channel","optional":true,"type":[[["string"]]]}],"meta":{"line":42,"file":"CategoryChannelChildManager.js","path":"packages/discord.js/src/managers"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel object. This can be:\n- A Channel object\n- A Snowflake","type":[[["BaseChannel"]],[["Snowflake"]]],"meta":{"line":88,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchChannelOptions","description":"Options for fetching a channel from Discord","type":[[["BaseFetchOptions"]]],"props":[{"name":"allowUnknownGuild","description":"Allows the channel to be returned even if the guild is not in cache,\nit will not be cached. <warn>Many of the properties and methods on the returned channel will throw errors</warn>","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":116,"file":"ChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"EntitlementResolvable","description":"Data that resolves to give an Entitlement object. This can be:\n- An Entitlement object\n- A Snowflake","type":[[["Entitlement"]],[["Snowflake"]]],"meta":{"line":28,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"SKUResolvable","description":"Data that resolves to give a SKU object. This can be:\n- A SKU object\n- A Snowflake","type":[[["SKU"]],[["Snowflake"]]],"meta":{"line":36,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchEntitlementOptions","description":"Options used to fetch an entitlement","type":[[["BaseFetchOptions"]]],"props":[{"name":"entitlement","description":"The entitlement to fetch","type":[[["EntitlementResolvable"]]]}],"meta":{"line":44,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchEntitlementsOptions","description":"Options used to fetch entitlements","type":[[["Object"]]],"props":[{"name":"limit","description":"The maximum number of entitlements to fetch","optional":true,"type":[[["number"]]]},{"name":"guild","description":"The guild to fetch entitlements for","optional":true,"type":[[["GuildResolvable"]]]},{"name":"user","description":"The user to fetch entitlements for","optional":true,"type":[[["UserResolvable"]]]},{"name":"skus","description":"The SKUs to fetch entitlements for","optional":true,"type":[[["Array","<"],["SKUResolvable",">"]]]},{"name":"excludeEnded","description":"Whether to exclude ended entitlements","optional":true,"type":[[["boolean"]]]},{"name":"excludeDeleted","description":"Whether to exclude deleted entitlements","optional":true,"type":[[["boolean"]]]},{"name":"cache","description":"Whether to cache the fetched entitlements","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"before","description":"Consider only entitlements before this entitlement id","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"Consider only entitlements after this entitlement id\n<warn>If both `before` and `after` are provided, only `before` is respected</warn>","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":51,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"EntitlementCreateOptions","description":"Options used to create a test entitlement\n<info>Either `guild` or `user` must be provided, but not both</info>","type":[[["Object"]]],"props":[{"name":"sku","description":"The id of the SKU to create the entitlement for","type":[[["SKUResolvable"]]]},{"name":"guild","description":"The guild to create the entitlement for","optional":true,"type":[[["GuildResolvable"]]]},{"name":"user","description":"The user to create the entitlement for","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":119,"file":"EntitlementManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildBanResolvable","description":"Data that resolves to give a GuildBan object. This can be:\n- A GuildBan object\n- A User resolvable","type":[[["GuildBan"]],[["UserResolvable"]]],"meta":{"line":38,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchBanOptions","description":"Options used to fetch a single ban from a guild.","type":[[["BaseFetchOptions"]]],"props":[{"name":"user","description":"The ban to fetch","type":[[["UserResolvable"]]]}],"meta":{"line":56,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchBansOptions","description":"Options used to fetch multiple bans from a guild.","type":[[["Object"]]],"props":[{"name":"limit","description":"The maximum number of bans to return","optional":true,"type":[[["number"]]]},{"name":"before","description":"Consider only bans before this id","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"Consider only bans after this id","optional":true,"type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the fetched bans","optional":true,"type":[[["boolean"]]]}],"meta":{"line":63,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"BanOptions","description":"Options used to ban a user from a guild.","type":[[["Object"]]],"props":[{"name":"deleteMessageSeconds","description":"Number of seconds of messages to delete,\nmust be between 0 and 604800 (7 days), inclusive","optional":true,"type":[[["number"]]]},{"name":"reason","description":"The reason for the ban","optional":true,"type":[[["string"]]]}],"meta":{"line":135,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"BulkBanResult","description":"Result of bulk banning users from a guild.","type":[[["Object"]]],"props":[{"name":"bannedUsers","description":"IDs of the banned users","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"failedUsers","description":"IDs of the users that could not be banned or were already banned","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":183,"file":"GuildBanManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildChannelResolvable","description":"Data that can be resolved to give a Guild Channel object. This can be:\n- A GuildChannel object\n- A ThreadChannel object\n- A Snowflake","type":[[["GuildChannel"]],[["ThreadChannel"]],[["Snowflake"]]],"meta":{"line":77,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"AnnouncementChannelResolvable","description":"Data that can be resolved to an Announcement Channel object. This can be:\n- An Announcement Channel object\n- A Snowflake","type":[[["AnnouncementChannel"]],[["Snowflake"]]],"meta":{"line":108,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"FollowedChannelData","description":"Represents the followed channel data.","type":[[["Object"]]],"props":[{"name":"channelId","description":"Source channel id","type":[[["Snowflake"]]]},{"name":"webhookId","description":"Created webhook id in the target channel","type":[[["Snowflake"]]]}],"meta":{"line":116,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildChannelCreateOptions","description":"Options used to create a new channel in a guild.","type":[[["CategoryCreateChannelOptions"]]],"props":[{"name":"parent","description":"Parent of the new channel","optional":true,"nullable":true,"type":[[["CategoryChannelResolvable"]]]}],"meta":{"line":150,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"WebhookCreateOptions","type":[[["ChannelWebhookCreateOptions"]]],"props":[{"name":"channel","description":"The channel to create the webhook for","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]],[["Snowflake"]]]}],"meta":{"line":229,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildChannelEditOptions","description":"Options used to edit a guild channel.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"type","description":"The type of the channel (only conversion between text and announcement is supported)","optional":true,"type":[[["ChannelType"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the voice channel","optional":true,"type":[[["number"]]]},{"name":"parent","description":"The parent of the channel","optional":true,"nullable":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"lockPermissions","description":"Lock the permissions of the channel to what the parent's permissions are","optional":true,"type":[[["boolean"]]]},{"name":"permissionOverwrites","description":"Permission overwrites for the channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for the channel in seconds","optional":true,"type":[[["number"]]]},{"name":"defaultAutoArchiveDuration","description":"The default auto archive duration for all new threads in this channel","optional":true,"type":[[["ThreadAutoArchiveDuration"]]]},{"name":"rtcRegion","description":"The RTC region of the channel","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"videoQualityMode","description":"The camera video quality mode of the channel","optional":true,"nullable":true,"type":[[["VideoQualityMode"]]]},{"name":"availableTags","description":"The tags to set as available in a forum channel","optional":true,"type":[[["Array","<"],["GuildForumTagData",">"]]]},{"name":"defaultReactionEmoji","description":"The emoji to set as the default reaction emoji","optional":true,"nullable":true,"type":[[["DefaultReactionEmoji"]]]},{"name":"defaultThreadRateLimitPerUser","description":"The rate limit per user (slowmode) to set on forum posts","optional":true,"type":[[["number"]]]},{"name":"flags","description":"The flags to set on the channel","optional":true,"type":[[["ChannelFlagsResolvable"]]]},{"name":"defaultSortOrder","description":"The default sort order mode to set on the channel","optional":true,"nullable":true,"type":[[["SortOrderType"]]]},{"name":"defaultForumLayout","description":"The default forum layout to set on the channel","optional":true,"type":[[["ForumLayoutType"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"meta":{"line":268,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"CategoryChannelResolvable","description":"Data that can be resolved to give a Category Channel object. This can be:\n- A CategoryChannel object\n- A Snowflake","type":[[["CategoryChannel"]],[["Snowflake"]]],"meta":{"line":457,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["GuildChannel"]],[["Snowflake"]]]},{"name":"position","description":"New position for the channel","optional":true,"type":[[["number"]]]},{"name":"parent","description":"Parent channel for this channel","optional":true,"type":[[["CategoryChannelResolvable"]]]},{"name":"lockPermissions","description":"If the overwrites should be locked to the parents overwrites","optional":true,"type":[[["boolean"]]]}],"meta":{"line":465,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchedThreads","description":"Data returned from fetching threads.","type":[[["Object"]]],"props":[{"name":"threads","description":"The threads that were fetched","type":[[["Collection","<"],["Snowflake",", "],["ThreadChannel",">"]]]},{"name":"members","description":"The thread members in the received threads","type":[[["Collection","<"],["Snowflake",", "],["ThreadMember",">"]]]}],"meta":{"line":502,"file":"GuildChannelManager.js","path":"packages/discord.js/src/managers"}},{"name":"EmojiResolvable","description":"Data that can be resolved into a GuildEmoji object. This can be:\n- A Snowflake\n- A GuildEmoji object\n- A ReactionEmoji object\n- An ApplicationEmoji object","type":[[["Snowflake"]],[["GuildEmoji"]],[["ReactionEmoji"]],[["ApplicationEmoji"]]],"meta":{"line":40,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"EmojiIdentifierResolvable","description":"Data that can be resolved to give an emoji identifier. This can be:\n- An EmojiResolvable\n- The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n- The Unicode representation of an emoji","type":[[["string"]],[["EmojiResolvable"]]],"meta":{"line":74,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildEmojiCreateOptions","description":"Options used for creating an emoji in a guild.","type":[[["Object"]]],"props":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]},{"name":"roles","description":"The roles to limit the emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"The reason for creating the emoji","optional":true,"type":[[["string"]]]}],"meta":{"line":108,"file":"GuildEmojiManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildForumThreadMessageCreateOptions","type":[[["BaseMessageOptions"]]],"props":[{"name":"stickers","description":"The stickers to send with the message","optional":true,"type":[[["StickerResolvable"]]]},{"name":"flags","description":"The flags to send with the message\n<info>Only `MessageFlags.SuppressEmbeds` and `MessageFlags.SuppressNotifications` can be set.</info>","optional":true,"type":[[["BitFieldResolvable"]]]}],"meta":{"line":21,"file":"GuildForumThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildForumThreadCreateOptions","description":"Options for creating a thread.","type":[[["StartThreadOptions"]]],"props":[{"name":"message","description":"The message associated with the thread post","type":[[["GuildForumThreadMessageCreateOptions"]],[["MessagePayload"]]]},{"name":"appliedTags","description":"The tags to apply to the thread","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":28,"file":"GuildForumThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n- An invite code\n- An invite URL","type":[[["string"]]],"meta":{"line":10,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"GuildInvitableChannelResolvable","description":"Data that can be resolved to a channel that an invite can be created on. This can be:\n- TextChannel\n- VoiceChannel\n- AnnouncementChannel\n- StageChannel\n- ForumChannel\n- MediaChannel\n- Snowflake","type":[[["TextChannel"]],[["VoiceChannel"]],[["AnnouncementChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]],[["Snowflake"]]],"meta":{"line":46,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchInviteOptions","description":"Options used to fetch a single invite from a guild.","type":[[["Object"]]],"props":[{"name":"code","description":"The invite to fetch","type":[[["InviteResolvable"]]]},{"name":"cache","description":"Whether or not to cache the fetched invite","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"force","description":"Whether to skip the cache check and request the API","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":80,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchInvitesOptions","description":"Options used to fetch all invites from a guild.","type":[[["Object"]]],"props":[{"name":"channelId","description":"The channel to fetch all invites from","optional":true,"type":[[["GuildInvitableChannelResolvable"]]]},{"name":"cache","description":"Whether or not to cache the fetched invites","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":89,"file":"GuildInviteManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\n- A Guild object\n- A GuildChannel object\n- A GuildEmoji object\n- A Role object\n- A Snowflake\n- An Invite object","type":[[["Guild"]],[["GuildChannel"]],[["GuildMember"]],[["GuildEmoji"]],[["Role"]],[["Snowflake"]],[["Invite"]]],"meta":{"line":51,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"PartialRoleData","description":"Partial data for a Role.","type":[[["Object"]]],"props":[{"name":"id","description":"The role's id, used to set channel overrides.\nThis is a placeholder and will be replaced by the API after consumption","optional":true,"type":[[["Snowflake"]],[["number"]]]},{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"mentionable","description":"Whether the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":63,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"PartialOverwriteData","description":"Partial overwrite data.","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the {@link Role} or {@link User} this overwrite belongs to","type":[[["Snowflake"]],[["number"]]]},{"name":"type","description":"The type of this overwrite","optional":true,"type":[[["OverwriteType"]]]},{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]}],"meta":{"line":77,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"PartialChannelData","description":"Partial data for a Channel.","type":[[["Object"]]],"props":[{"name":"id","description":"The channel's id, used to set its parent.\nThis is a placeholder and will be replaced by the API after consumption","optional":true,"type":[[["Snowflake"]],[["number"]]]},{"name":"parentId","description":"The parent id for this channel","optional":true,"type":[[["Snowflake"]],[["number"]]]},{"name":"type","description":"The type of the channel","optional":true,"type":[[["ChannelTypeGuildText"]],[["ChannelTypeGuildVoice"]],[["ChannelTypeGuildCategory"]]]},{"name":"name","description":"The name of the channel","type":[[["string"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the channel","optional":true,"type":[[["number"]]]},{"name":"rtcRegion","description":"The RTC region of the channel","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"videoQualityMode","description":"The camera video quality mode of the channel","optional":true,"type":[[["VideoQualityMode"]]]},{"name":"permissionOverwrites","description":"Overwrites of the channel","optional":true,"type":[[["Array","<"],["PartialOverwriteData",">"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) of the channel in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":87,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildCreateOptions","description":"Options used to create a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"icon","description":"The icon for the guild","optional":true,"default":null,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"verificationLevel","description":"The verification level for the guild","optional":true,"type":[[["GuildVerificationLevel"]]]},{"name":"defaultMessageNotifications","description":"The default message notifications\nfor the guild","optional":true,"type":[[["GuildDefaultMessageNotifications"]]]},{"name":"explicitContentFilter","description":"The explicit content filter level for the guild","optional":true,"type":[[["GuildExplicitContentFilter"]]]},{"name":"roles","description":"The roles for this guild,","optional":true,"default":"[]","type":[[["Array","<"],["PartialRoleData",">"]]]},{"name":"channels","description":"The channels for this guild","optional":true,"default":"[]","type":[[["Array","<"],["PartialChannelData",">"]]]},{"name":"afkChannelId","description":"The AFK channel's id","optional":true,"type":[[["Snowflake"]],[["number"]]]},{"name":"afkTimeout","description":"The AFK timeout in seconds\nthe first element of this array is used to change properties of the guild's everyone role.","optional":true,"type":[[["number"]]]},{"name":"systemChannelId","description":"The system channel's id","optional":true,"type":[[["Snowflake"]],[["number"]]]},{"name":"systemChannelFlags","description":"The flags of the system channel","optional":true,"type":[[["SystemChannelFlagsResolvable"]]]}],"meta":{"line":153,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildOptions","description":"Options used to fetch a single guild.","type":[[["BaseFetchOptions"]]],"props":[{"name":"guild","description":"The guild to fetch","type":[[["GuildResolvable"]]]},{"name":"withCounts","description":"Whether the approximate member and presence counts should be returned","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":259,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildsOptions","description":"Options used to fetch multiple guilds.","type":[[["Object"]]],"props":[{"name":"before","description":"Get guilds before this guild id","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"Get guilds after this guild id","optional":true,"type":[[["Snowflake"]]]},{"name":"limit","description":"Maximum number of guilds to request (1-200)","optional":true,"type":[[["number"]]]}],"meta":{"line":267,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchSoundboardSoundsOptions","type":[[["Object"]]],"props":[{"name":"guildIds","description":"The ids of the guilds to fetch soundboard sounds for","type":[[["Array","<"],["Snowflake",">"]]]},{"name":"time","description":"The timeout for receipt of the soundboard sounds","optional":true,"default":"10_000","type":[[["number"]]]}],"meta":{"line":302,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"IncidentActionsEditOptions","description":"Options used to set incident actions. Supplying `null` to any option will disable the action.","type":[[["Object"]]],"props":[{"name":"invitesDisabledUntil","description":"When invites should be enabled again","optional":true,"nullable":true,"type":[[["DateResolvable"]]]},{"name":"dmsDisabledUntil","description":"When direct messages should be enabled again","optional":true,"nullable":true,"type":[[["DateResolvable"]]]}],"meta":{"line":371,"file":"GuildManager.js","path":"packages/discord.js/src/managers"}},{"name":"AddGuildMemberOptions","description":"Options used to add a user to a guild using OAuth2.","type":[[["Object"]]],"props":[{"name":"accessToken","description":"An OAuth2 access token for the user with the {@link OAuth2Scopes.GuildsJoin}\nscope granted to the bot's application","type":[[["string"]]]},{"name":"nick","description":"The nickname to give to the member\n<info>This property requires the {@link PermissionFlagsBits.ManageNicknames} permission.</info>","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles to add to the member\n<info>This property requires the {@link PermissionFlagsBits.ManageRoles} permission.</info>","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether the member should be muted\n<info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether the member should be deafened\n<info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>","optional":true,"type":[[["boolean"]]]},{"name":"force","description":"Whether to skip the cache check and request the API directly","optional":true,"type":[[["boolean"]]]},{"name":"fetchWhenExisting","description":"Whether to fetch the user if not cached and already a member","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":72,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchMemberOptions","description":"Options used to fetch a single member from a guild.","type":[[["BaseFetchOptions"]]],"props":[{"name":"user","description":"The user to fetch","type":[[["UserResolvable"]]]}],"meta":{"line":160,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchMembersOptions","description":"Options used to fetch multiple members from a guild.","type":[[["Object"]]],"props":[{"name":"user","description":"The user(s) to fetch","optional":true,"type":[[["UserResolvable"]],[["Array","<"],["UserResolvable",">"]]]},{"name":"query","description":"Limit fetch to members with similar usernames","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to request","optional":true,"default":0,"type":[[["number"]]]},{"name":"withPresences","description":"Whether to include the presences","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"time","description":"Timeout for receipt of members","optional":true,"default":"120e3","type":[[["number"]]]},{"name":"nonce","description":"Nonce for this request (32 characters max - default to base 16 now timestamp)","optional":true,"nullable":true,"type":[[["string"]]]}],"meta":{"line":167,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildSearchMembersOptions","description":"Options used for searching guild members.","type":[[["Object"]]],"props":[{"name":"query","description":"Filter members whose username or nickname start with this query","type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to search","optional":true,"type":[[["number"]]]},{"name":"cache","description":"Whether or not to cache the fetched member(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":301,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildListMembersOptions","description":"Options used for listing guild members.","type":[[["Object"]]],"props":[{"name":"after","description":"Limit fetching members to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"limit","description":"Maximum number of members to list","optional":true,"type":[[["number"]]]},{"name":"cache","description":"Whether or not to cache the fetched member(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":323,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildMemberEditOptions","description":"The data for editing a guild member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role ids to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move the member to\n(if they are connected to voice), or `null` if you want to disconnect them from voice","optional":true,"nullable":true,"type":[[["GuildVoiceChannelResolvable"]]]},{"name":"communicationDisabledUntil","description":"The date or timestamp\nfor the member's communication to be disabled until. Provide `null` to enable communication again.","optional":true,"nullable":true,"type":[[["DateResolvable"]]]},{"name":"flags","description":"The flags to set for the member","optional":true,"type":[[["GuildMemberFlagsResolvable"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"meta":{"line":344,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildPruneMembersOptions","description":"Options used for pruning guild members.\n<info>It's recommended to set {@link GuildPruneMembersOptions#count options.count}\nto `false` for large guilds.</info>","type":[[["Object"]]],"props":[{"name":"days","description":"Number of days of inactivity required to kick","optional":true,"type":[[["number"]]]},{"name":"dry","description":"Get the number of users that will be kicked, without actually kicking them","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"count","description":"Whether or not to return the number of users that have been kicked.","optional":true,"type":[[["boolean"]]]},{"name":"roles","description":"Array of roles to bypass the \"...and no roles\" constraint when pruning","optional":true,"type":[[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"meta":{"line":415,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"AddOrRemoveGuildMemberRoleOptions","description":"Options used for adding or removing a role from a member.","type":[[["Object"]]],"props":[{"name":"user","description":"The user to add/remove the role from","type":[[["UserResolvable"]]]},{"name":"role","description":"The role to add/remove","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for adding/removing the role","optional":true,"type":[[["string"]]]}],"meta":{"line":543,"file":"GuildMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventResolvable","description":"Data that resolves to give a GuildScheduledEvent object. This can be:\n- A Snowflake\n- A GuildScheduledEvent object","type":[[["Snowflake"]],[["GuildScheduledEvent"]]],"meta":{"line":36,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventRecurrenceRuleOptions","description":"Options for setting a recurrence rule for a guild scheduled event.","type":[[["Object"]]],"props":[{"name":"startAt","description":"The time the recurrence rule interval starts at","type":[[["DateResolvable"]]]},{"name":"frequency","description":"How often the event occurs","type":[[["GuildScheduledEventRecurrenceRuleFrequency"]]]},{"name":"interval","description":"The spacing between the events","type":[[["number"]]]},{"name":"byWeekday","description":"The days within a week to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleWeekday",">"]]]},{"name":"byNWeekday","description":"The days within a week to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleNWeekday",">"]]]},{"name":"byMonth","description":"The months to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleMonth",">"]]]},{"name":"byMonthDay","description":"The days within a month to recur on","nullable":true,"type":[[["Array","<"],["number",">"]]]}],"meta":{"line":44,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventCreateOptions","description":"Options used to create a guild scheduled event.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild scheduled event","type":[[["string"]]]},{"name":"scheduledStartTime","description":"The time to schedule the event at","type":[[["DateResolvable"]]]},{"name":"scheduledEndTime","description":"The time to end the event at\n<warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>","optional":true,"type":[[["DateResolvable"]]]},{"name":"privacyLevel","description":"The privacy level of the guild scheduled event","type":[[["GuildScheduledEventPrivacyLevel"]]]},{"name":"entityType","description":"The scheduled entity type of the event","type":[[["GuildScheduledEventEntityType"]]]},{"name":"description","description":"The description of the guild scheduled event","optional":true,"type":[[["string"]]]},{"name":"channel","description":"The channel of the guild scheduled event\n<warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.StageInstance} or\n{@link GuildScheduledEventEntityType.Voice}</warn>","optional":true,"type":[[["GuildVoiceChannelResolvable"]]]},{"name":"entityMetadata","description":"The entity metadata of the\nguild scheduled event\n<warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>","optional":true,"type":[[["GuildScheduledEventEntityMetadataOptions"]]]},{"name":"image","description":"The cover image of the guild scheduled event","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"The reason for creating the guild scheduled event","optional":true,"type":[[["string"]]]},{"name":"recurrenceRule","description":"The recurrence rule of the guild scheduled event","optional":true,"type":[[["GuildScheduledEventRecurrenceRuleOptions"]]]}],"meta":{"line":57,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventEntityMetadataOptions","description":"Options used to set entity metadata of a guild scheduled event.","type":[[["Object"]]],"props":[{"name":"location","description":"The location of the guild scheduled event\n<warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>","optional":true,"type":[[["string"]]]}],"meta":{"line":80,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildScheduledEventOptions","description":"Options used to fetch a single guild scheduled event from a guild.","type":[[["BaseFetchOptions"]]],"props":[{"name":"guildScheduledEvent","description":"The guild scheduled event to fetch","type":[[["GuildScheduledEventResolvable"]]]},{"name":"withUserCount","description":"Whether to fetch the number of users subscribed to the scheduled event","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":140,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildScheduledEventsOptions","description":"Options used to fetch multiple guild scheduled events from a guild.","type":[[["Object"]]],"props":[{"name":"cache","description":"Whether or not to cache the fetched guild scheduled events","optional":true,"type":[[["boolean"]]]},{"name":"withUserCount","description":"Whether to fetch the number of users subscribed to each scheduled event\nshould be returned","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":148,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventEditOptions","description":"Options used to edit a guild scheduled event.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild scheduled event","optional":true,"type":[[["string"]]]},{"name":"scheduledStartTime","description":"The time to schedule the event at","optional":true,"type":[[["DateResolvable"]]]},{"name":"scheduledEndTime","description":"The time to end the event at","optional":true,"type":[[["DateResolvable"]]]},{"name":"privacyLevel","description":"The privacy level of the guild scheduled event","optional":true,"type":[[["GuildScheduledEventPrivacyLevel"]]]},{"name":"entityType","description":"The scheduled entity type of the event","optional":true,"type":[[["GuildScheduledEventEntityType"]]]},{"name":"description","description":"The description of the guild scheduled event","optional":true,"type":[[["string"]]]},{"name":"channel","description":"The channel of the guild scheduled event","optional":true,"nullable":true,"type":[[["GuildVoiceChannelResolvable"]]]},{"name":"status","description":"The status of the guild scheduled event","optional":true,"type":[[["GuildScheduledEventStatus"]]]},{"name":"entityMetadata","description":"The entity metadata of the\nguild scheduled event\n<warn>This can be modified only if `entityType` of the `GuildScheduledEvent` to be edited is\n{@link GuildScheduledEventEntityType.External}</warn>","optional":true,"type":[[["GuildScheduledEventEntityMetadataOptions"]]]},{"name":"image","description":"The cover image of the guild scheduled event","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"The reason for editing the guild scheduled event","optional":true,"type":[[["string"]]]},{"name":"recurrenceRule","description":"The recurrence rule of the guild scheduled event","optional":true,"nullable":true,"type":[[["GuildScheduledEventRecurrenceRuleOptions"]]]}],"meta":{"line":190,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildScheduledEventSubscribersOptions","description":"Options used to fetch subscribers of a guild scheduled event","type":[[["Object"]]],"props":[{"name":"limit","description":"The maximum numbers of users to fetch","optional":true,"type":[[["number"]]]},{"name":"withMember","description":"Whether to fetch guild member data of the users","optional":true,"type":[[["boolean"]]]},{"name":"before","description":"Consider only users before this user id","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"Consider only users after this user id\n<warn>If both `before` and `after` are provided, only `before` is respected</warn>","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":279,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildScheduledEventUser","description":"Represents a subscriber of a {@link GuildScheduledEvent}","type":[[["Object"]]],"props":[{"name":"guildScheduledEventId","description":"The id of the guild scheduled event which the user subscribed to","type":[[["Snowflake"]]]},{"name":"user","description":"The user that subscribed to the guild scheduled event","type":[[["User"]]]},{"name":"member","description":"The guild member associated with the user, if any","nullable":true,"type":[[["GuildMember"]]]}],"meta":{"line":290,"file":"GuildScheduledEventManager.js","path":"packages/discord.js/src/managers"}},{"name":"SoundboardSoundResolvable","description":"Data that resolves to give a SoundboardSound object. This can be:\n- A SoundboardSound object\n- A Snowflake","type":[[["SoundboardSound"]],[["Snowflake"]]],"meta":{"line":41,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildSoundboardSoundCreateOptions","description":"Options used to create a soundboard sound in a guild.","type":[[["Object"]]],"props":[{"name":"file","description":"The file for the soundboard sound","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name for the soundboard sound","type":[[["string"]]]},{"name":"contentType","description":"The content type for the soundboard sound file","optional":true,"type":[[["string"]]]},{"name":"volume","description":"The volume (a double) for the soundboard sound, from 0 (inclusive) to 1. Defaults to 1","optional":true,"type":[[["number"]]]},{"name":"emojiId","description":"The emoji id for the soundboard sound","optional":true,"type":[[["Snowflake"]]]},{"name":"emojiName","description":"The emoji name for the soundboard sound","optional":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for creating the soundboard sound","optional":true,"type":[[["string"]]]}],"meta":{"line":71,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildSoundboardSoundEditOptions","description":"Data for editing a soundboard sound.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the soundboard sound","optional":true,"type":[[["string"]]]},{"name":"volume","description":"The volume (a double) of the soundboard sound, from 0 (inclusive) to 1","optional":true,"nullable":true,"type":[[["number"]]]},{"name":"emojiId","description":"The emoji id of the soundboard sound","optional":true,"nullable":true,"type":[[["Snowflake"]]]},{"name":"emojiName","description":"The emoji name of the soundboard sound","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for editing the soundboard sound","optional":true,"type":[[["string"]]]}],"meta":{"line":112,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchSoundboardSoundOptions","description":"Options used to fetch a soundboard sound.","type":[[["BaseFetchOptions"]]],"props":[{"name":"soundboardSound","description":"The soundboard sound to fetch","type":[[["SoundboardSoundResolvable"]]]}],"meta":{"line":171,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchGuildSoundboardSoundsOptions","description":"Options used to fetch soundboard sounds from Discord","type":[[["Object"]]],"props":[{"name":"cache","description":"Whether to cache the fetched soundboard sounds","optional":true,"type":[[["boolean"]]]}],"meta":{"line":178,"file":"GuildSoundboardSoundManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildStickerCreateOptions","description":"Options used to create a guild sticker.","type":[[["Object"]]],"props":[{"name":"file","description":"The file for the sticker","type":[[["AttachmentPayload"]],[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name for the sticker","type":[[["string"]]]},{"name":"tags","description":"The Discord name of a unicode emoji representing the sticker's expression","type":[[["string"]]]},{"name":"description","description":"The description for the sticker","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for creating the sticker","optional":true,"type":[[["string"]]]}],"meta":{"line":38,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"StickerResolvable","description":"Data that resolves to give a Sticker object. This can be:\n- A Sticker object\n- A Snowflake","type":[[["Sticker"]],[["Snowflake"]]],"meta":{"line":80,"file":"GuildStickerManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildTextThreadCreateOptions","description":"Options for creating a thread. <warn>Only one of `startMessage` or `type` can be defined.</warn>","type":[[["StartThreadOptions"]]],"props":[{"name":"startMessage","description":"The message to start a thread from.\n<warn>If this is defined, then the `type` of thread gets inferred automatically and cannot be changed.</warn>","optional":true,"type":[[["MessageResolvable"]]]},{"name":"type","description":"The type of thread to create.\nDefaults to {@link ChannelType.PublicThread} if created in a {@link TextChannel}\n<warn>When creating threads in a {@link AnnouncementChannel}, this is ignored and is always\n{@link ChannelType.AnnouncementThread}</warn>","optional":true,"type":[[["ThreadChannelTypes"]]]},{"name":"invitable","description":"Whether non-moderators can add other non-moderators to the thread\n<info>Can only be set when type will be {@link ChannelType.PrivateThread}</info>","optional":true,"type":[[["boolean"]]]}],"meta":{"line":20,"file":"GuildTextThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"MessageResolvable","description":"Data that can be resolved to a Message object. This can be:\n- A Message\n- A Snowflake","type":[[["Message"]],[["Snowflake"]]],"meta":{"line":44,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchMessageOptions","description":"Options used to fetch a message.","type":[[["BaseFetchOptions"]]],"props":[{"name":"message","description":"The message to fetch","type":[[["MessageResolvable"]]]}],"meta":{"line":52,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchMessagesOptions","description":"Options used to fetch multiple messages.\n<info>The `before`, `after`, and `around` parameters are mutually exclusive.</info>","type":[[["Object"]]],"props":[{"name":"limit","description":"The maximum number of messages to return","optional":true,"type":[[["number"]]]},{"name":"before","description":"Consider only messages before this id","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"Consider only messages after this id","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"Consider only messages around this id","optional":true,"type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the fetched messages","optional":true,"type":[[["boolean"]]]}],"meta":{"line":59,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"MessageEditAttachmentData","description":"Data used to reference an attachment.","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the attachment","type":[[["Snowflake"]]]}],"meta":{"line":166,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"MessageEditOptions","description":"Options that can be passed to edit a message.","type":[[["BaseMessageOptions"]]],"props":[{"name":"attachments","description":"An array of attachments to keep.\nAll attachments will be kept if omitted","optional":true,"type":[[["Array","<("],["Attachment","|"],["MessageEditAttachmentData",")>"]]]},{"name":"flags","description":"Which flags to set for the message\n<info>Only the {@link MessageFlags.SuppressEmbeds} flag can be modified.</info>","optional":true,"type":[[["MessageFlags"]]]}],"meta":{"line":173,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchPollAnswerVotersOptions","description":"Options used for fetching voters of an answer in a poll.","type":[[["BaseFetchPollAnswerVotersOptions"]]],"params":[{"name":"messageId","description":"The id of the message","type":[[["Snowflake"]]]},{"name":"answerId","description":"The id of the answer","type":[[["number"]]]}],"meta":{"line":286,"file":"MessageManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildChannelOverwriteOptions","description":"Extra information about the overwrite.","type":[[["Object"]]],"props":[{"name":"reason","description":"The reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]},{"name":"type","description":"The type of overwrite. Use this to bypass automatic resolution of `type`\nthat results in an error for an uncached structure","optional":true,"type":[[["OverwriteType"]]]}],"meta":{"line":82,"file":"PermissionOverwriteManager.js","path":"packages/discord.js/src/managers"}},{"name":"PresenceResolvable","description":"Data that can be resolved to a Presence object. This can be:\n- A Presence\n- A UserResolvable\n- A Snowflake","type":[[["Presence"]],[["UserResolvable"]],[["Snowflake"]]],"meta":{"line":27,"file":"PresenceManager.js","path":"packages/discord.js/src/managers"}},{"name":"MessageReactionResolvable","description":"Data that can be resolved to a MessageReaction object. This can be:\n- A MessageReaction\n- A Snowflake\n- The Unicode representation of an emoji","type":[[["MessageReaction"]],[["Snowflake"]]],"meta":{"line":35,"file":"ReactionManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchReactionUsersOptions","description":"Options used to fetch users who gave a reaction.","type":[[["Object"]]],"props":[{"name":"type","description":"The reaction type to fetch","optional":true,"default":"ReactionType.Normal","type":[[["ReactionType"]]]},{"name":"limit","description":"The maximum amount of users to fetch, defaults to `100`","optional":true,"default":100,"type":[[["number"]]]},{"name":"after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":34,"file":"ReactionUserManager.js","path":"packages/discord.js/src/managers"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n- A Role\n- A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":84,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"RoleCreateOptions","description":"Options used to create a new role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the new role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The data to create the role with","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the new role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"permissions","description":"The permissions for the new role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"position","description":"The position of the new role","optional":true,"type":[[["number"]]]},{"name":"mentionable","description":"Whether or not the new role should be mentionable","optional":true,"type":[[["boolean"]]]},{"name":"icon","description":"The icon for the role\n<warn>The `EmojiResolvable` should belong to the same guild as the role.\nIf not, pass the emoji's URL directly</warn>","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]],[["EmojiResolvable"]]]},{"name":"unicodeEmoji","description":"The unicode emoji for the role","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"reason","description":"The reason for creating this role","optional":true,"type":[[["string"]]]}],"meta":{"line":112,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"RoleEditOptions","description":"Options for editing a role","type":[[["RoleData"]]],"props":[{"name":"reason","description":"The reason for editing this role","optional":true,"type":[[["string"]]]}],"meta":{"line":181,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"GuildRolePosition","description":"The data needed for updating a guild role's position","type":[[["Object"]]],"props":[{"name":"role","description":"The role's id","type":[[["RoleResolvable"]]]},{"name":"position","description":"The position to update","type":[[["number"]]]}],"meta":{"line":286,"file":"RoleManager.js","path":"packages/discord.js/src/managers"}},{"name":"StageInstanceCreateOptions","description":"Options used to create a stage instance.","type":[[["Object"]]],"props":[{"name":"topic","description":"The topic of the stage instance","type":[[["string"]]]},{"name":"privacyLevel","description":"The privacy level of the stage instance","optional":true,"type":[[["StageInstancePrivacyLevel"]]]},{"name":"sendStartNotification","description":"Whether to notify `@everyone` that the stage instance has started","optional":true,"type":[[["boolean"]]]},{"name":"guildScheduledEvent","description":"The guild scheduled event associated with the stage instance","optional":true,"type":[[["GuildScheduledEventResolvable"]]]}],"meta":{"line":32,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"StageChannelResolvable","description":"Data that can be resolved to a Stage Channel object. This can be:\n- A StageChannel\n- A Snowflake","type":[[["StageChannel"]],[["Snowflake"]]],"meta":{"line":43,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"StageInstanceEditOptions","description":"Options used to edit an existing stage instance.","type":[[["Object"]]],"props":[{"name":"topic","description":"The new topic of the stage instance","optional":true,"type":[[["string"]]]},{"name":"privacyLevel","description":"The new privacy level of the stage instance","optional":true,"type":[[["StageInstancePrivacyLevel"]]]}],"meta":{"line":112,"file":"StageInstanceManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchSubscriptionOptions","description":"Options used to fetch a subscription","type":[[["BaseFetchOptions"]]],"props":[{"name":"sku","description":"The SKU to fetch the subscription for","type":[[["SKUResolvable"]]]},{"name":"subscriptionId","description":"The id of the subscription to fetch","type":[[["Snowflake"]]]}],"meta":{"line":28,"file":"SubscriptionManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchSubscriptionsOptions","description":"Options used to fetch subscriptions","type":[[["Object"]]],"props":[{"name":"after","description":"Consider only subscriptions after this subscription id","optional":true,"type":[[["Snowflake"]]]},{"name":"before","description":"Consider only subscriptions before this subscription id","optional":true,"type":[[["Snowflake"]]]},{"name":"limit","description":"The maximum number of subscriptions to fetch","optional":true,"type":[[["number"]]]},{"name":"sku","description":"The SKU to fetch subscriptions for","type":[[["SKUResolvable"]]]},{"name":"user","description":"The user to fetch entitlements for\n<warn>If both `before` and `after` are provided, only `before` is respected</warn>","type":[[["UserResolvable"]]]}],"meta":{"line":36,"file":"SubscriptionManager.js","path":"packages/discord.js/src/managers"}},{"name":"ThreadChannelResolvable","description":"Data that can be resolved to a Thread Channel object. This can be:\n- A ThreadChannel object\n- A Snowflake","type":[[["ThreadChannel"]],[["Snowflake"]]],"meta":{"line":30,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchThreadsOptions","description":"Options for fetching multiple threads.","type":[[["Object"]]],"props":[{"name":"archived","description":"Options used to fetch archived threads","optional":true,"type":[[["FetchArchivedThreadOptions"]]]}],"meta":{"line":72,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"DateResolvable","description":"Data that can be resolved to a Date object. This can be:\n- A Date object\n- A number representing a timestamp\n- An {@link https://en.wikipedia.org/wiki/ISO_8601 ISO 8601} string","type":[[["Date"]],[["number"]],[["string"]]],"meta":{"line":110,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchArchivedThreadOptions","description":"The options used to fetch archived threads.","type":[[["Object"]]],"props":[{"name":"type","description":"The type of threads to fetch (`public` or `private`)","optional":true,"default":"'public'","type":[[["string"]]]},{"name":"fetchAll","description":"Whether to fetch **all** archived threads when `type` is `private`\n<info>This property requires the {@link PermissionFlagsBits.ManageThreads} permission if `true`.</info>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"before","description":"Only return threads that were archived before this Date\nor Snowflake\n<warn>Must be a {@link ThreadChannelResolvable} when `type` is `private` and `fetchAll` is `false`.</warn>","optional":true,"type":[[["DateResolvable"]],[["ThreadChannelResolvable"]]]},{"name":"limit","description":"Maximum number of threads to return","optional":true,"type":[[["number"]]]}],"meta":{"line":119,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchedThreadsMore","description":"Data returned from fetching multiple threads.","type":[[["FetchedThreads"]]],"props":[{"name":"hasMore","description":"Whether there are potentially additional threads that require a subsequent call","nullable":true,"type":[[["boolean"]]]}],"meta":{"line":132,"file":"ThreadManager.js","path":"packages/discord.js/src/managers"}},{"name":"ThreadMemberResolvable","description":"Data that resolves to give a ThreadMember object. This can be:\n- A ThreadMember object\n- A User resolvable","type":[[["ThreadMember"]],[["UserResolvable"]]],"meta":{"line":64,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchThreadMemberOptions","description":"Options used to fetch a thread member.","type":[[["BaseFetchOptions"]]],"props":[{"name":"member","description":"The thread member to fetch","type":[[["ThreadMemberResolvable"]]]},{"name":"withMember","description":"Whether to also return the guild member associated with this thread member","optional":true,"type":[[["boolean"]]]}],"meta":{"line":125,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchThreadMembersWithGuildMemberDataOptions","description":"Options used to fetch multiple thread members with guild member data.\n<info>With `withMember` set to `true`, pagination is enabled.</info>","type":[[["Object"]]],"props":[{"name":"withMember","description":"Whether to also return the guild member data","type":[[["true"]]]},{"name":"after","description":"Consider only thread members after this id","optional":true,"type":[[["Snowflake"]]]},{"name":"limit","description":"The maximum number of thread members to return","optional":true,"type":[[["number"]]]},{"name":"cache","description":"Whether to cache the fetched thread members and guild members","optional":true,"type":[[["boolean"]]]}],"meta":{"line":133,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchThreadMembersWithoutGuildMemberDataOptions","description":"Options used to fetch multiple thread members without guild member data.","type":[[["Object"]]],"props":[{"name":"withMember","description":"Whether to also return the guild member data","optional":true,"type":[[["false"]]]},{"name":"cache","description":"Whether to cache the fetched thread members","optional":true,"type":[[["boolean"]]]}],"meta":{"line":144,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"FetchThreadMembersOptions","description":"Options used to fetch multiple thread members.","type":[[["FetchThreadMembersWithGuildMemberDataOptions"]],[["FetchThreadMembersWithoutGuildMemberDataOptions"]]],"meta":{"line":152,"file":"ThreadMemberManager.js","path":"packages/discord.js/src/managers"}},{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n- A User object\n- A Snowflake\n- A Message object (resolves to the message author)\n- A GuildMember object\n- A ThreadMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]],[["ThreadMember"]]],"meta":{"line":28,"file":"UserManager.js","path":"packages/discord.js/src/managers"}},{"name":"ShardRespawnOptions","description":"Options used to respawn a shard.","type":[[["Object"]]],"props":[{"name":"delay","description":"How long to wait between killing the process/worker and\nrestarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client}\nhas become ready before resolving (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":236,"file":"Shard.js","path":"packages/discord.js/src/sharding"}},{"name":"ShardingManagerMode","description":"The mode to spawn shards with for a {@link ShardingManager}. Can be either one of:\n- 'process' to use child processes\n- 'worker' to use {@link Worker} threads","type":[[["string"]]],"meta":{"line":25,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"ShardingManagerOptions","description":"The options to spawn shards with for a {@link ShardingManager}.","type":[[["Object"]]],"props":[{"name":"totalShards","description":"Number of total shards of all shard managers or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"shardList","description":"List of shards to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"mode","description":"Which mode to use for shards","optional":true,"default":"'process'","type":[[["ShardingManagerMode"]]]},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"silent","description":"Whether to pass the silent flag to child process\n(only available when mode is set to 'process')","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"shardArgs","description":"Arguments to pass to the shard script when spawning","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"execArgv","description":"Arguments to pass to the shard script executable when spawning","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}],"meta":{"line":33,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"MultipleShardSpawnOptions","description":"Options used to spawn multiple shards.","type":[[["Object"]]],"props":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]],[["string"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":200,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"BroadcastEvalOptions","description":"Options for {@link ShardingManager#broadcastEval} and {@link ShardClientUtil#broadcastEval}.","type":[[["Object"]]],"props":[{"name":"shard","description":"Shard to run script on, all if undefined","optional":true,"type":[[["number"]]]},{"name":"context","description":"The JSON-serializable values to call the script with","optional":true,"type":[[["*"]]]}],"meta":{"line":277,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"MultipleShardRespawnOptions","description":"Options used to respawn all shards.","type":[[["Object"]]],"props":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":341,"file":"ShardingManager.js","path":"packages/discord.js/src/sharding"}},{"name":"ApplicationCommandData","description":"Data for creating or editing an application command.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command, must be in all lowercase if type is\n{@link ApplicationCommandType.ChatInput}","type":[[["string"]]]},{"name":"nameLocalizations","description":"The localizations for the command name","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"description","description":"The description of the command,\nif type is {@link ApplicationCommandType.ChatInput} or {@link ApplicationCommandType.PrimaryEntryPoint}","type":[[["string"]]]},{"name":"nsfw","description":"Whether the command is age-restricted","optional":true,"type":[[["boolean"]]]},{"name":"descriptionLocalizations","description":"The localizations for the command description,\nif type is {@link ApplicationCommandType.ChatInput} or {@link ApplicationCommandType.PrimaryEntryPoint}","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"type","description":"The type of the command","optional":true,"default":"ApplicationCommandType.ChatInput","type":[[["ApplicationCommandType"]]]},{"name":"options","description":"Options for the command","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionData",">"]]]},{"name":"defaultMemberPermissions","description":"The bitfield used to determine the default permissions\na member needs in order to run the command","optional":true,"nullable":true,"type":[[["PermissionResolvable"]]]},{"name":"integrationTypes","description":"Installation contexts where the command is available","optional":true,"type":[[["Array","<"],["ApplicationIntegrationType",">"]]]},{"name":"contexts","description":"Interaction contexts where the command can be used","optional":true,"type":[[["Array","<"],["InteractionContextType",">"]]]},{"name":"handler","description":"Whether the interaction is handled by the app's\ninteractions handler or by Discord.","optional":true,"type":[[["EntryPointCommandHandlerType"]]]}],"meta":{"line":236,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationCommandOptionData","description":"An option for an application command or subcommand.\n<info>In addition to the listed properties, when used as a parameter,\nAPI style `snake_case` properties can be used for compatibility with generators like `@discordjs/builders`.</info>\n<warn>Note that providing a value for the `camelCase` counterpart for any `snake_case` property\nwill discard the provided `snake_case` property.</warn>","type":[[["Object"]]],"props":[{"name":"type","description":"The type of the option","type":[[["ApplicationCommandOptionType"]]]},{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"nameLocalizations","description":"The name localizations for the option","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"description","description":"The description of the option","type":[[["string"]]]},{"name":"descriptionLocalizations","description":"The description localizations for the option","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"autocomplete","description":"Whether the autocomplete interaction is enabled for a\n{@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["boolean"]]]},{"name":"required","description":"Whether the option is required","optional":true,"type":[[["boolean"]]]},{"name":"choices","description":"The choices of the option for the user to pick from","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoiceData",">"]]]},{"name":"options","description":"Additional options if this option is a subcommand (group)","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionData",">"]]]},{"name":"channelTypes","description":"When the option type is channel,\nthe allowed types of channels that can be selected","optional":true,"type":[[["Array","<"],["ChannelType",">"]]]},{"name":"minValue","description":"The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["number"]]]},{"name":"maxValue","description":"The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["number"]]]},{"name":"minLength","description":"The minimum length for an {@link ApplicationCommandOptionType.String} option\n(maximum of `6000`)","optional":true,"type":[[["number"]]]},{"name":"maxLength","description":"The maximum length for an {@link ApplicationCommandOptionType.String} option\n(maximum of `6000`)","optional":true,"type":[[["number"]]]}],"meta":{"line":258,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationCommandOptionChoiceData","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the choice","type":[[["string"]]]},{"name":"nameLocalizations","description":"The localized names for this choice","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"value","description":"The value of the choice","type":[[["string"]],[["number"]]]}],"meta":{"line":289,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationCommandOption","description":"An option for an application command or subcommand.","type":[[["Object"]]],"props":[{"name":"type","description":"The type of the option","type":[[["ApplicationCommandOptionType"]]]},{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"nameLocalizations","description":"The localizations for the option name","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"nameLocalized","description":"The localized name for this option","optional":true,"type":[[["string"]]]},{"name":"description","description":"The description of the option","type":[[["string"]]]},{"name":"descriptionLocalizations","description":"The localizations for the option description","optional":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"descriptionLocalized","description":"The localized description for this option","optional":true,"type":[[["string"]]]},{"name":"required","description":"Whether the option is required","optional":true,"type":[[["boolean"]]]},{"name":"autocomplete","description":"Whether the autocomplete interaction is enabled for a\n{@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["boolean"]]]},{"name":"choices","description":"The choices of the option for the user to pick from","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoice",">"]]]},{"name":"options","description":"Additional options if this option is a subcommand (group)","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"channelTypes","description":"When the option type is channel,\nthe allowed types of channels that can be selected","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionAllowedChannelTypes",">"]]]},{"name":"minValue","description":"The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["number"]]]},{"name":"maxValue","description":"The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["number"]]]},{"name":"minLength","description":"The minimum length for an {@link ApplicationCommandOptionType.String} option\n(maximum of `6000`)","optional":true,"type":[[["number"]]]},{"name":"maxLength","description":"The maximum length for an {@link ApplicationCommandOptionType.String} option\n(maximum of `6000`)","optional":true,"type":[[["number"]]]}],"meta":{"line":565,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationCommandOptionChoice","description":"A choice for an application command option.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the choice","type":[[["string"]]]},{"name":"nameLocalized","description":"The localized name of the choice in the provided locale, if any","nullable":true,"type":[[["string"]]]},{"name":"nameLocalizations","description":"The localized names for this choice","optional":true,"nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"value","description":"The value of the choice","type":[[["string"]],[["number"]]]}],"meta":{"line":594,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationEmojiEditOptions","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]}],"meta":{"line":72,"file":"ApplicationEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"AttachmentPayload","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the attachment","nullable":true,"type":[[["string"]]]},{"name":"attachment","description":"The attachment in this payload","type":[[["Stream"]],[["BufferResolvable"]]]},{"name":"description","description":"The description of the attachment","nullable":true,"type":[[["string"]]]}],"meta":{"line":6,"file":"Attachment.js","path":"packages/discord.js/src/structures"}},{"name":"AttachmentData","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the attachment","optional":true,"type":[[["string"]]]},{"name":"description","description":"The description of the attachment","optional":true,"type":[[["string"]]]}],"meta":{"line":118,"file":"AttachmentBuilder.js","path":"packages/discord.js/src/structures"}},{"name":"AutoModerationTriggerMetadata","description":"Additional data used to determine whether an auto moderation rule should be triggered.","type":[[["Object"]]],"props":[{"name":"keywordFilter","description":"The substrings that will be searched for in the content","type":[[["Array","<"],["string",">"]]]},{"name":"regexPatterns","description":"The regular expression patterns which will be matched against the content\n<info>Only Rust-flavored regular expressions are supported.</info>","type":[[["Array","<"],["string",">"]]]},{"name":"presets","description":"The internally pre-defined wordsets which will be searched for in the content","type":[[["Array","<"],["AutoModerationRuleKeywordPresetType",">"]]]},{"name":"allowList","description":"The substrings that will be exempt from triggering\n{@link AutoModerationRuleTriggerType.Keyword},\n{@link AutoModerationRuleTriggerType.KeywordPreset},\nand {@link AutoModerationRuleTriggerType.MemberProfile}","type":[[["Array","<"],["string",">"]]]},{"name":"mentionTotalLimit","description":"The total number of role & user mentions allowed per message","nullable":true,"type":[[["number"]]]},{"name":"mentionRaidProtectionEnabled","description":"Whether mention raid protection is enabled","type":[[["boolean"]]]}],"meta":{"line":67,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"AutoModerationAction","description":"An object containing information about an auto moderation rule action.","type":[[["Object"]]],"props":[{"name":"type","description":"The type of this auto moderation rule action","type":[[["AutoModerationActionType"]]]},{"name":"metadata","description":"Additional metadata needed during execution","type":[[["AutoModerationActionMetadata"]]]}],"meta":{"line":100,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"AutoModerationActionMetadata","description":"Additional data used when an auto moderation rule is executed.","type":[[["Object"]]],"props":[{"name":"channelId","description":"The id of the channel to which content will be logged","nullable":true,"type":[[["Snowflake"]]]},{"name":"durationSeconds","description":"The timeout duration in seconds","nullable":true,"type":[[["number"]]]},{"name":"customMessage","description":"The custom message that is shown whenever a message is blocked","nullable":true,"type":[[["string"]]]}],"meta":{"line":108,"file":"AutoModerationRule.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationResolvable","description":"Data that can be resolved to an Application. This can be:\n- An Application\n- An Activity with associated Application\n- A Snowflake","type":[[["Application"]],[["Snowflake"]]],"meta":{"line":140,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"InviteCreateOptions","description":"Options used to create an invite to a guild channel.","type":[[["Object"]]],"props":[{"name":"temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"type":[[["boolean"]]]},{"name":"maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"type":[[["number"]]]},{"name":"maxUses","description":"Maximum number of uses","optional":true,"type":[[["number"]]]},{"name":"unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"type":[[["boolean"]]]},{"name":"targetUser","description":"The user whose stream to display for this invite,\nrequired if `targetType` is {@link InviteTargetType.Stream}, the user must be streaming in the channel","optional":true,"type":[[["UserResolvable"]]]},{"name":"targetApplication","description":"The embedded application to open for this invite,\nrequired if `targetType` is {@link InviteTargetType.Stream}, the application must have the\n{@link InviteTargetType.EmbeddedApplication} flag","optional":true,"type":[[["ApplicationResolvable"]]]},{"name":"targetType","description":"The type of the target for this voice channel invite","optional":true,"type":[[["InviteTargetType"]]]},{"name":"reason","description":"The reason for creating the invite","optional":true,"type":[[["string"]]]}],"meta":{"line":149,"file":"BaseGuildTextChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ClientApplicationInstallParams","type":[[["Object"]]],"props":[{"name":"scopes","description":"Scopes that will be set upon adding this application","type":[[["Array","<"],["OAuth2Scopes",">"]]]},{"name":"permissions","description":"Permissions that will be requested for the integrated role","type":[[["Readonly","<"],["PermissionsBitField",">"]]]}],"meta":{"line":17,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationTypesConfigurationParameters","description":"OAuth2 installation parameters.","type":[[["Object"]]],"props":[{"name":"scopes","description":"Scopes that will be set upon adding this application","type":[[["Array","<"],["OAuth2Scopes",">"]]]},{"name":"permissions","description":"Permissions that will be requested for the integrated role","type":[[["Readonly","<"],["PermissionsBitField",">"]]]}],"meta":{"line":85,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationTypesConfigurationContext","description":"The application's supported installation context data.","type":[[["Object"]]],"props":[{"name":"oauth2InstallParams","description":"Scopes and permissions regarding the installation context","nullable":true,"type":[[["IntegrationTypesConfigurationParameters"]]]}],"meta":{"line":93,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationTypesConfiguration","description":"The application's supported installation context data.","type":[[["Object"]]],"props":[{"name":"0","description":"Scopes and permissions\nregarding the guild-installation context","optional":true,"type":[[["IntegrationTypesConfigurationContext"]]]},{"name":"1","description":"Scopes and permissions\nregarding the user-installation context","optional":true,"type":[[["IntegrationTypesConfigurationContext"]]]}],"meta":{"line":101,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"ClientApplicationEditOptions","description":"Options used for editing an application.","type":[[["Object"]]],"props":[{"name":"customInstallURL","description":"The application's custom installation URL","optional":true,"type":[[["string"]]]},{"name":"description","description":"The application's description","optional":true,"type":[[["string"]]]},{"name":"roleConnectionsVerificationURL","description":"The application's role connection verification URL","optional":true,"type":[[["string"]]]},{"name":"installParams","description":"Settings for the application's default in-app authorization","optional":true,"type":[[["ClientApplicationInstallParams"]]]},{"name":"flags","description":"The flags for the application","optional":true,"type":[[["ApplicationFlagsResolvable"]]]},{"name":"icon","description":"The application's icon","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"coverImage","description":"The application's cover image","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"interactionsEndpointURL","description":"The application's interaction endpoint URL","optional":true,"type":[[["string"]]]},{"name":"eventWebhooksURL","description":"The application's event webhooks URL","optional":true,"type":[[["string"]]]},{"name":"eventWebhooksStatus","description":"The application's event webhooks status.","optional":true,"type":[[["ApplicationWebhookEventStatusEnabled"]],[["ApplicationWebhookEventStatusDisabled"]]]},{"name":"eventWebhooksTypes","description":"The application's event webhooks types","optional":true,"type":[[["Array","<"],["ApplicationWebhookEventType",">"]]]},{"name":"tags","description":"The application's tags","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":323,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationRoleConnectionMetadataEditOptions","description":"Data for creating or editing an application role connection metadata.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the metadata field","type":[[["string"]]]},{"name":"nameLocalizations","description":"The name localizations for the metadata field","optional":true,"nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"description","description":"The description of the metadata field","type":[[["string"]]]},{"name":"descriptionLocalizations","description":"The description localizations for the metadata field","optional":true,"nullable":true,"type":[[["Object","<"],["Locale",", "],["string",">"]]]},{"name":"key","description":"The dictionary key of the metadata field","type":[[["string"]]]},{"name":"type","description":"The type of the metadata field","type":[[["ApplicationRoleConnectionMetadataType"]]]}],"meta":{"line":405,"file":"ClientApplication.js","path":"packages/discord.js/src/structures"}},{"name":"ClientUserEditOptions","description":"Data used to edit the logged in client","type":[[["Object"]]],"props":[{"name":"username","description":"The new username","optional":true,"type":[[["string"]]]},{"name":"avatar","description":"The new avatar","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"banner","description":"The new banner","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"meta":{"line":49,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"ActivitiesOptions","description":"Options for setting activities","type":[[["Object"]]],"props":[{"name":"name","description":"Name of the activity","type":[[["string"]]]},{"name":"state","description":"State of the activity","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]]]},{"name":"url","description":"Twitch / YouTube stream URL","optional":true,"type":[[["string"]]]}],"meta":{"line":126,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatusData"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"activities","description":"Activity the user is playing","optional":true,"type":[[["Array","<"],["ActivitiesOptions",">"]]]},{"name":"shardId","description":"Shard id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":136,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"PresenceStatusData","description":"A user's status. Must be one of:\n- `online`\n- `idle`\n- `invisible`\n- `dnd` (do not disturb)","type":[[["string"]]],"meta":{"line":159,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityOptions","description":"Options for setting an activity.","type":[[["Object"]]],"props":[{"name":"name","description":"Name of the activity","type":[[["string"]]]},{"name":"state","description":"State of the activity","optional":true,"type":[[["string"]]]},{"name":"url","description":"Twitch / YouTube stream URL","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]]]},{"name":"shardId","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":183,"file":"ClientUser.js","path":"packages/discord.js/src/structures"}},{"name":"CommandInteractionResolvedData","description":"Represents the resolved data of a received command interaction.","type":[[["Object"]]],"props":[{"name":"users","description":"The resolved users","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["User",">"]]]},{"name":"members","description":"The resolved guild members","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["GuildMember","|"],["APIGuildMember",")>"]]]},{"name":"roles","description":"The resolved roles","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["Role","|"],["APIRole",")>"]]]},{"name":"channels","description":"The resolved channels","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["BaseChannel","|"],["APIChannel",")>"]]]},{"name":"messages","description":"The resolved messages","optional":true,"type":[[["Collection","<"],["Snowflake",", ("],["Message","|"],["APIMessage",")>"]]]},{"name":"attachments","description":"The resolved attachments","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Attachment",">"]]]}],"meta":{"line":93,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"CommandInteractionOption","description":"Represents an option of a received command interaction.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"type","description":"The type of the option","type":[[["ApplicationCommandOptionType"]]]},{"name":"autocomplete","description":"Whether the autocomplete interaction is enabled for a\n{@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n{@link ApplicationCommandOptionType.Number} option","optional":true,"type":[[["boolean"]]]},{"name":"value","description":"The value of the option","optional":true,"type":[[["string"]],[["number"]],[["boolean"]]]},{"name":"options","description":"Additional options if this option is a\nsubcommand (group)","optional":true,"type":[[["Array","<"],["CommandInteractionOption",">"]]]},{"name":"user","description":"The resolved user","optional":true,"type":[[["User"]]]},{"name":"member","description":"The resolved member","optional":true,"type":[[["GuildMember"]],[["APIGuildMember"]]]},{"name":"channel","description":"The resolved channel","optional":true,"type":[[["GuildChannel"]],[["ThreadChannel"]],[["APIChannel"]]]},{"name":"role","description":"The resolved role","optional":true,"type":[[["Role"]],[["APIRole"]]]},{"name":"attachment","description":"The resolved attachment","optional":true,"type":[[["Attachment"]]]}],"meta":{"line":105,"file":"CommandInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"AutocompleteFocusedOption","description":"The full autocomplete option object.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the option","type":[[["string"]]]},{"name":"type","description":"The type of the application command option","type":[[["ApplicationCommandOptionType"]]]},{"name":"value","description":"The value of the option","type":[[["string"]]]},{"name":"focused","description":"Whether this option is currently in focus for autocomplete","type":[[["boolean"]]]}],"meta":{"line":313,"file":"CommandInteractionOptionResolver.js","path":"packages/discord.js/src/structures"}},{"name":"EmbedAssetData","type":[[["Object"]]],"props":[{"name":"url","description":"The URL of the image","nullable":true,"type":[[["string"]]]},{"name":"proxyURL","description":"The proxy URL of the image","nullable":true,"type":[[["string"]]]},{"name":"height","description":"The height of the image","nullable":true,"type":[[["number"]]]},{"name":"width","description":"The width of the image","nullable":true,"type":[[["number"]]]}],"meta":{"line":80,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"EmbedAuthorData","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the author","type":[[["string"]]]},{"name":"url","description":"The URL of the author","nullable":true,"type":[[["string"]]]},{"name":"iconURL","description":"The icon URL of the author","nullable":true,"type":[[["string"]]]},{"name":"proxyIconURL","description":"The proxy icon URL of the author","nullable":true,"type":[[["string"]]]}],"meta":{"line":136,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"EmbedFooterData","type":[[["Object"]]],"props":[{"name":"text","description":"The text of the footer","type":[[["string"]]]},{"name":"iconURL","description":"The URL of the icon","nullable":true,"type":[[["string"]]]},{"name":"proxyIconURL","description":"The proxy URL of the icon","nullable":true,"type":[[["string"]]]}],"meta":{"line":170,"file":"Embed.js","path":"packages/discord.js/src/structures"}},{"name":"IncidentActions","description":"Incident actions of a guild.","type":[[["Object"]]],"props":[{"name":"invitesDisabledUntil","description":"When invites would be enabled again","nullable":true,"type":[[["Date"]]]},{"name":"dmsDisabledUntil","description":"When direct messages would be enabled again","nullable":true,"type":[[["Date"]]]},{"name":"dmSpamDetectedAt","description":"When direct message spam was detected","nullable":true,"type":[[["Date"]]]},{"name":"raidDetectedAt","description":"When a raid was detected","nullable":true,"type":[[["Date"]]]}],"meta":{"line":518,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"Vanity","description":"An object containing information about a guild's vanity invite.","type":[[["Object"]]],"props":[{"name":"code","description":"Vanity invite code","nullable":true,"type":[[["string"]]]},{"name":"uses","description":"How many times this invite has been used","type":[[["number"]]]}],"meta":{"line":728,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildWidgetSettings","description":"Data for the Guild Widget Settings object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the widget is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The widget invite channel","nullable":true,"type":[[["TextChannel"]],[["AnnouncementChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]]]}],"meta":{"line":788,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildWidgetSettingsData","description":"The Guild Widget Settings object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the widget is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The widget invite channel","nullable":true,"type":[[["TextChannel"]],[["AnnouncementChannel"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]],[["Snowflake"]]]}],"meta":{"line":797,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildAuditLogsFetchOptions","description":"Options used to fetch audit logs.","type":[[["Object"]]],"props":[{"name":"before","description":"Consider only entries before this entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"after","description":"Consider only entries after this entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"limit","description":"The number of entries to return","optional":true,"type":[[["number"]]]},{"name":"user","description":"Only return entries for actions made by this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"type","description":"Only return entries for this action type","optional":true,"nullable":true,"type":[[["AuditLogEvent"]]]}],"meta":{"line":836,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildEditOptions","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"nullable":true,"type":[[["GuildVerificationLevel"]]]},{"name":"defaultMessageNotifications","description":"The default message\nnotification level of the guild","optional":true,"nullable":true,"type":[[["GuildDefaultMessageNotifications"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"nullable":true,"type":[[["GuildExplicitContentFilter"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"nullable":true,"type":[[["VoiceChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["UserResolvable"]]]},{"name":"splash","description":"The invite splash image of the guild","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"discoverySplash","description":"The discovery splash image of the guild","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"banner","description":"The banner of the guild","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"systemChannelFlags","description":"The system channel flags of the guild","optional":true,"type":[[["SystemChannelFlagsResolvable"]]]},{"name":"rulesChannel","description":"The rules channel of the guild","optional":true,"nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"publicUpdatesChannel","description":"The community updates channel of the guild","optional":true,"nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"safetyAlertsChannel","description":"The safety alerts channel of the guild","optional":true,"nullable":true,"type":[[["TextChannelResolvable"]]]},{"name":"preferredLocale","description":"The preferred locale of the guild","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"features","description":"The features of the guild","optional":true,"type":[[["Array","<"],["GuildFeature",">"]]]},{"name":"description","description":"The discovery description of the guild","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"premiumProgressBarEnabled","description":"Whether the guild's premium progress bar is enabled","optional":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for editing this guild","optional":true,"type":[[["string"]]]}],"meta":{"line":886,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"TextChannelResolvable","description":"Data that can be resolved to a Text Channel object. This can be:\n- A TextChannel\n- A Snowflake","type":[[["TextChannel"]],[["Snowflake"]]],"meta":{"line":914,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceChannelResolvable","description":"Data that can be resolved to a Voice Channel object. This can be:\n- A VoiceChannel\n- A Snowflake","type":[[["VoiceChannel"]],[["Snowflake"]]],"meta":{"line":922,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboardingEditOptions","description":"Options used to edit the guild onboarding.","type":[[["Object"]]],"props":[{"name":"prompts","description":"The prompts shown during onboarding and in customize community","optional":true,"type":[[["Array","<"],["GuildOnboardingPromptData",">"]],[["Collection","<"],["Snowflake",", "],["GuildOnboardingPrompt",">"]]]},{"name":"defaultChannels","description":"The channels that new members get opted into automatically","optional":true,"type":[[["Array","<"],["ChannelResolvable",">"]],[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]]},{"name":"enabled","description":"Whether the onboarding is enabled","optional":true,"type":[[["boolean"]]]},{"name":"mode","description":"The mode to edit the guild onboarding with","optional":true,"type":[[["GuildOnboardingMode"]]]},{"name":"reason","description":"The reason for editing the guild onboarding","optional":true,"type":[[["string"]]]}],"meta":{"line":991,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboardingPromptData","description":"Data for editing a guild onboarding prompt.","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the prompt","optional":true,"type":[[["Snowflake"]]]},{"name":"title","description":"The title for the prompt","type":[[["string"]]]},{"name":"singleSelect","description":"Whether users are limited to selecting one option for the prompt","optional":true,"type":[[["boolean"]]]},{"name":"required","description":"Whether the prompt is required before a user completes the onboarding flow","optional":true,"type":[[["boolean"]]]},{"name":"inOnboarding","description":"Whether the prompt is present in the onboarding flow","optional":true,"type":[[["boolean"]]]},{"name":"type","description":"The type of the prompt","optional":true,"type":[[["GuildOnboardingPromptType"]]]},{"name":"options","description":"The options available within the prompt","type":[[["Array","<"],["GuildOnboardingPromptOptionData",">"]],[["Collection","<"],["Snowflake",", "],["GuildOnboardingPrompt",">"]]]}],"meta":{"line":1004,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildOnboardingPromptOptionData","description":"Data for editing a guild onboarding prompt option.","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the option","optional":true,"nullable":true,"type":[[["Snowflake"]]]},{"name":"channels","description":"The channels a member is added to when the option is selected","optional":true,"type":[[["Array","<"],["ChannelResolvable",">"]],[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]]},{"name":"roles","description":"The roles assigned to a member when the option is selected","optional":true,"type":[[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"title","description":"The title of the option","type":[[["string"]]]},{"name":"description","description":"The description of the option","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"emoji","description":"The emoji of the option","optional":true,"nullable":true,"type":[[["EmojiIdentifierResolvable"]],[["Emoji"]]]}],"meta":{"line":1018,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"WelcomeChannelData","description":"Welcome channel data","type":[[["Object"]]],"props":[{"name":"description","description":"The description to show for this welcome channel","type":[[["string"]]]},{"name":"channel","description":"The channel to link for this welcome channel","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["ForumChannel"]],[["MediaChannel"]],[["Snowflake"]]]},{"name":"emoji","description":"The emoji to display for this welcome channel","optional":true,"type":[[["EmojiIdentifierResolvable"]]]}],"meta":{"line":1074,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"WelcomeScreenEditOptions","description":"Welcome screen edit data","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the welcome screen is enabled","optional":true,"type":[[["boolean"]]]},{"name":"description","description":"The description for the welcome screen","optional":true,"type":[[["string"]]]},{"name":"welcomeChannels","description":"The welcome channel data for the welcome screen","optional":true,"type":[[["Array","<"],["WelcomeChannelData",">"]]]}],"meta":{"line":1084,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildTextChannelResolvable","description":"Data that can be resolved to a GuildTextChannel object. This can be:\n- A TextChannel\n- A AnnouncementChannel\n- A Snowflake","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["Snowflake"]]],"meta":{"line":1093,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"GuildVoiceChannelResolvable","description":"Data that can be resolved to a GuildVoiceChannel object. This can be:\n- A VoiceChannel\n- A StageChannel\n- A Snowflake","type":[[["VoiceChannel"]],[["StageChannel"]],[["Snowflake"]]],"meta":{"line":1102,"file":"Guild.js","path":"packages/discord.js/src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of a guild audit log entry. It can be one of:\n- A guild\n- A channel\n- A user\n- A role\n- An invite\n- A webhook\n- A guild emoji\n- An integration\n- A stage instance\n- A sticker\n- A guild scheduled event\n- A thread\n- An application command\n- An auto moderation rule\n- A guild onboarding prompt\n- A soundboard sound\n- An object with an id key if target was deleted or fake entity\n- An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["BaseChannel"]],[["User"]],[["Role"]],[["Invite"]],[["Webhook"]],[["GuildEmoji"]],[["Integration"]],[["StageInstance"]],[["Sticker"]],[["GuildScheduledEvent"]],[["ApplicationCommand"]],[["AutoModerationRule"]],[["GuildOnboardingPrompt"]],[["SoundboardSound"]]],"meta":{"line":37,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry. Here are the available types:\n- Create\n- Delete\n- Update\n- All","type":[[["string"]]],"meta":{"line":62,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry. Here are the available types:\n- Guild\n- Channel\n- User\n- Role\n- Invite\n- Webhook\n- Emoji\n- Message\n- Integration\n- StageInstance\n- Sticker\n- Thread\n- GuildScheduledEvent\n- ApplicationCommand\n- GuildOnboardingPrompt\n- SoundboardSound\n- AutoModeration\n- Unknown","type":[[["string"]]],"meta":{"line":72,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["Object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes\n<warn>For application command permissions updates the key is the id of the user, channel,\nrole, or a permission constant that was updated instead of an actual property name</warn>","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[[["*"]]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[[["*"]]]}],"meta":{"line":171,"file":"GuildAuditLogsEntry.js","path":"packages/discord.js/src/structures"}},{"name":"SetParentOptions","description":"Options used to set the parent of a channel.","type":[[["Object"]]],"props":[{"name":"lockPermissions","description":"Whether to lock the permissions to what the parent's permissions are","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"The reason for modifying the parent of the channel","optional":true,"type":[[["string"]]]}],"meta":{"line":333,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"SetChannelPositionOptions","description":"Options used to set the position of a channel.","type":[[["Object"]]],"props":[{"name":"relative","description":"Whether or not to change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"The reason for changing the position","optional":true,"type":[[["string"]]]}],"meta":{"line":366,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildChannelCloneOptions","description":"Options used to clone a guild channel.","type":[[["GuildChannelCreateOptions"]]],"props":[{"name":"name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]}],"meta":{"line":390,"file":"GuildChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildEmojiEditOptions","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"meta":{"line":86,"file":"GuildEmoji.js","path":"packages/discord.js/src/structures"}},{"name":"GuildScheduledEventEntityMetadata","description":"Represents the additional metadata for a {@link GuildScheduledEvent}","see":["{@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}"],"type":[[["Object"]]],"props":[{"name":"location","description":"The location of the guild scheduled event","nullable":true,"type":[[["string"]]]}],"meta":{"line":173,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"GuildScheduledEventRecurrenceRule","description":"Represents the recurrence rule for a {@link GuildScheduledEvent}.","type":[[["Object"]]],"props":[{"name":"startTimestamp","description":"The timestamp the recurrence rule interval starts at","type":[[["number"]]]},{"name":"startAt","description":"The time the recurrence rule interval starts at","type":[[["Date"]]]},{"name":"endTimestamp","description":"The timestamp the recurrence rule interval ends at","nullable":true,"type":[[["number"]]]},{"name":"endAt","description":"The time the recurrence rule interval ends at","nullable":true,"type":[[["Date"]]]},{"name":"frequency","description":"How often the event occurs","type":[[["GuildScheduledEventRecurrenceRuleFrequency"]]]},{"name":"interval","description":"The spacing between the events","type":[[["number"]]]},{"name":"byWeekday","description":"The days within a week to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleWeekday",">"]]]},{"name":"byNWeekday","description":"The days within a week to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleNWeekday",">"]]]},{"name":"byMonth","description":"The months to recur on","nullable":true,"type":[[["Array","<"],["GuildScheduledEventRecurrenceRuleMonth",">"]]]},{"name":"byMonthDay","description":"The days within a month to recur on","nullable":true,"type":[[["Array","<"],["number",">"]]]},{"name":"byYearDay","description":"The days within a year to recur on","nullable":true,"type":[[["Array","<"],["number",">"]]]},{"name":"count","description":"The total amount of times the event is allowed to recur before stopping","nullable":true,"type":[[["number"]]]}],"meta":{"line":209,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"GuildScheduledEventRecurrenceRuleNWeekday","type":[[["Object"]]],"props":[{"name":"n","description":"The week to recur on","type":[[["number"]]]},{"name":"day","description":"The day within the week to recur on","type":[[["GuildScheduledEventRecurrenceRuleWeekday"]]]}],"meta":{"line":227,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"GuildScheduledEventInviteURLCreateOptions","description":"Options used to create an invite URL to a {@link GuildScheduledEvent}","type":[[["InviteCreateOptions"]]],"props":[{"name":"channel","description":"The channel to create the invite in.\n<warn>This is required when the `entityType` of `GuildScheduledEvent` is\n{@link GuildScheduledEventEntityType.External}, gets ignored otherwise</warn>","optional":true,"type":[[["GuildInvitableChannelResolvable"]]]}],"meta":{"line":354,"file":"GuildScheduledEvent.js","path":"packages/discord.js/src/structures"}},{"name":"GuildTemplateEditOptions","description":"Options used to edit a guild template.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this template","optional":true,"type":[[["string"]]]},{"name":"description","description":"The description of this template","optional":true,"type":[[["string"]]]}],"meta":{"line":170,"file":"GuildTemplate.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationAccount","description":"The information account for an integration","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the account","type":[[["Snowflake"]],[["string"]]]},{"name":"name","description":"The name of the account","type":[[["string"]]]}],"meta":{"line":7,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"IntegrationType","description":"The type of an {@link Integration}. This can be:\n- `twitch`\n- `youtube`\n- `discord`\n- `guild_subscription`","type":[[["string"]]],"meta":{"line":15,"file":"Integration.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityInstance","description":"The Activity launched by an interaction","type":[[["Object"]]],"props":[{"name":"id","description":"The instance id of the Activity","type":[[["string"]]]}],"meta":{"line":28,"file":"InteractionCallbackResource.js","path":"packages/discord.js/src/structures"}},{"name":"InteractionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"channel","description":"The channel to listen to interactions from","optional":true,"type":[[["TextBasedChannelsResolvable"]]]},{"name":"componentType","description":"The type of component to listen for","optional":true,"type":[[["ComponentType"]]]},{"name":"guild","description":"The guild to listen to interactions from","optional":true,"type":[[["GuildResolvable"]]]},{"name":"interactionType","description":"The type of interaction to listen for","optional":true,"type":[[["InteractionType"]]]},{"name":"max","description":"The maximum total amount of interactions to collect","optional":true,"type":[[["number"]]]},{"name":"maxComponents","description":"The maximum number of components to collect","optional":true,"type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to interact","optional":true,"type":[[["number"]]]},{"name":"message","description":"The message to listen to interactions from","optional":true,"type":[[["Message"]],[["APIMessage"]]]}],"meta":{"line":7,"file":"InteractionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"params":[{"name":"args","description":"Any arguments received by the listener","variable":true,"type":[[["*"]]]},{"name":"collection","description":"The items collected by this collector","type":[[["Collection"]]]}],"returns":[[[["boolean"]],[["Promise","<"],["boolean",">"]]]],"meta":{"line":9,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"filter","description":"The filter applied to this collector","optional":true,"type":[[["CollectorFilter"]]]},{"name":"time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to dispose data when it's deleted","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":18,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"CollectorResetTimerOptions","description":"Options used to reset the timeout and idle timer of a {@link Collector}.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for (in milliseconds)","optional":true,"type":[[["number"]]]},{"name":"idle","description":"How long to wait to stop the collector after inactivity (in milliseconds)","optional":true,"type":[[["number"]]]}],"meta":{"line":261,"file":"Collector.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ModalComponentData","type":[[["Object"]]],"props":[{"name":"title","description":"The title of the modal","type":[[["string"]]]},{"name":"customId","description":"The custom id of the modal","type":[[["string"]]]},{"name":"components","description":"The components within this modal","type":[[["Array","<"],["ActionRow",">"]]]}],"meta":{"line":12,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"InteractionDeferReplyOptions","description":"Options for deferring the reply to an {@link BaseInteraction}.","type":[[["Object"]]],"props":[{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]},{"name":"flags","description":"Flags for the reply.\n<info>Only `MessageFlags.Ephemeral` can be set.</info>","optional":true,"type":[[["MessageFlagsResolvable"]]]}],"meta":{"line":25,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"InteractionDeferUpdateOptions","description":"Options for deferring and updating the reply to a {@link MessageComponentInteraction}.","type":[[["Object"]]],"props":[{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]}],"meta":{"line":34,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"InteractionReplyOptions","description":"Options for a reply to a {@link BaseInteraction}.","type":[[["BaseMessageOptionsWithPoll"]]],"props":[{"name":"tts","description":"Whether the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]},{"name":"flags","description":"Which flags to set for the message.\n<info>Only `MessageFlags.Ephemeral`, `MessageFlags.SuppressEmbeds`, and `MessageFlags.SuppressNotifications`\ncan be set.</info>","optional":true,"type":[[["MessageFlagsResolvable"]]]}],"meta":{"line":41,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"InteractionUpdateOptions","description":"Options for updating the message received from a {@link MessageComponentInteraction}.","type":[[["MessageEditOptions"]]],"props":[{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]}],"meta":{"line":52,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"LaunchActivityOptions","description":"Options for launching activity in response to a {@link BaseInteraction}","type":[[["Object"]]],"props":[{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]}],"meta":{"line":59,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ShowModalOptions","description":"Options for showing a modal in response to a {@link BaseInteraction}","type":[[["Object"]]],"props":[{"name":"withResponse","description":"Whether to return an {@link InteractionCallbackResponse} as the response","optional":true,"type":[[["boolean"]]]}],"meta":{"line":66,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"InteractionEditReplyOptions","description":"Options that can be passed into {@link InteractionResponses#editReply}.","type":[[["WebhookMessageEditOptions"]]],"props":[{"name":"message","description":"The response to edit","optional":true,"default":"'@original'","type":[[["MessageResolvable"]],[["'@original'"]]]}],"meta":{"line":171,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"AwaitModalSubmitOptions","description":"An object containing the same properties as {@link CollectorOptions}, but a few less:","type":[[["Object"]]],"props":[{"name":"filter","description":"The filter applied to this collector","optional":true,"type":[[["CollectorFilter"]]]},{"name":"time","description":"Time in milliseconds to wait for an interaction before rejecting","type":[[["number"]]]}],"meta":{"line":332,"file":"InteractionResponses.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"PollAnswerData","description":"Represents the data for a poll answer.","type":[[["Object"]]],"props":[{"name":"text","description":"The text for the poll answer","type":[[["string"]]]},{"name":"emoji","description":"The emoji for the poll answer","optional":true,"type":[[["EmojiIdentifierResolvable"]]]}],"meta":{"line":62,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"PollData","description":"Represents the data for a poll.","type":[[["Object"]]],"props":[{"name":"question","description":"The question for the poll","type":[[["PollQuestionMedia"]]]},{"name":"answers","description":"The answers for the poll","type":[[["Array","<"],["PollAnswerData",">"]]]},{"name":"duration","description":"The duration in hours for the poll","type":[[["number"]]]},{"name":"allowMultiselect","description":"Whether the poll allows multiple answers","type":[[["boolean"]]]},{"name":"layoutType","description":"The layout type for the poll","optional":true,"type":[[["PollLayoutType"]]]}],"meta":{"line":70,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"BaseMessageOptions","description":"The base message options for messages.","type":[[["Object"]]],"props":[{"name":"content","description":"The content for the message. This can only be `null` when editing a message.","optional":true,"default":"''","nullable":true,"type":[[["string"]]]},{"name":"embeds","description":"The embeds for the message","optional":true,"type":[[["Array","<("],["EmbedBuilder","|"],["Embed","|"],["APIEmbed",")>"]]]},{"name":"allowedMentions","description":"Which mentions should be parsed from the message content\n(see {@link https://discord.com/developers/docs/resources/message#allowed-mentions-object here} for more details)","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"files","description":"The files to send with the message.","optional":true,"type":[[["Array","<("],["AttachmentBuilder","|"],["Attachment","|"],["AttachmentPayload","|"],["BufferResolvable",")>"]]]},{"name":"components","description":"Action rows containing interactive components for the message (buttons, select menus) and other\ntop-level components.\n<info>When using components v2, the flag {@link MessageFlags.IsComponentsV2} needs to be set\nand `content`, `embeds`, `stickers`, and `poll` cannot be used.</info>","optional":true,"type":[[["Array","<("],["ActionRowBuilder","|"],["MessageTopLevelComponent","|"],["APIMessageTopLevelComponent",")>"]]]}],"meta":{"line":81,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"BaseMessageOptionsWithPoll","description":"The base message options for messages including a poll.","type":[[["BaseMessageOptions"]]],"props":[{"name":"poll","description":"The poll to send with the message","optional":true,"type":[[["PollData"]]]}],"meta":{"line":98,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"BaseMessageCreateOptions","description":"The options for sending a message.","type":[[["BaseMessageOptionsWithPoll"]]],"props":[{"name":"tts","description":"Whether the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message\n<info>This property is required if `enforceNonce` set to `true`.</info>","optional":true,"type":[[["string"]]]},{"name":"enforceNonce","description":"Whether the nonce should be checked for uniqueness in the past few minutes.\nIf another message was created by the same author with the same nonce,\nthat message will be returned and no new message will be created","optional":true,"type":[[["boolean"]]]},{"name":"stickers","description":"The stickers to send in the message","optional":true,"default":"[]","type":[[["Array","<"],["StickerResolvable",">"]]]},{"name":"flags","description":"Which flags to set for the message.\n<info>Only {@link MessageFlags.SuppressEmbeds}, {@link MessageFlags.SuppressNotifications} and\n{@link MessageFlags.IsComponentsV2} can be set.</info>\n<info>{@link MessageFlags.IsComponentsV2} is required if passing components that aren't action rows</info>","optional":true,"type":[[["MessageFlags"]]]}],"meta":{"line":105,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"MessageReferenceOptions","type":[[["MessageReference"]]],"props":[{"name":"failIfNotExists","description":"Whether to error if the\nreferenced message doesn't exist instead of sending as a normal (non-reply) message","optional":true,"default":"this.client.options.failIfNotExists","type":[[["boolean"]]]}],"meta":{"line":122,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"MessageCreateOptions","description":"The options for sending a message.","type":[[["BaseMessageCreateOptions"]]],"props":[{"name":"messageReference","description":"The options for a reference to a message","optional":true,"type":[[["MessageReferenceOptions"]]]}],"meta":{"line":128,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"MessageMentionOptions","description":"Options provided to control parsing of mentions by Discord","type":[[["Object"]]],"props":[{"name":"parse","description":"Types of mentions to be parsed","optional":true,"type":[[["Array","<"],["MessageMentionTypes",">"]]]},{"name":"users","description":"Snowflakes of Users to be parsed as mentions","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]},{"name":"roles","description":"Snowflakes of Roles to be parsed as mentions","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]},{"name":"repliedUser","description":"Whether the author of the Message being replied to should be pinged","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":135,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"MessageMentionTypes","description":"Types of mentions to enable in MessageMentionOptions.\n- `roles`\n- `users`\n- `everyone`","type":[[["string"]]],"meta":{"line":145,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":215,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"ChannelWebhookCreateOptions","description":"Options used to create a {@link Webhook}.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"avatar","description":"Avatar for the webhook","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"meta":{"line":351,"file":"TextBasedChannel.js","path":"packages/discord.js/src/structures/interfaces"}},{"name":"RoleSubscriptionData","description":"Role subscription data found on {@link MessageType.RoleSubscriptionPurchase} messages.","type":[[["Object"]]],"props":[{"name":"roleSubscriptionListingId","description":"The id of the SKU and listing the user is subscribed to","type":[[["Snowflake"]]]},{"name":"tierName","description":"The name of the tier the user is subscribed to","type":[[["string"]]]},{"name":"totalMonthsSubscribed","description":"The total number of months the user has been subscribed for","type":[[["number"]]]},{"name":"isRenewal","description":"Whether this notification is a renewal","type":[[["boolean"]]]}],"meta":{"line":222,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageReference","description":"Reference data sent in a message that contains ids identifying the referenced message.\nThis can be present in the following types of message:\n- {@link MessageFlags.Crossposted}\n- {@link MessageType.ChannelPinnedMessage}\n- {@link MessageType.ChannelFollowAdd}\n- {@link MessageType.Reply}\n- {@link MessageType.ThreadStarterMessage}","see":["{@link https://discord.com/developers/docs/resources/message#message-object-message-types}"],"type":[[["Object"]]],"props":[{"name":"channelId","description":"The channel id that was referenced","type":[[["Snowflake"]]]},{"name":"guildId","description":"The guild id that was referenced","type":[[["Snowflake"]],[["undefined"]]]},{"name":"messageId","description":"The message id that was referenced","type":[[["Snowflake"]],[["undefined"]]]},{"name":"type","description":"The type of message reference","type":[[["MessageReferenceType"]]]}],"meta":{"line":372,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageInteractionMetadata","description":"Partial data of the interaction that a message is a result of","type":[[["Object"]]],"props":[{"name":"id","description":"The interaction's id","type":[[["Snowflake"]]]},{"name":"type","description":"The type of the interaction","type":[[["InteractionType"]]]},{"name":"user","description":"The user that invoked the interaction","type":[[["User"]]]},{"name":"authorizingIntegrationOwners","description":"Ids for installation context(s) related to an interaction","type":[[["APIAuthorizingIntegrationOwnersMap"]]]},{"name":"originalResponseMessageId","description":"Id of the original response message. Present only on follow-up messages","nullable":true,"type":[[["Snowflake"]]]},{"name":"interactedMessageId","description":"Id of the message that contained interactive component.\nPresent only on messages created from component interactions","nullable":true,"type":[[["Snowflake"]]]},{"name":"triggeringInteractionMetadata","description":"Metadata for the interaction that was used to open the modal. Present only on modal submit interactions","nullable":true,"type":[[["MessageInteractionMetadata"]]]}],"meta":{"line":410,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageCall","description":"A call associated with a message","type":[[["Object"]]],"props":[{"name":"endedAt","description":"The time the call ended","type":[[["Readonly","<?"],["Date",">"]]]},{"name":"endedTimestamp","description":"The timestamp the call ended","nullable":true,"type":[[["number"]]]},{"name":"participants","description":"The ids of the users that participated in the call","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":477,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":625,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageComponentCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"componentType","description":"The type of component to listen for","optional":true,"type":[[["ComponentType"]]]},{"name":"max","description":"The maximum total amount of interactions to collect","optional":true,"type":[[["number"]]]},{"name":"maxComponents","description":"The maximum number of components to collect","optional":true,"type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to interact","optional":true,"type":[[["number"]]]}],"meta":{"line":655,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"AwaitMessageComponentOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["Object"]]],"props":[{"name":"filter","description":"The filter applied to this collector","optional":true,"type":[[["CollectorFilter"]]]},{"name":"time","description":"Time to wait for an interaction before rejecting","optional":true,"type":[[["number"]]]},{"name":"componentType","description":"The type of component interaction to collect","optional":true,"type":[[["ComponentType"]]]},{"name":"idle","description":"Time to wait without another message component interaction before ending the collector","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to remove the message component interaction after collecting","optional":true,"type":[[["boolean"]]]}],"meta":{"line":683,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageReplyOptions","description":"Options provided when sending a message as an inline reply.","type":[[["BaseMessageCreateOptions"]]],"props":[{"name":"failIfNotExists","description":"Whether to error if the referenced\nmessage does not exist (creates a standard message in this case when false)","optional":true,"default":"this.client.options.failIfNotExists","type":[[["boolean"]]]}],"meta":{"line":960,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"StartThreadOptions","description":"Options for starting a thread on a message.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the new thread","type":[[["string"]]]},{"name":"autoArchiveDuration","description":"The amount of\ntime after which the thread should automatically archive in case of no recent activity","optional":true,"default":"this.channel.defaultAutoArchiveDuration","type":[[["ThreadAutoArchiveDuration"]]]},{"name":"reason","description":"Reason for creating the thread","optional":true,"type":[[["string"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for the thread in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":1016,"file":"Message.js","path":"packages/discord.js/src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to collect","type":[[["number"]]]},{"name":"maxProcessed","description":"The maximum amount of messages to process","type":[[["number"]]]}],"meta":{"line":6,"file":"MessageCollector.js","path":"packages/discord.js/src/structures"}},{"name":"MessageActionRowComponent","description":"Components that can be placed in an action row for messages.\n- ButtonComponent\n- StringSelectMenuComponent\n- UserSelectMenuComponent\n- RoleSelectMenuComponent\n- MentionableSelectMenuComponent\n- ChannelSelectMenuComponent","type":[[["ButtonComponent"]],[["StringSelectMenuComponent"]],[["UserSelectMenuComponent"]],[["RoleSelectMenuComponent"]],[["MentionableSelectMenuComponent"]],[["ChannelSelectMenuComponent"]]],"meta":{"line":78,"file":"MessageComponentInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"CrosspostedChannel","description":"Crossposted channel data.","type":[[["Object"]]],"props":[{"name":"channelId","description":"The mentioned channel's id","type":[[["Snowflake"]]]},{"name":"guildId","description":"The id of the guild that has the channel","type":[[["Snowflake"]]]},{"name":"type","description":"The channel's type","type":[[["ChannelType"]]]},{"name":"name","description":"The channel's name","type":[[["string"]]]}],"meta":{"line":167,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"MessageMentionsHasOptions","description":"Options used to check for a mention.","type":[[["Object"]]],"props":[{"name":"ignoreDirect","description":"Whether to ignore direct mentions to the item","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ignoreRoles","description":"Whether to ignore role mentions to a guild member","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ignoreRepliedUser","description":"Whether to ignore replied user mention to an user","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ignoreEveryone","description":"Whether to ignore `@everyone`/`@here` mentions","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":267,"file":"MessageMentions.js","path":"packages/discord.js/src/structures"}},{"name":"MessageTarget","description":"A target for a message.","type":[[["TextBasedChannels"]],[["ChannelManager"]],[["Webhook"]],[["WebhookClient"]],[["BaseInteraction"]],[["InteractionWebhook"]],[["Message"]],[["MessageManager"]]],"meta":{"line":299,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"MessagePayloadOption","description":"A possible payload option.","type":[[["MessageCreateOptions"]],[["MessageEditOptions"]],[["WebhookMessageCreateOptions"]],[["WebhookMessageEditOptions"]],[["InteractionReplyOptions"]],[["InteractionUpdateOptions"]]],"meta":{"line":306,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"ReactionCountDetailsData","description":"The reaction count details object contains information about super and normal reaction counts.","type":[[["Object"]]],"props":[{"name":"burst","description":"Count of super reactions","type":[[["number"]]]},{"name":"normal","description":"Count of normal reactions","type":[[["number"]]]}],"meta":{"line":79,"file":"MessageReaction.js","path":"packages/discord.js/src/structures"}},{"name":"ModalData","type":[[["Object"]]],"props":[{"name":"value","description":"The value of the field","type":[[["string"]]]},{"name":"type","description":"The component type of the field","type":[[["ComponentType"]]]},{"name":"customId","description":"The custom id of the field","type":[[["string"]]]}],"meta":{"line":11,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"ActionRowModalData","type":[[["Object"]]],"props":[{"name":"components","description":"The components of this action row","type":[[["Array","<"],["ModalData",">"]]]},{"name":"type","description":"The component type of the action row","type":[[["ComponentType"]]]}],"meta":{"line":18,"file":"ModalSubmitInteraction.js","path":"packages/discord.js/src/structures"}},{"name":"PartialRecipient","description":"Recipient data received in a {@link PartialGroupDMChannel}.","type":[[["Object"]]],"props":[{"name":"username","description":"The username of the recipient","type":[[["string"]]]}],"meta":{"line":35,"file":"PartialGroupDMChannel.js","path":"packages/discord.js/src/structures"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n```js\n{\n 'SendMessages': true,\n 'EmbedLinks': null,\n 'AttachFiles': false,\n}\n```","type":[[["Object","<"],["string",", ?"],["boolean",">"]]],"meta":{"line":105,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"ResolvedOverwriteOptions","type":[[["Object"]]],"props":[{"name":"allow","description":"The allowed permissions","type":[[["PermissionsBitField"]]]},{"name":"deny","description":"The denied permissions","type":[[["PermissionsBitField"]]]}],"meta":{"line":118,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"RawOverwriteData","description":"The raw data for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the {@link Role} or {@link User} this overwrite belongs to","type":[[["Snowflake"]]]},{"name":"allow","description":"The permissions to allow","type":[[["string"]]]},{"name":"deny","description":"The permissions to deny","type":[[["string"]]]},{"name":"type","description":"The type of this OverwriteData","type":[[["number"]]]}],"meta":{"line":151,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"OverwriteResolvable","description":"Data that can be resolved into {@link APIOverwrite}. This can be:\n- PermissionOverwrites\n- OverwriteData","type":[[["PermissionOverwrites"]],[["OverwriteData"]]],"meta":{"line":161,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"OverwriteData","description":"Data that can be used for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"Member or role this overwrite is for","type":[[["UserResolvable"]],[["RoleResolvable"]]]},{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"type","description":"The type of this OverwriteData (mandatory if `id` is a Snowflake)","optional":true,"type":[[["OverwriteType"]]]}],"meta":{"line":169,"file":"PermissionOverwrites.js","path":"packages/discord.js/src/structures"}},{"name":"PollQuestionMedia","description":"The media for a poll's question","type":[[["Object"]]],"props":[{"name":"text","description":"The text of this question","nullable":true,"type":[[["string"]]]}],"meta":{"line":123,"file":"Poll.js","path":"packages/discord.js/src/structures"}},{"name":"BaseFetchPollAnswerVotersOptions","description":"Options used for fetching voters of a poll answer.","type":[[["Object"]]],"props":[{"name":"limit","description":"The maximum number of voters to fetch","optional":true,"type":[[["number"]]]},{"name":"after","description":"The user id to fetch voters after","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":97,"file":"PollAnswer.js","path":"packages/discord.js/src/structures"}},{"name":"MessageActivity","description":"Activity sent in a message.","type":[[["Object"]]],"props":[{"name":"partyId","description":"Id of the party represented in activity","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of activity sent","type":[[["MessageActivityType"]]]}],"meta":{"line":9,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"PresenceStatus","description":"The status of this presence:\n- `online` - user is online\n- `idle` - user is AFK\n- `offline` - user is offline or invisible\n- `dnd` - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":17,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"ClientPresenceStatus","description":"The status of this presence:\n- `online` - user is online\n- `idle` - user is AFK\n- `dnd` - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":27,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"ClientPresenceStatusData","type":[[["Object"]]],"props":[{"name":"web","description":"The current presence in the web application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"mobile","description":"The current presence in the mobile application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"desktop","description":"The current presence in the desktop application","nullable":true,"type":[[["ClientPresenceStatus"]]]}],"meta":{"line":106,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityTimestamps","description":"Represents timestamps of an activity","type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":212,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityParty","description":"Represents a party of an activity","type":[[["Object"]]],"props":[{"name":"id","description":"The party's id","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":232,"file":"Presence.js","path":"packages/discord.js/src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":7,"file":"ReactionCollector.js","path":"packages/discord.js/src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]},{"name":"icon","description":"The icon for the role\n<warn>The `EmojiResolvable` should belong to the same guild as the role.\nIf not, pass the emoji's URL directly</warn>","optional":true,"nullable":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]],[["EmojiResolvable"]]]},{"name":"unicodeEmoji","description":"The unicode emoji for the role","optional":true,"nullable":true,"type":[[["string"]]]}],"meta":{"line":255,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"SetRolePositionOptions","description":"Options used to set the position of a role.","type":[[["Object"]]],"props":[{"name":"relative","description":"Whether to change the position relative to its current value or not","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"The reason for changing the position","optional":true,"type":[[["string"]]]}],"meta":{"line":415,"file":"Role.js","path":"packages/discord.js/src/structures"}},{"name":"GuildStickerEditOptions","description":"Data for editing a sticker.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the sticker","optional":true,"type":[[["string"]]]},{"name":"description","description":"The description of the sticker","optional":true,"nullable":true,"type":[[["string"]]]},{"name":"tags","description":"The Discord name of a unicode emoji representing the sticker's expression","optional":true,"type":[[["string"]]]},{"name":"reason","description":"Reason for editing this sticker","optional":true,"type":[[["string"]]]}],"meta":{"line":220,"file":"Sticker.js","path":"packages/discord.js/src/structures"}},{"name":"FetchThreadOwnerOptions","description":"Options used to fetch a thread owner.","type":[[["BaseFetchOptions"]]],"props":[{"name":"withMember","description":"Whether to also return the guild member associated with this thread member","optional":true,"type":[[["boolean"]]]}],"meta":{"line":315,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"ThreadEditOptions","description":"The options used to edit a thread channel","type":[[["Object"]]],"props":[{"name":"name","description":"The new name for the thread","optional":true,"type":[[["string"]]]},{"name":"archived","description":"Whether the thread is archived","optional":true,"type":[[["boolean"]]]},{"name":"autoArchiveDuration","description":"The amount of time after which the thread\nshould automatically archive in case of no recent activity","optional":true,"type":[[["ThreadAutoArchiveDuration"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user (slowmode) for the thread in seconds","optional":true,"type":[[["number"]]]},{"name":"locked","description":"Whether the thread is locked","optional":true,"type":[[["boolean"]]]},{"name":"invitable","description":"Whether non-moderators can add other non-moderators to a thread\n<info>Can only be edited on {@link ChannelType.PrivateThread}</info>","optional":true,"type":[[["boolean"]]]},{"name":"appliedTags","description":"The tags to apply to the thread","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]},{"name":"flags","description":"The flags to set on the channel","optional":true,"type":[[["ChannelFlagsResolvable"]]]},{"name":"reason","description":"Reason for editing the thread","optional":true,"type":[[["string"]]]}],"meta":{"line":347,"file":"ThreadChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildForumTagEmoji","type":[[["Object"]]],"props":[{"name":"id","description":"The id of a guild's custom emoji","nullable":true,"type":[[["Snowflake"]]]},{"name":"name","description":"The unicode character of the emoji","nullable":true,"type":[[["string"]]]}],"meta":{"line":8,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildForumTag","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the tag","type":[[["Snowflake"]]]},{"name":"name","description":"The name of the tag","type":[[["string"]]]},{"name":"moderated","description":"Whether this tag can only be added to or removed from threads\nby a member with the `ManageThreads` permission","type":[[["boolean"]]]},{"name":"emoji","description":"The emoji of this tag","nullable":true,"type":[[["GuildForumTagEmoji"]]]}],"meta":{"line":14,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"GuildForumTagData","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the tag","optional":true,"type":[[["Snowflake"]]]},{"name":"name","description":"The name of the tag","type":[[["string"]]]},{"name":"moderated","description":"Whether this tag can only be added to or removed from threads\nby a member with the `ManageThreads` permission","optional":true,"type":[[["boolean"]]]},{"name":"emoji","description":"The emoji of this tag","optional":true,"nullable":true,"type":[[["GuildForumTagEmoji"]]]}],"meta":{"line":23,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"DefaultReactionEmoji","type":[[["Object"]]],"props":[{"name":"id","description":"The id of a guild's custom emoji","nullable":true,"type":[[["Snowflake"]]]},{"name":"name","description":"The unicode character of the emoji","nullable":true,"type":[[["string"]]]}],"meta":{"line":32,"file":"ThreadOnlyChannel.js","path":"packages/discord.js/src/structures"}},{"name":"AvatarDecorationData","type":[[["Object"]]],"props":[{"name":"asset","description":"The avatar decoration hash","type":[[["string"]]]},{"name":"skuId","description":"The id of the avatar decoration's SKU","type":[[["Snowflake"]]]}],"meta":{"line":135,"file":"User.js","path":"packages/discord.js/src/structures"}},{"name":"SendSoundboardSoundOptions","type":[[["Object"]]],"props":[{"name":"soundId","description":"The id of the soundboard sound to send","type":[[["string"]]]},{"name":"guildId","description":"The id of the guild the soundboard sound is a part of","optional":true,"type":[[["string"]]]}],"meta":{"line":41,"file":"VoiceChannel.js","path":"packages/discord.js/src/structures"}},{"name":"VoiceStateEditOptions","description":"Data to edit the logged in user's own voice state with, when in a stage channel","type":[[["Object"]]],"props":[{"name":"requestToSpeak","description":"Whether or not the client is requesting to become a speaker.\n<info>Only available to the logged in user's own voice state.</info>","optional":true,"type":[[["boolean"]]]},{"name":"suppressed","description":"Whether or not the user should be suppressed.","optional":true,"type":[[["boolean"]]]}],"meta":{"line":230,"file":"VoiceState.js","path":"packages/discord.js/src/structures"}},{"name":"WebhookMessageCreateOptions","description":"Options that can be passed into send.","type":[[["BaseMessageOptionsWithPoll"]]],"props":[{"name":"tts","description":"Whether the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"flags","description":"Which flags to set for the message.\n<info>Only the {@link MessageFlags.SuppressEmbeds} flag can be set.</info>","optional":true,"type":[[["MessageFlags"]]]},{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"threadId","description":"The id of the thread in the channel to send to.\n<info>For interaction webhooks, this property is ignored</info>","optional":true,"type":[[["Snowflake"]]]},{"name":"threadName","description":"Name of the thread to create (only available if the webhook is in a forum channel)","optional":true,"type":[[["string"]]]},{"name":"appliedTags","description":"The tags to apply to the created thread (only available if the webhook is in a forum channel)","optional":true,"type":[[["Array","<"],["Snowflake",">"]]]},{"name":"withComponents","description":"Whether to allow sending non-interactive components in the message.\n<info>For application-owned webhooks, this property is ignored</info>","optional":true,"type":[[["boolean"]]]}],"meta":{"line":139,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"WebhookMessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["MessageEditOptions"]]],"props":[{"name":"threadId","description":"The id of the thread this message belongs to\n<info>For interaction webhooks, this property is ignored</info>","optional":true,"type":[[["Snowflake"]]]},{"name":"withComponents","description":"Whether to allow sending non-interactive components in the message.\n<info>For application-owned webhooks, this property is ignored</info>","optional":true,"type":[[["boolean"]]]}],"meta":{"line":157,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"WebhookEditOptions","description":"Options used to edit a {@link Webhook}.","type":[[["Object"]]],"props":[{"name":"name","description":"The new name for the webhook","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the webhook","optional":true,"nullable":true,"type":[[["BufferResolvable"]]]},{"name":"channel","description":"The new channel for the webhook","optional":true,"type":[[["GuildTextChannelResolvable"]],[["VoiceChannel"]],[["StageChannel"]],[["ForumChannel"]],[["MediaChannel"]]]},{"name":"reason","description":"Reason for editing the webhook","optional":true,"type":[[["string"]]]}],"meta":{"line":288,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"WebhookFetchMessageOptions","description":"Options that can be passed into fetchMessage.","type":[[["options"]]],"props":[{"name":"cache","description":"Whether to cache the message.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"threadId","description":"The id of the thread this message belongs to.\n<info>For interaction webhooks, this property is ignored</info>","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":324,"file":"Webhook.js","path":"packages/discord.js/src/structures"}},{"name":"WidgetChannel","description":"Represents a channel in a Widget","type":[[["Object"]]],"props":[{"name":"id","description":"Id of the channel","type":[[["Snowflake"]]]},{"name":"name","description":"Name of the channel","type":[[["string"]]]},{"name":"position","description":"Position of the channel","type":[[["number"]]]}],"meta":{"line":19,"file":"Widget.js","path":"packages/discord.js/src/structures"}},{"name":"WidgetActivity","description":"Activity sent in a {@link WidgetMember}.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the activity","type":[[["string"]]]}],"meta":{"line":11,"file":"WidgetMember.js","path":"packages/discord.js/src/structures"}},{"name":"ApplicationFlagsResolvable","description":"Data that can be resolved to give an application flag bit field. This can be:\n- A string (see {@link ApplicationFlagsBitField.Flags})\n- An application flag\n- An instance of ApplicationFlagsBitField\n- An Array of ApplicationFlagsResolvable","type":[[["string"]],[["number"]],[["ApplicationFlagsBitField"]],[["Array","<"],["ApplicationFlagsResolvable",">"]]],"meta":{"line":36,"file":"ApplicationFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"BitFieldResolvable","description":"Data that can be resolved to give a bitfield. This can be:\n- A bit number (this can be a number literal or a value taken from {@link BitField.Flags})\n- A string bit number\n- An instance of BitField\n- An Array of BitFieldResolvable","type":[[["number"]],[["string"]],[["bigint"]],[["BitField"]],[["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":164,"file":"BitField.js","path":"packages/discord.js/src/util"}},{"name":"ChannelFlagsResolvable","description":"Data that can be resolved to give a channel flag bitfield. This can be:\n- A string (see {@link ChannelFlagsBitField.Flags})\n- A channel flag\n- An instance of ChannelFlagsBitField\n- An Array of ChannelFlagsResolvable","type":[[["string"]],[["number"]],[["ChannelFlagsBitField"]],[["Array","<"],["ChannelFlagsResolvable",">"]]],"meta":{"line":36,"file":"ChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"CreateChannelOptions","description":"Extra options for creating a channel.","access":"private","type":[[["Object"]]],"props":[{"name":"allowFromUnknownGuild","description":"Whether to allow creating a channel from an unknown guild","optional":true,"type":[[["boolean"]]]}],"meta":{"line":18,"file":"Channels.js","path":"packages/discord.js/src/util"}},{"name":"Colors","type":[[["Object"]]],"props":[{"name":"Aqua","description":"0x1ABC9C | rgb(26,188,156)","type":[[["number"]]]},{"name":"Blue","description":"0x3498DB | rgb(52,152,219)","type":[[["number"]]]},{"name":"Blurple","description":"0x5865F2 | rgb(88,101,242)","type":[[["number"]]]},{"name":"DarkAqua","description":"0x11806A | rgb(17,128,106)","type":[[["number"]]]},{"name":"DarkBlue","description":"0x206694 | rgb(32,102,148)","type":[[["number"]]]},{"name":"DarkButNotBlack","description":"0x2C2F33 | rgb(44,47,51)","type":[[["number"]]]},{"name":"DarkerGrey","description":"0x7F8C8D | rgb(127,140,141)","type":[[["number"]]]},{"name":"DarkGold","description":"0xC27C0E | rgb(194,124,14)","type":[[["number"]]]},{"name":"DarkGreen","description":"0x1F8B4C | rgb(31,139,76)","type":[[["number"]]]},{"name":"DarkGrey","description":"0x979C9F | rgb(151,156,159)","type":[[["number"]]]},{"name":"DarkNavy","description":"0x2C3E50 | rgb(44,62,80)","type":[[["number"]]]},{"name":"DarkOrange","description":"0xA84300 | rgb(168,67,0)","type":[[["number"]]]},{"name":"DarkPurple","description":"0x71368A | rgb(113,54,138)","type":[[["number"]]]},{"name":"DarkRed","description":"0x992D22 | rgb(153,45,34)","type":[[["number"]]]},{"name":"DarkVividPink","description":"0xAD1457 | rgb(173,20,87)","type":[[["number"]]]},{"name":"Default","description":"0x000000 | rgb(0,0,0)","type":[[["number"]]]},{"name":"Fuchsia","description":"0xEB459E | rgb(235,69,158)","type":[[["number"]]]},{"name":"Gold","description":"0xF1C40F | rgb(241,196,15)","type":[[["number"]]]},{"name":"Green","description":"0x57F287 | rgb(87,242,135)","type":[[["number"]]]},{"name":"Grey","description":"0x95A5A6 | rgb(149,165,166)","type":[[["number"]]]},{"name":"Greyple","description":"0x99AAb5 | rgb(153,170,181)","type":[[["number"]]]},{"name":"LightGrey","description":"0xBCC0C0 | rgb(188,192,192)","type":[[["number"]]]},{"name":"LuminousVividPink","description":"0xE91E63 | rgb(233,30,99)","type":[[["number"]]]},{"name":"Navy","description":"0x34495E | rgb(52,73,94)","type":[[["number"]]]},{"name":"NotQuiteBlack","description":"0x23272A | rgb(35,39,42)","type":[[["number"]]]},{"name":"Orange","description":"0xE67E22 | rgb(230,126,34)","type":[[["number"]]]},{"name":"Purple","description":"0x9B59B6 | rgb(155,89,182)","type":[[["number"]]]},{"name":"Red","description":"0xED4245 | rgb(237,66,69)","type":[[["number"]]]},{"name":"White","description":"0xFFFFFF | rgb(255,255,255)","type":[[["number"]]]},{"name":"Yellow","description":"0xFEE75C | rgb(254,231,92)","type":[[["number"]]]}],"meta":{"line":3,"file":"Colors.js","path":"packages/discord.js/src/util"}},{"name":"BaseComponentData","type":[[["Object"]]],"props":[{"name":"id","description":"the id of this component","optional":true,"type":[[["number"]]]},{"name":"type","description":"The type of component","type":[[["ComponentType"]]]}],"meta":{"line":7,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ActionRowData","type":[[["BaseComponentData"]]],"props":[{"name":"components","description":"The components in this action row","type":[[["Array","<"],["ComponentData",">"]]]}],"meta":{"line":13,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ButtonComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"style","description":"The style of the button","type":[[["ButtonStyle"]]]},{"name":"disabled","description":"Whether this button is disabled","optional":true,"type":[[["boolean"]]]},{"name":"label","description":"The label of this button","type":[[["string"]]]},{"name":"emoji","description":"The emoji on this button","optional":true,"type":[[["APIMessageComponentEmoji"]]]},{"name":"customId","description":"The custom id of the button","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the button","optional":true,"type":[[["string"]]]}],"meta":{"line":18,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"SelectMenuComponentOptionData","type":[[["Object"]]],"props":[{"name":"label","description":"The label of the option","type":[[["string"]]]},{"name":"value","description":"The value of the option","type":[[["string"]]]},{"name":"description","description":"The description of the option","optional":true,"type":[[["string"]]]},{"name":"emoji","description":"The emoji on the option","optional":true,"type":[[["APIMessageComponentEmoji"]]]},{"name":"default","description":"Whether this option is selected by default","optional":true,"type":[[["boolean"]]]}],"meta":{"line":28,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"SelectMenuComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"customId","description":"The custom id of the select menu","type":[[["string"]]]},{"name":"disabled","description":"Whether the select menu is disabled or not","optional":true,"type":[[["boolean"]]]},{"name":"maxValues","description":"The maximum amount of options that can be selected","optional":true,"type":[[["number"]]]},{"name":"minValues","description":"The minimum amount of options that can be selected","optional":true,"type":[[["number"]]]},{"name":"options","description":"The options in this select menu","optional":true,"type":[[["Array","<"],["SelectMenuComponentOptionData",">"]]]},{"name":"placeholder","description":"The placeholder of the select menu","optional":true,"type":[[["string"]]]}],"meta":{"line":37,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"MessageComponentData","type":[[["ActionRowData"]],[["ButtonComponentData"]],[["SelectMenuComponentData"]]],"meta":{"line":47,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"TextInputComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"customId","description":"The custom id of the text input","type":[[["string"]]]},{"name":"style","description":"The style of the text input","type":[[["TextInputStyle"]]]},{"name":"label","description":"The text that appears on top of the text input field","type":[[["string"]]]},{"name":"minLength","description":"The minimum number of characters that can be entered in the text input","optional":true,"type":[[["number"]]]},{"name":"maxLength","description":"The maximum number of characters that can be entered in the text input","optional":true,"type":[[["number"]]]},{"name":"required","description":"Whether or not the text input is required or not","optional":true,"type":[[["boolean"]]]},{"name":"value","description":"The pre-filled text in the text input","optional":true,"type":[[["string"]]]},{"name":"placeholder","description":"Placeholder for the text input","optional":true,"type":[[["string"]]]}],"meta":{"line":51,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"UnfurledMediaItemData","type":[[["Object"]]],"props":[{"name":"url","description":"The url of this media item. Accepts either http:, https: or attachment: protocol","type":[[["string"]]]}],"meta":{"line":63,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ThumbnailComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"media","description":"The media for the thumbnail","type":[[["UnfurledMediaItemData"]]]},{"name":"description","description":"The description of the thumbnail","optional":true,"type":[[["string"]]]},{"name":"spoiler","description":"Whether the thumbnail should be spoilered","optional":true,"type":[[["boolean"]]]}],"meta":{"line":68,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"FileComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"file","description":"The file media in this component","type":[[["UnfurledMediaItemData"]]]},{"name":"spoiler","description":"Whether the file should be spoilered","optional":true,"type":[[["boolean"]]]}],"meta":{"line":75,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"MediaGalleryItemData","type":[[["Object"]]],"props":[{"name":"media","description":"The media for the media gallery item","type":[[["UnfurledMediaItemData"]]]},{"name":"description","description":"The description of the media gallery item","optional":true,"type":[[["string"]]]},{"name":"spoiler","description":"Whether the media gallery item should be spoilered","optional":true,"type":[[["boolean"]]]}],"meta":{"line":81,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"MediaGalleryComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"items","description":"The media gallery items in this media gallery component","type":[[["Array","<"],["MediaGalleryItemData",">"]]]}],"meta":{"line":88,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"SeparatorComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"spacing","description":"The spacing size of this component","optional":true,"type":[[["SeparatorSpacingSize"]]]},{"name":"divider","description":"Whether the separator shows as a divider","optional":true,"type":[[["boolean"]]]}],"meta":{"line":93,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"SectionComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"components","description":"The components in this section","type":[[["Array","<"],["Components",">"]]]},{"name":"accessory","description":"The accessory shown next to this section","type":[[["ButtonComponentData"]],[["ThumbnailComponentData"]]]}],"meta":{"line":99,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"TextDisplayComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"content","description":"The content displayed in this component","type":[[["string"]]]}],"meta":{"line":105,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ComponentInContainerData","type":[[["ActionRowData"]],[["FileComponentData"]],[["MediaGalleryComponentData"]],[["SectionComponentData"]],[["SeparatorComponentData"]],[["TextDisplayComponentData"]]],"meta":{"line":110,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ContainerComponentData","type":[[["BaseComponentData"]]],"props":[{"name":"components","description":"The components in this container","type":[[["ComponentInContainerData"]]]},{"name":"accentColor","description":"The accent color of this container","optional":true,"nullable":true,"type":[[["number"]]]},{"name":"spoiler","description":"Whether the container should be spoilered","optional":true,"type":[[["boolean"]]]}],"meta":{"line":115,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"ComponentData","type":[[["ActionRowData"]],[["ButtonComponentData"]],[["SelectMenuComponentData"]],[["TextInputComponentData"]],[["ThumbnailComponentData"]],[["FileComponentData"]],[["MediaGalleryComponentData"]],[["SeparatorComponentData"]],[["SectionComponentData"]],[["TextDisplayComponentData"]],[["ContainerComponentData"]]],"meta":{"line":122,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"MessageTopLevelComponent","type":[[["ActionRow"]],[["ContainerComponent"]],[["FileComponent"]],[["MediaGalleryComponent"]],[["SectionComponent"]],[["SeparatorComponent"]],[["TextDisplayComponent"]]],"meta":{"line":128,"file":"Components.js","path":"packages/discord.js/src/util"}},{"name":"Constants","description":"Constants that can be used in an enum or object-like way.","type":[[["Object"]]],"props":[{"name":"MaxBulkDeletableMessageAge","description":"Max bulk deletable message age","type":[[["number"]]]},{"name":"SweeperKeys","description":"The possible names of items that can be swept in sweepers","type":[[["Array","<"],["SweeperKey",">"]]]},{"name":"NonSystemMessageTypes","description":"The types of messages that are not deemed a system type","type":[[["NonSystemMessageTypes"]]]},{"name":"TextBasedChannelTypes","description":"The types of channels that are text-based","type":[[["TextBasedChannelTypes"]]]},{"name":"ThreadChannelTypes","description":"The types of channels that are threads","type":[[["ThreadChannelTypes"]]]},{"name":"VoiceBasedChannelTypes","description":"The types of channels that are voice-based","type":[[["VoiceBasedChannelTypes"]]]},{"name":"SelectMenuTypes","description":"The types of components that are select menus.","type":[[["SelectMenuTypes"]]]},{"name":"StickerFormatExtensionMap","description":"A mapping between sticker formats and their respective image formats.","type":[[["Object"]]]}],"meta":{"line":225,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"MaxBulkDeletableMessageAge","description":"Max bulk deletable message age","type":[[["number"]]],"meta":{"line":5,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"SweeperKey","description":"The name of an item to be swept in Sweepers\n- `autoModerationRules`\n- `applicationCommands` - both global and guild commands\n- `bans`\n- `emojis`\n- `entitlements`\n- `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n- `guildMembers`\n- `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n- `presences`\n- `reactions`\n- `stageInstances`\n- `stickers`\n- `threadMembers`\n- `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n- `users`\n- `voiceStates`","type":[[["string"]]],"meta":{"line":12,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"NonSystemMessageTypes","description":"The types of messages that are not `System`. The available types are:\n- {@link MessageType.Default}\n- {@link MessageType.Reply}\n- {@link MessageType.ChatInputCommand}\n- {@link MessageType.ContextMenuCommand}","type":[[["Array","<"],["MessageType",">"]]],"meta":{"line":52,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"GuildTextBasedChannel","description":"The guild channels that are text-based.\n- TextChannel\n- AnnouncementChannel\n- ThreadChannel\n- VoiceChannel\n- StageChannel","type":[[["TextChannel"]],[["AnnouncementChannel"]],[["ThreadChannel"]],[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":68,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"GuildTextBasedChannelTypes","description":"The types of guild channels that are text-based. The available types are:\n- {@link ChannelType.GuildText}\n- {@link ChannelType.GuildAnnouncement}\n- {@link ChannelType.AnnouncementThread}\n- {@link ChannelType.PublicThread}\n- {@link ChannelType.PrivateThread}\n- {@link ChannelType.GuildVoice}\n- {@link ChannelType.GuildStageVoice}","type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":79,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"TextBasedChannels","description":"The channels that are text-based.\n- {@link DMChannel}\n- {@link GuildTextBasedChannel}","type":[[["DMChannel"]],[["GuildTextBasedChannel"]]],"meta":{"line":101,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"TextBasedChannelsResolvable","description":"Data that resolves to give a text-based channel. This can be:\n- A {@link TextBasedChannel}\n- A {@link Snowflake}","type":[[["TextBasedChannels"]],[["Snowflake"]]],"meta":{"line":109,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"TextBasedChannelTypes","description":"The types of channels that are text-based. The available types are:\n- {@link ChannelType.DM}\n- {@link ChannelType.GuildText}\n- {@link ChannelType.GuildAnnouncement}\n- {@link ChannelType.AnnouncementThread}\n- {@link ChannelType.PublicThread}\n- {@link ChannelType.PrivateThread}\n- {@link ChannelType.GuildVoice}\n- {@link ChannelType.GuildStageVoice}\n- {@link ChannelType.GroupDM}","type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":117,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"SendableChannels","description":"The types of channels that are text-based and can have messages sent into. The available types are:\n- {@link ChannelType.DM}\n- {@link ChannelType.GuildText}\n- {@link ChannelType.GuildAnnouncement}\n- {@link ChannelType.AnnouncementThread}\n- {@link ChannelType.PublicThread}\n- {@link ChannelType.PrivateThread}\n- {@link ChannelType.GuildVoice}\n- {@link ChannelType.GuildStageVoice}","type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":133,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"ThreadChannelTypes","description":"The types of channels that are threads. The available types are:\n- {@link ChannelType.AnnouncementThread}\n- {@link ChannelType.PublicThread}\n- {@link ChannelType.PrivateThread}","type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":148,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"VoiceBasedChannelTypes","description":"The types of channels that are voice-based. The available types are:\n- {@link ChannelType.GuildVoice}\n- {@link ChannelType.GuildStageVoice}","type":[[["Array","<"],["ChannelType",">"]]],"meta":{"line":158,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"SelectMenuTypes","description":"The types of select menus. The available types are:\n- {@link ComponentType.StringSelect}\n- {@link ComponentType.UserSelect}\n- {@link ComponentType.RoleSelect}\n- {@link ComponentType.MentionableSelect}\n- {@link ComponentType.ChannelSelect}","type":[[["Array","<"],["ComponentType",">"]]],"meta":{"line":167,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"UndeletableMessageTypes","description":"The types of messages that cannot be deleted. The available types are:\n- {@link MessageType.RecipientAdd}\n- {@link MessageType.RecipientRemove}\n- {@link MessageType.Call}\n- {@link MessageType.ChannelNameChange}\n- {@link MessageType.ChannelIconChange}\n- {@link MessageType.ThreadStarterMessage}","type":[[["Array","<"],["MessageType",">"]]],"meta":{"line":185,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"StickerFormatExtensionMap","description":"A mapping between sticker formats and their respective image formats.\n- {@link StickerFormatType.PNG} -> {@link ImageFormat.PNG}\n- {@link StickerFormatType.APNG} -> {@link ImageFormat.PNG}\n- {@link StickerFormatType.Lottie} -> {@link ImageFormat.Lottie}\n- {@link StickerFormatType.GIF} -> {@link ImageFormat.GIF}","type":[[["Object"]]],"props":[{"name":"1","description":"PNG","type":[[["\"png\""]]]},{"name":"2","description":"APNG","type":[[["\"png\""]]]},{"name":"3","description":"Lottie","type":[[["\"json\""]]]},{"name":"4","description":"GIF","type":[[["\"gif\""]]]}],"meta":{"line":205,"file":"Constants.js","path":"packages/discord.js/src/util"}},{"name":"GuildTemplateResolvable","description":"Data that can be resolved to give a template code. This can be:\n- A template code\n- A template URL","type":[[["string"]]],"meta":{"line":18,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n- A Buffer\n- The path to a local file\n- A URL <warn>When provided a URL, discord.js will fetch the URL internally in order to create a Buffer.\n  This can pose a security risk when the URL has not been sanitized</warn>","type":[[["string"]],[["Buffer"]]],"meta":{"line":61,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"ResolvedFile","access":"private","type":[[["Object"]]],"props":[{"name":"data","description":"Buffer containing the file data","type":[[["Buffer"]]]},{"name":"contentType","description":"Content-Type of the file","optional":true,"type":[[["string"]]]}],"meta":{"line":76,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n- A Buffer\n- A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":115,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"Events","type":[[["Object"]]],"props":[{"name":"ApplicationCommandPermissionsUpdate","description":"applicationCommandPermissionsUpdate","type":[[["string"]]]},{"name":"AutoModerationActionExecution","description":"autoModerationActionExecution","type":[[["string"]]]},{"name":"AutoModerationRuleCreate","description":"autoModerationRuleCreate","type":[[["string"]]]},{"name":"AutoModerationRuleDelete","description":"autoModerationRuleDelete","type":[[["string"]]]},{"name":"AutoModerationRuleUpdate","description":"autoModerationRuleUpdate","type":[[["string"]]]},{"name":"CacheSweep","description":"cacheSweep","type":[[["string"]]]},{"name":"ChannelCreate","description":"channelCreate","type":[[["string"]]]},{"name":"ChannelDelete","description":"channelDelete","type":[[["string"]]]},{"name":"ChannelPinsUpdate","description":"channelPinsUpdate","type":[[["string"]]]},{"name":"ChannelUpdate","description":"channelUpdate","type":[[["string"]]]},{"name":"ClientReady","description":"clientReady","type":[[["string"]]]},{"name":"Debug","description":"debug","type":[[["string"]]]},{"name":"EntitlementCreate","description":"entitlementCreate","type":[[["string"]]]},{"name":"EntitlementUpdate","description":"entitlementUpdate","type":[[["string"]]]},{"name":"EntitlementDelete","description":"entitlementDelete","type":[[["string"]]]},{"name":"Error","description":"error","type":[[["string"]]]},{"name":"GuildAuditLogEntryCreate","description":"guildAuditLogEntryCreate","type":[[["string"]]]},{"name":"GuildAvailable","description":"guildAvailable","type":[[["string"]]]},{"name":"GuildBanAdd","description":"guildBanAdd","type":[[["string"]]]},{"name":"GuildBanRemove","description":"guildBanRemove","type":[[["string"]]]},{"name":"GuildCreate","description":"guildCreate","type":[[["string"]]]},{"name":"GuildDelete","description":"guildDelete","type":[[["string"]]]},{"name":"GuildEmojiCreate","description":"emojiCreate","type":[[["string"]]]},{"name":"GuildEmojiDelete","description":"emojiDelete","type":[[["string"]]]},{"name":"GuildEmojiUpdate","description":"emojiUpdate","type":[[["string"]]]},{"name":"GuildIntegrationsUpdate","description":"guildIntegrationsUpdate","type":[[["string"]]]},{"name":"GuildMemberAdd","description":"guildMemberAdd","type":[[["string"]]]},{"name":"GuildMemberAvailable","description":"guildMemberAvailable","type":[[["string"]]]},{"name":"GuildMemberRemove","description":"guildMemberRemove","type":[[["string"]]]},{"name":"GuildMembersChunk","description":"guildMembersChunk","type":[[["string"]]]},{"name":"GuildMemberUpdate","description":"guildMemberUpdate","type":[[["string"]]]},{"name":"GuildRoleCreate","description":"roleCreate","type":[[["string"]]]},{"name":"GuildRoleDelete","description":"roleDelete","type":[[["string"]]]},{"name":"GuildRoleUpdate","description":"roleUpdate","type":[[["string"]]]},{"name":"GuildScheduledEventCreate","description":"guildScheduledEventCreate","type":[[["string"]]]},{"name":"GuildScheduledEventDelete","description":"guildScheduledEventDelete","type":[[["string"]]]},{"name":"GuildScheduledEventUpdate","description":"guildScheduledEventUpdate","type":[[["string"]]]},{"name":"GuildScheduledEventUserAdd","description":"guildScheduledEventUserAdd","type":[[["string"]]]},{"name":"GuildScheduledEventUserRemove","description":"guildScheduledEventUserRemove","type":[[["string"]]]},{"name":"GuildSoundboardSoundCreate","description":"guildSoundboardSoundCreate","type":[[["string"]]]},{"name":"GuildSoundboardSoundDelete","description":"guildSoundboardSoundDelete","type":[[["string"]]]},{"name":"GuildSoundboardSoundsUpdate","description":"guildSoundboardSoundsUpdate","type":[[["string"]]]},{"name":"GuildSoundboardSoundUpdate","description":"guildSoundboardSoundUpdate","type":[[["string"]]]},{"name":"GuildStickerCreate","description":"stickerCreate","type":[[["string"]]]},{"name":"GuildStickerDelete","description":"stickerDelete","type":[[["string"]]]},{"name":"GuildStickerUpdate","description":"stickerUpdate","type":[[["string"]]]},{"name":"GuildUnavailable","description":"guildUnavailable","type":[[["string"]]]},{"name":"GuildUpdate","description":"guildUpdate","type":[[["string"]]]},{"name":"InteractionCreate","description":"interactionCreate","type":[[["string"]]]},{"name":"Invalidated","description":"invalidated","type":[[["string"]]]},{"name":"InviteCreate","description":"inviteCreate","type":[[["string"]]]},{"name":"InviteDelete","description":"inviteDelete","type":[[["string"]]]},{"name":"MessageBulkDelete","description":"messageDeleteBulk","type":[[["string"]]]},{"name":"MessageCreate","description":"messageCreate","type":[[["string"]]]},{"name":"MessageDelete","description":"messageDelete","type":[[["string"]]]},{"name":"MessagePollVoteAdd","description":"messagePollVoteAdd","type":[[["string"]]]},{"name":"MessagePollVoteRemove","description":"messagePollVoteRemove","type":[[["string"]]]},{"name":"MessageReactionAdd","description":"messageReactionAdd","type":[[["string"]]]},{"name":"MessageReactionRemove","description":"messageReactionRemove","type":[[["string"]]]},{"name":"MessageReactionRemoveAll","description":"messageReactionRemoveAll","type":[[["string"]]]},{"name":"MessageReactionRemoveEmoji","description":"messageReactionRemoveEmoji","type":[[["string"]]]},{"name":"MessageUpdate","description":"messageUpdate","type":[[["string"]]]},{"name":"PresenceUpdate","description":"presenceUpdate","type":[[["string"]]]},{"name":"SoundboardSounds","description":"soundboardSounds","type":[[["string"]]]},{"name":"StageInstanceCreate","description":"stageInstanceCreate","type":[[["string"]]]},{"name":"StageInstanceDelete","description":"stageInstanceDelete","type":[[["string"]]]},{"name":"StageInstanceUpdate","description":"stageInstanceUpdate","type":[[["string"]]]},{"name":"SubscriptionCreate","description":"subscriptionCreate","type":[[["string"]]]},{"name":"SubscriptionUpdate","description":"subscriptionUpdate","type":[[["string"]]]},{"name":"SubscriptionDelete","description":"subscriptionDelete","type":[[["string"]]]},{"name":"ThreadCreate","description":"threadCreate","type":[[["string"]]]},{"name":"ThreadDelete","description":"threadDelete","type":[[["string"]]]},{"name":"ThreadListSync","description":"threadListSync","type":[[["string"]]]},{"name":"ThreadMembersUpdate","description":"threadMembersUpdate","type":[[["string"]]]},{"name":"ThreadMemberUpdate","description":"threadMemberUpdate","type":[[["string"]]]},{"name":"ThreadUpdate","description":"threadUpdate","type":[[["string"]]]},{"name":"TypingStart","description":"typingStart","type":[[["string"]]]},{"name":"UserUpdate","description":"userUpdate","type":[[["string"]]]},{"name":"VoiceChannelEffectSend","description":"voiceChannelEffectSend","type":[[["string"]]]},{"name":"VoiceServerUpdate","description":"voiceServerUpdate","type":[[["string"]]]},{"name":"VoiceStateUpdate","description":"voiceStateUpdate","type":[[["string"]]]},{"name":"Warn","description":"warn","type":[[["string"]]]},{"name":"WebhooksUpdate","description":"webhooksUpdate","type":[[["string"]]]}],"meta":{"line":3,"file":"Events.js","path":"packages/discord.js/src/util"}},{"name":"GuildMemberFlagsResolvable","description":"Data that can be resolved to give a guild member flag bitfield. This can be:\n- A string (see {@link GuildMemberFlagsBitField.Flags})\n- A guild member flag\n- An instance of GuildMemberFlagsBitField\n- An Array of GuildMemberFlagsResolvable","type":[[["string"]],[["number"]],[["GuildMemberFlagsBitField"]],[["Array","<"],["GuildMemberFlagsResolvable",">"]]],"meta":{"line":36,"file":"GuildMemberFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"IntentsResolvable","description":"Data that can be resolved to give a permission number. This can be:\n- A string (see {@link IntentsBitField.Flags})\n- An intents flag\n- An instance of {@link IntentsBitField}\n- An array of IntentsResolvable","type":[[["string"]],[["number"]],[["IntentsBitField"]],[["Array","<"],["IntentsResolvable",">"]]],"meta":{"line":28,"file":"IntentsBitField.js","path":"packages/discord.js/src/util"}},{"name":"LimitedCollectionOptions","description":"Options for defining the behavior of a LimitedCollection","type":[[["Object"]]],"props":[{"name":"maxSize","description":"The maximum size of the Collection","optional":true,"default":"Infinity","nullable":true,"type":[[["number"]]]},{"name":"keepOverLimit","description":"A function, which is passed the value and key of an entry, ran to decide\nto keep an entry past the maximum size","optional":true,"default":null,"nullable":true,"type":[[["function"]]]}],"meta":{"line":6,"file":"LimitedCollection.js","path":"packages/discord.js/src/util"}},{"name":"MessageFlagsResolvable","description":"Data that can be resolved to give a message flags bit field. This can be:\n- A string (see {@link MessageFlagsBitField.Flags})\n- A message flag\n- An instance of {@link MessageFlagsBitField}\n- An array of `MessageFlagsResolvable`","type":[[["string"]],[["number"]],[["MessageFlagsBitField"]],[["Array","<"],["MessageFlagsResolvable",">"]]],"meta":{"line":29,"file":"MessageFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"CacheFactory","type":[[["function"]]],"params":[{"name":"managerType","description":"The base manager class the cache is being requested from.","type":[[["function"]]]},{"name":"holds","description":"The class that the cache will hold.","type":[[["function"]]]},{"name":"manager","description":"The fully extended manager class the cache is being requested from.","type":[[["function"]]]}],"returns":[{"types":[[["Collection"]]],"description":"A Collection used to store the cache of the manager."}],"meta":{"line":9,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"closeTimeout","description":"The amount of time in milliseconds to wait for the close frame to be received\nfrom the WebSocket. Don't have this too high/low. It's best to have it between 2_000-6_000 ms.","optional":true,"default":"5_000","type":[[["number"]]]},{"name":"makeCache","description":"Function to create a cache.\nYou can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n<warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\nand `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>","optional":true,"type":[[["CacheFactory"]]]},{"name":"allowedMentions","description":"The default value for {@link BaseMessageOptions#allowedMentions}","optional":true,"type":[[["MessageMentionOptions"]]]},{"name":"partials","description":"Structures allowed to be partial. This means events can be emitted even when\nthey're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n{@link https://discordjs.guide/popular-topics/partials.html guide} for some\nimportant usage information, as partials require you to put checks in place when handling data.","optional":true,"type":[[["Array","<"],["Partials",">"]]]},{"name":"failIfNotExists","description":"The default value for {@link MessageReplyOptions#failIfNotExists}","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"presence","description":"Presence data to use upon login","optional":true,"type":[[["PresenceData"]]]},{"name":"intents","description":"Intents to enable for this connection","type":[[["IntentsResolvable"]]]},{"name":"waitGuildTimeout","description":"Time in milliseconds that clients with the\n{@link GatewayIntentBits.Guilds} gateway intent should wait for missing guilds to be received before being ready.","optional":true,"default":"15_000","type":[[["number"]]]},{"name":"sweepers","description":"Options for cache sweeping","optional":true,"default":"this.DefaultSweeperSettings","type":[[["SweeperOptions"]]]},{"name":"ws","description":"Options for the WebSocketManager","optional":true,"type":[[["WebSocketManagerOptions"]]]},{"name":"rest","description":"Options for the REST manager","optional":true,"type":[[["RESTOptions"]]]},{"name":"jsonTransformer","description":"A function used to transform outgoing json data","optional":true,"type":[[["function"]]]},{"name":"enforceNonce","description":"The default value for {@link MessageCreateOptions#enforceNonce}","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":17,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"SweeperOptions","description":"Options for {@link Sweepers} defining the behavior of cache sweeping","type":[[["Object","<"],["SweeperKey",", "],["SweepOptions",">"]]],"meta":{"line":44,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"SweepOptions","description":"Options for sweeping a single type of item from cache","type":[[["Object"]]],"props":[{"name":"interval","description":"The interval (in seconds) at which to perform sweeping of the item","type":[[["number"]]]},{"name":"lifetime","description":"How long an item should stay in cache until it is considered sweepable.\n<warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\nis mutually exclusive to this property and takes priority</warn>","optional":true,"type":[[["number"]]]},{"name":"filter","description":"The function used to determine the function passed to the sweep method\n<info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>","type":[[["GlobalSweepFilter"]]]}],"meta":{"line":50,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"Partials","description":"The enumeration for partials.\n```js\nimport { Client, Partials } from 'discord.js';\n\nconst client = new Client({\n  intents: [\n    // Intents...\n  ],\n  partials: [\n    Partials.User, // We want to receive uncached users!\n    Partials.Message // We want to receive uncached messages!\n  ]\n});\n```","type":[[["Object"]]],"props":[{"name":"User","description":"The partial to receive uncached users.","type":[[["number"]]]},{"name":"Channel","description":"The partial to receive uncached channels.\n<info>This is required to receive direct messages!</info>","type":[[["number"]]]},{"name":"GuildMember","description":"The partial to receive uncached guild members.","type":[[["number"]]]},{"name":"Message","description":"The partial to receive uncached messages.","type":[[["number"]]]},{"name":"Reaction","description":"The partial to receive uncached reactions.","type":[[["number"]]]},{"name":"GuildScheduledEvent","description":"The partial to receive uncached guild scheduled events.","type":[[["number"]]]},{"name":"ThreadMember","description":"The partial to receive uncached thread members.","type":[[["number"]]]},{"name":"Poll","description":"The partial to receive uncached polls.","type":[[["number"]]]},{"name":"PollAnswer","description":"The partial to receive uncached poll answers.","type":[[["number"]]]},{"name":"SoundboardSound","description":"The partial to receive uncached soundboard sounds.","type":[[["number"]]]}],"meta":{"line":5,"file":"Partials.js","path":"packages/discord.js/src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n- A string (see {@link PermissionsBitField.Flags})\n- A permission number\n- An instance of {@link PermissionsBitField}\n- An Array of PermissionResolvable","type":[[["string"]],[["bigint"]],[["PermissionsBitField"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":64,"file":"PermissionsBitField.js","path":"packages/discord.js/src/util"}},{"name":"ShardEvents","type":[[["Object"]]],"props":[{"name":"Death","description":"death","type":[[["string"]]]},{"name":"Disconnect","description":"disconnect","type":[[["string"]]]},{"name":"Error","description":"error","type":[[["string"]]]},{"name":"Message","description":"message","type":[[["string"]]]},{"name":"Ready","description":"ready","type":[[["string"]]]},{"name":"Resume","description":"resume","type":[[["string"]]]},{"name":"Spawn","description":"spawn","type":[[["string"]]]}],"meta":{"line":3,"file":"ShardEvents.js","path":"packages/discord.js/src/util"}},{"name":"Status","type":[[["Object"]]],"props":[{"name":"Ready","description":"ready","type":[[["number"]]]},{"name":"Idle","description":"idle","type":[[["number"]]]},{"name":"WaitingForGuilds","description":"waiting for guilds","type":[[["number"]]]}],"meta":{"line":5,"file":"Status.js","path":"packages/discord.js/src/util"}},{"name":"GlobalSweepFilter","type":[[["function"]]],"returns":[{"types":[[["function"]]],"description":"Return `null` to skip sweeping, otherwise a function passed to `sweep()`,\nSee {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class#sweep Collection#sweep}\nfor the definition of this function.","nullable":true}],"meta":{"line":8,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"LifetimeFilterOptions","description":"Options for generating a filter function based on lifetime","type":[[["Object"]]],"props":[{"name":"lifetime","description":"How long, in seconds, an entry should stay in the collection\nbefore it is considered sweepable.","optional":true,"default":14400,"type":[[["number"]]]},{"name":"getComparisonTimestamp","description":"A function that takes an entry, key,\nand the collection and returns a timestamp to compare against in order to determine the lifetime of the entry.","optional":true,"default":"e => e?.createdTimestamp","type":[[["function"]]]},{"name":"excludeFromSweep","description":"A function that takes an entry, key, and the collection\nand returns a boolean, `true` when the entry should not be checked for sweepability.","optional":true,"default":"() => false","type":[[["function"]]]}],"meta":{"line":350,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"SweepEventOptions","description":"Configuration options for emitting the cache sweep client event","access":"private","type":[[["Object"]]],"props":[{"name":"emit","description":"Whether to emit the client event in this method","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"outputName","description":"A name to output in the client event if it should differ from the key","optional":true,"type":[[["string"]]]}],"meta":{"line":441,"file":"Sweepers.js","path":"packages/discord.js/src/util"}},{"name":"SystemChannelFlagsResolvable","description":"Data that can be resolved to give a system channel flag bitfield. This can be:\n- A string (see {@link SystemChannelFlagsBitField.Flags})\n- A system channel flag\n- An instance of SystemChannelFlagsBitField\n- An Array of SystemChannelFlagsResolvable","type":[[["string"]],[["number"]],[["SystemChannelFlagsBitField"]],[["Array","<"],["SystemChannelFlagsResolvable",">"]]],"meta":{"line":38,"file":"SystemChannelFlagsBitField.js","path":"packages/discord.js/src/util"}},{"name":"FetchRecommendedShardCountOptions","type":[[["Object"]]],"props":[{"name":"guildsPerShard","description":"Number of guilds assigned per shard","optional":true,"default":1000,"type":[[["number"]]]},{"name":"multipleOf","description":"The multiple the shard count should round up to. (16 for large bot sharding)","optional":true,"default":1,"type":[[["number"]]]}],"meta":{"line":61,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"PartialEmoji","description":"A partial emoji object.","type":[[["Object"]]],"props":[{"name":"animated","description":"Whether the emoji is animated","type":[[["boolean"]]]},{"name":"id","description":"The id of the emoji","type":[[["Snowflake"]],[["undefined"]]]},{"name":"name","description":"The name of the emoji","type":[[["string"]]]}],"meta":{"line":89,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"PartialEmojiOnlyId","description":"A partial emoji object with only an id.","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the emoji","type":[[["Snowflake"]]]}],"meta":{"line":114,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"MakeErrorOptions","description":"Options used to make an error object.","access":"private","type":[[["Object"]]],"props":[{"name":"name","description":"Error type","type":[[["string"]]]},{"name":"message","description":"Message for the error","type":[[["string"]]]},{"name":"stack","description":"Stack for the error","type":[[["string"]]]}],"meta":{"line":159,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"ColorResolvable","description":"Can be a number, hex string, an RGB array like:\n```js\n[255, 0, 255] // purple\n```\nor one of the following strings:\n- `Default`\n- `White`\n- `Aqua`\n- `Green`\n- `Blue`\n- `Yellow`\n- `Purple`\n- `LuminousVividPink`\n- `Fuchsia`\n- `Gold`\n- `Orange`\n- `Red`\n- `Grey`\n- `Navy`\n- `DarkAqua`\n- `DarkGreen`\n- `DarkBlue`\n- `DarkPurple`\n- `DarkVividPink`\n- `DarkGold`\n- `DarkOrange`\n- `DarkRed`\n- `DarkGrey`\n- `DarkerGrey`\n- `LightGrey`\n- `DarkNavy`\n- `Blurple`\n- `Greyple`\n- `DarkButNotBlack`\n- `NotQuiteBlack`\n- `Random`","type":[[["string"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":276,"file":"Util.js","path":"packages/discord.js/src/util"}},{"name":"SupportingInteractionResolvedData","description":"Supportive data for interaction resolved data.","access":"private","type":[[["Object"]]],"props":[{"name":"client","description":"The client","type":[[["Client"]]]},{"name":"guild","description":"A guild","optional":true,"type":[[["Guild"]]]},{"name":"channel","description":"A channel","optional":true,"type":[[["GuildTextBasedChannel"]]]}],"meta":{"line":487,"file":"Util.js","path":"packages/discord.js/src/util"}}],"externals":[{"name":"REST","see":["{@link https://discord.js.org/docs/packages/rest/stable/REST:Class}"],"meta":{"line":128,"file":"BaseClient.js","path":"packages/discord.js/src/client"}},{"name":"Collection","see":["{@link https://discord.js.org/docs/packages/collection/stable/Collection:Class}"],"meta":{"line":841,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ImageURLOptions","see":["{@link https://discord.js.org/docs/packages/rest/stable/ImageURLOptions:Interface}"],"meta":{"line":846,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"EmojiURLOptions","see":["{@link https://discord.js.org/docs/packages/rest/stable/EmojiURLOptions:TypeAlias}"],"meta":{"line":851,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"BaseImageURLOptions","see":["{@link https://discord.js.org/docs/packages/rest/stable/BaseImageURLOptions:Interface}"],"meta":{"line":856,"file":"Client.js","path":"packages/discord.js/src/client"}},{"name":"ApplicationCommandOptionAllowedChannelTypes","see":["{@link https://discord.js.org/docs/packages/builders/stable/ApplicationCommandOptionAllowedChannelTypes:TypeAlias}"],"meta":{"line":655,"file":"ApplicationCommand.js","path":"packages/discord.js/src/structures"}},{"name":"RawFile","see":["{@link https://discord.js.org/docs/packages/rest/stable/RawFile:Interface}"],"meta":{"line":313,"file":"MessagePayload.js","path":"packages/discord.js/src/structures"}},{"name":"ActivityFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ActivityFlags}"],"meta":{"line":3,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ActivityType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ActivityType}"],"meta":{"line":8,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIActionRowComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIActionRowComponent}"],"meta":{"line":13,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIApplication","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIApplication}"],"meta":{"line":18,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIApplicationCommand","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIApplicationCommand}"],"meta":{"line":23,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIApplicationCommandOption","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIApplicationCommandOption}"],"meta":{"line":28,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationIntegrationType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationIntegrationType}"],"meta":{"line":33,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIAuthorizingIntegrationOwnersMap","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIAuthorizingIntegrationOwnersMap}"],"meta":{"line":38,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIAutoModerationAction","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIAutoModerationAction}"],"meta":{"line":43,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIButtonComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIButtonComponent}"],"meta":{"line":48,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIChannel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIChannel}"],"meta":{"line":53,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIChannelSelectComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIChannelSelectComponent}"],"meta":{"line":58,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIContainerComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIContainerComponent}"],"meta":{"line":63,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIEmbed","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbed}"],"meta":{"line":68,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIEmbedField","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbedField}"],"meta":{"line":73,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIEmbedProvider","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbedProvider}"],"meta":{"line":78,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIEmoji","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmoji}"],"meta":{"line":83,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIFileComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIFileComponent}"],"meta":{"line":88,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIGuild","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIGuild}"],"meta":{"line":93,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIGuildForumDefaultReactionEmoji","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIGuildForumDefaultReactionEmoji}"],"meta":{"line":98,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIGuildForumTag","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIGuildForumTag}"],"meta":{"line":103,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIGuildMember","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIGuildMember}"],"meta":{"line":108,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIGuildScheduledEventRecurrenceRule","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIGuildScheduledEventRecurrenceRule}"],"meta":{"line":113,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIIncidentsData","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIIncidentsData}"],"meta":{"line":118,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIInteraction","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIInteraction}"],"meta":{"line":123,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIInteractionDataResolved","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIInteractionDataResolved}"],"meta":{"line":128,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIInteractionDataResolvedChannel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIInteractionDataResolvedChannel}"],"meta":{"line":133,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIInteractionDataResolvedGuildMember","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIInteractionDataResolvedGuildMember}"],"meta":{"line":138,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIInteractionGuildMember","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIInteractionGuildMember}"],"meta":{"line":143,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMediaGalleryComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIMediaGalleryComponent}"],"meta":{"line":148,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMediaGalleryItem","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIMediaGalleryItem}"],"meta":{"line":153,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMentionableSelectComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIMentionableSelectComponent}"],"meta":{"line":158,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMessage","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIMessage}"],"meta":{"line":163,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIComponentInMessageActionRow","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIComponentInMessageActionRow}"],"meta":{"line":168,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMessageComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIMessageComponent}"],"meta":{"line":173,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMessageComponentEmoji","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIMessageComponentEmoji}"],"meta":{"line":178,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMessageInteractionMetadata","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIMessageInteractionMetadata}"],"meta":{"line":183,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIMessageTopLevelComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIMessageTopLevelComponent}"],"meta":{"line":188,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIModalInteractionResponse","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIModalInteractionResponse}"],"meta":{"line":193,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIModalInteractionResponseCallbackData","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIModalInteractionResponseCallbackData}"],"meta":{"line":198,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIModalComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIModalComponent}"],"meta":{"line":203,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIModalSubmission","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIModalSubmission}"],"meta":{"line":208,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIOverwrite","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIOverwrite}"],"meta":{"line":213,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIPartialEmoji","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIPartialEmoji}"],"meta":{"line":218,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIRole","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIRole}"],"meta":{"line":223,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIRoleSelectComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIRoleSelectComponent}"],"meta":{"line":228,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APISelectMenuOption","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APISelectMenuOption}"],"meta":{"line":233,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APISectionComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APISectionComponent}"],"meta":{"line":238,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APISticker","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APISticker}"],"meta":{"line":243,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIStringSelectComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIStringSelectComponent}"],"meta":{"line":248,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APITextInputComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APITextInputComponent}"],"meta":{"line":253,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIThumbnailComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIThumbnailComponent}"],"meta":{"line":258,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIUnfurledMediaItem","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIUnfurledMediaItem}"],"meta":{"line":263,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIUser","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/APIUser}"],"meta":{"line":268,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"APIUserSelectComponent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#APIUserSelectComponent}"],"meta":{"line":273,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationCommandType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationCommandType}"],"meta":{"line":278,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationCommandOptionType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationCommandOptionType}"],"meta":{"line":283,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationCommandPermissionType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationCommandPermissionType}"],"meta":{"line":288,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationFlags}"],"meta":{"line":293,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationRoleConnectionMetadataType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationRoleConnectionMetadataType}"],"meta":{"line":298,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationWebhookEventStatus","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationWebhookEventStatus}"],"meta":{"line":303,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ApplicationWebhookEventType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ApplicationWebhookEventType}"],"meta":{"line":308,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AttachmentFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AttachmentFlags}"],"meta":{"line":313,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AutoModerationActionType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AutoModerationActionType}"],"meta":{"line":318,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AutoModerationRuleEventType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AutoModerationRuleEventType}"],"meta":{"line":323,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AutoModerationRuleTriggerType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AutoModerationRuleTriggerType}"],"meta":{"line":328,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AutoModerationRuleKeywordPresetType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AutoModerationRuleKeywordPresetType}"],"meta":{"line":333,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"AuditLogEvent","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/AuditLogEvent}"],"meta":{"line":338,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ButtonStyle","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ButtonStyle}"],"meta":{"line":343,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ChannelFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ChannelFlags}"],"meta":{"line":348,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ChannelType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ChannelType}"],"meta":{"line":353,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ComponentType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ComponentType}"],"meta":{"line":358,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"EntitlementType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/EntitlementType}"],"meta":{"line":363,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"EntryPointCommandHandlerType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/EntryPointCommandHandlerType}"],"meta":{"line":368,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ForumLayoutType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ForumLayoutType}"],"meta":{"line":373,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayCloseCodes","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GatewayCloseCodes}"],"meta":{"line":378,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayDispatchEvents","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GatewayDispatchEvents}"],"meta":{"line":383,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayDispatchPayload","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#GatewayDispatchPayload}"],"meta":{"line":388,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayIntentBits","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GatewayIntentBits}"],"meta":{"line":392,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayOpcodes","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GatewayOpcodes}"],"meta":{"line":397,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GatewayPresenceUpdateData","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/interface/GatewayPresenceUpdateData}"],"meta":{"line":402,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildDefaultMessageNotifications","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildDefaultMessageNotifications}"],"meta":{"line":407,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildExplicitContentFilter","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildExplicitContentFilter}"],"meta":{"line":412,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildFeature","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildFeature}"],"meta":{"line":417,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildMFALevel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildMFALevel}"],"meta":{"line":422,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildMemberFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildMemberFlags}"],"meta":{"line":427,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildNSFWLevel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildNSFWLevel}"],"meta":{"line":432,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildOnboardingMode","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildOnboardingMode}"],"meta":{"line":437,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildOnboardingPromptType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildOnboardingPromptType}"],"meta":{"line":442,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildPremiumTier","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildPremiumTier}"],"meta":{"line":447,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventEntityType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventEntityType}"],"meta":{"line":452,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventPrivacyLevel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventPrivacyLevel}"],"meta":{"line":457,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventRecurrenceRuleFrequency","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventRecurrenceRuleFrequency}"],"meta":{"line":462,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventRecurrenceRuleMonth","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventRecurrenceRuleMonth}"],"meta":{"line":467,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventRecurrenceRuleWeekday","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventRecurrenceRuleWeekday}"],"meta":{"line":472,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildScheduledEventStatus","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildScheduledEventStatus}"],"meta":{"line":477,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildSystemChannelFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildSystemChannelFlags}"],"meta":{"line":482,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildVerificationLevel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildVerificationLevel}"],"meta":{"line":487,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"GuildWidgetStyle","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/GuildWidgetStyle}"],"meta":{"line":492,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"IntegrationExpireBehavior","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/IntegrationExpireBehavior}"],"meta":{"line":497,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"InteractionContextType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/InteractionContextType}"],"meta":{"line":502,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"InteractionType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/InteractionType}"],"meta":{"line":507,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"InteractionResponseType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/InteractionResponseType}"],"meta":{"line":512,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"InviteType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/InviteType}"],"meta":{"line":517,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"InviteTargetType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/InviteTargetType}"],"meta":{"line":522,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"Locale","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/Locale}"],"meta":{"line":527,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"MessageActivityType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/MessageActivityType}"],"meta":{"line":532,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"MessageReferenceType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/MessageReferenceType}"],"meta":{"line":537,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"MessageType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/MessageType}"],"meta":{"line":542,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"MessageFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/MessageFlags}"],"meta":{"line":547,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"OAuth2Scopes","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/OAuth2Scopes}"],"meta":{"line":552,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"OverwriteType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/OverwriteType}"],"meta":{"line":557,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"PermissionFlagsBits","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#PermissionFlagsBits}"],"meta":{"line":562,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"PollLayoutType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/PollLayoutType}"],"meta":{"line":567,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ReactionType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ReactionType}"],"meta":{"line":572,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"RoleFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/RoleFlags}"],"meta":{"line":577,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"RESTGetAPIGuildThreadsResult","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10#RESTGetAPIGuildThreadsResult}"],"meta":{"line":582,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"RESTJSONErrorCodes","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/RESTJSONErrorCodes}"],"meta":{"line":587,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"SKUFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/SKUFlags}"],"meta":{"line":592,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"SKUType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/SKUType}"],"meta":{"line":597,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"SortOrderType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/SortOrderType}"],"meta":{"line":602,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"StageInstancePrivacyLevel","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/StageInstancePrivacyLevel}"],"meta":{"line":607,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"StickerType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/StickerType}"],"meta":{"line":612,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"StickerFormatType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/StickerFormatType}"],"meta":{"line":617,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"TeamMemberMembershipState","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/TeamMemberMembershipState}"],"meta":{"line":622,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"TeamMemberRole","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/TeamMemberRole}"],"meta":{"line":627,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"TextInputStyle","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/TextInputStyle}"],"meta":{"line":632,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"ThreadAutoArchiveDuration","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/ThreadAutoArchiveDuration}"],"meta":{"line":637,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"UserFlags","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/UserFlags}"],"meta":{"line":642,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"VideoQualityMode","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/VideoQualityMode}"],"meta":{"line":647,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"VoiceChannelEffectSendAnimationType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/VoiceChannelEffectSendAnimationType}"],"meta":{"line":652,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"WebhookType","see":["{@link https://discord-api-types.dev/api/discord-api-types-v10/enum/WebhookType}"],"meta":{"line":657,"file":"APITypes.js","path":"packages/discord.js/src/util"}},{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":71,"file":"DataResolver.js","path":"packages/discord.js/src/util"}},{"name":"RESTOptions","see":["{@link https://discord.js.org/docs/packages/rest/stable/RESTOptions:Interface}"],"meta":{"line":195,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"WebSocketManager","see":["{@link https://discord.js.org/docs/packages/ws/stable/WebSocketManager:Class}"],"meta":{"line":200,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"IShardingStrategy","see":["{@link https://discord.js.org/docs/packages/ws/stable/IShardingStrategy:Interface}"],"meta":{"line":205,"file":"Options.js","path":"packages/discord.js/src/util"}},{"name":"IIdentifyThrottler","see":["{@link https://discord.js.org/docs/packages/ws/stable/IIdentifyThrottler:Interface}"],"meta":{"line":210,"file":"Options.js","path":"packages/discord.js/src/util"}}],"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n\t<br />\n\t<p>\n\t\t<a href=\"https://discord.js.org\"><img src=\"https://discord.js.org/static/logo.svg\" width=\"546\" alt=\"discord.js\" /></a>\n\t</p>\n\t<br />\n\t<p>\n\t\t<a href=\"https://discord.gg/djs\"><img src=\"https://img.shields.io/discord/222078108977594368?color=5865F2&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n\t\t<a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"npm version\" /></a>\n\t\t<a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"npm downloads\" /></a>\n\t\t<a href=\"https://github.com/discordjs/discord.js/actions\"><img src=\"https://github.com/discordjs/discord.js/actions/workflows/test.yml/badge.svg\" alt=\"Tests status\" /></a>\n\t\t<a href=\"https://github.com/discordjs/discord.js/commits/main/packages/discord.js\"><img alt=\"Last commit.\" src=\"https://img.shields.io/github/last-commit/discordjs/discord.js?logo=github&logoColor=ffffff&path=packages%2Fdiscord.js\" /></a>\n\t\t<a href=\"https://codecov.io/gh/discordjs/discord.js\"><img src=\"https://codecov.io/gh/discordjs/discord.js/branch/main/graph/badge.svg?precision=2\" alt=\"Code coverage\" /></a>\n\t</p>\n\t<p>\n\t\t<a href=\"https://vercel.com/?utm_source=discordjs&utm_campaign=oss\"><img src=\"https://raw.githubusercontent.com/discordjs/discord.js/main/.github/powered-by-vercel.svg\" alt=\"Vercel\" /></a>\n\t\t<a href=\"https://www.cloudflare.com\"><img src=\"https://raw.githubusercontent.com/discordjs/discord.js/main/.github/powered-by-workers.png\" alt=\"Cloudflare Workers\" height=\"44\" /></a>\n\t</p>\n</div>\n\n## About\n\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Discord API](https://discord.com/developers/docs/intro).\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n\n**Node.js 22.12.0 or newer is required.**\n\n```sh\nnpm install discord.js\nyarn add discord.js\npnpm add discord.js\nbun add discord.js\n```\n\n### Optional packages\n\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for WebSocket data compression and inflation (`npm install zlib-sync`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection (`npm install bufferutil`)\n- [@discordjs/voice](https://www.npmjs.com/package/@discordjs/voice) for interacting with the Discord Voice API (`npm install @discordjs/voice`)\n\n## Example usage\n\nInstall discord.js:\n\n```sh\nnpm install discord.js\nyarn add discord.js\npnpm add discord.js\nbun add discord.js\n```\n\nThese examples use [ES modules](https://nodejs.org/api/esm.html#enabling).\n\nRegister a slash command against the Discord API:\n\n```js\nimport { REST, Routes } from 'discord.js';\n\nconst commands = [\n  {\n    name: 'ping',\n    description: 'Replies with Pong!',\n  },\n];\n\nconst rest = new REST({ version: '10' }).setToken(TOKEN);\n\ntry {\n  console.log('Started refreshing application (/) commands.');\n\n  await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });\n\n  console.log('Successfully reloaded application (/) commands.');\n} catch (error) {\n  console.error(error);\n}\n```\n\nAfterwards we can create a quite simple example bot:\n\n```js\nimport { Client, Events, GatewayIntentBits } from 'discord.js';\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.on(Events.ClientReady, readyClient => {\n  console.log(`Logged in as ${readyClient.user.tag}!`);\n});\n\nclient.on(Events.InteractionCreate, async interaction => {\n  if (!interaction.isChatInputCommand()) return;\n\n  if (interaction.commandName === 'ping') {\n    await interaction.reply('Pong!');\n  }\n});\n\nclient.login(TOKEN);\n```\n\n## Links\n\n- [Website][website] ([source][website-source])\n- [Documentation][documentation]\n- [Guide][guide] ([source][guide-source])\n  Also see the v13 to v14 [Update Guide][guide-update], which includes updated and removed items from the library.\n- [discord.js Discord server][discord]\n- [Discord API Discord server][discord-api]\n- [GitHub][source]\n- [npm][npm]\n- [Related libraries][related-libs]\n\n### Extensions\n\n- [RPC][rpc] ([source][rpc-source])\n\n## Contributing\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation][documentation].  \nSee [the contribution guide][contributing] if you'd like to submit a PR.\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don't hesitate to join our official [discord.js Server][discord].\n\n[website]: https://discord.js.org\n[website-source]: https://github.com/discordjs/discord.js/tree/main/apps/website\n[documentation]: https://discord.js.org/docs/packages/discord.js/stable\n[guide]: https://discordjs.guide/\n[guide-source]: https://github.com/discordjs/guide\n[guide-update]: https://discordjs.guide/additional-info/changes-in-v14.html\n[discord]: https://discord.gg/djs\n[discord-api]: https://discord.gg/discord-api\n[source]: https://github.com/discordjs/discord.js/tree/main/packages/discord.js\n[npm]: https://www.npmjs.com/package/discord.js\n[related-libs]: https://discord.com/developers/docs/topics/community-resources#libraries\n[rpc]: https://www.npmjs.com/package/discord-rpc\n[rpc-source]: https://github.com/discordjs/RPC\n[contributing]: https://github.com/discordjs/discord.js/blob/main/.github/CONTRIBUTING.md\n","path":"packages/discord.js/README.md"}}}}}