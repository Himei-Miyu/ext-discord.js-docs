{"meta":{"generator":"0.12.0","format":30,"date":1660149204416},"classes":[{"name":"CDN","description":"The CDN link builder","construct":{"name":"new CDN","params":[{"name":"base","optional":true,"default":"DefaultRestOptions.cdn","type":[[["string"]]]}]},"methods":[{"name":"appAsset","description":"Generates an app asset URL for a client's asset.","params":[{"name":"clientId","description":"The client id that has the asset","optional":false,"type":[[["string"]]]},{"name":"assetHash","description":"The hash provided by Discord for this asset","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the asset","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":70,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L70"}},{"name":"appIcon","description":"Generates an app icon URL for a client's icon.","params":[{"name":"clientId","description":"The client id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":81,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L81"}},{"name":"avatar","description":"Generates an avatar URL, e.g. for a user or a webhook.","params":[{"name":"id","description":"The id that has the icon","optional":false,"type":[[["string"]]]},{"name":"avatarHash","description":"The hash provided by Discord for this avatar","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the avatar","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":92,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L92"}},{"name":"banner","description":"Generates a banner URL, e.g. for a user or a guild.","params":[{"name":"id","description":"The id that has the banner splash","optional":false,"type":[[["string"]]]},{"name":"bannerHash","description":"The hash provided by Discord for this banner","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the banner","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":103,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L103"}},{"name":"channelIcon","description":"Generates an icon URL for a channel, e.g. a group DM.","params":[{"name":"channelId","description":"The channel id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this channel","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":114,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L114"}},{"name":"defaultAvatar","description":"Generates the default avatar URL for a discriminator.","params":[{"name":"discriminator","description":"The discriminator modulo 5","optional":false,"type":[[["number"]]]}],"returns":[[[["string"]]]],"meta":{"line":123,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L123"}},{"name":"discoverySplash","description":"Generates a discovery splash URL for a guild's discovery splash.","params":[{"name":"guildId","description":"The guild id that has the discovery splash","optional":false,"type":[[["string"]]]},{"name":"splashHash","description":"The hash provided by Discord for this splash","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the splash","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":134,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L134"}},{"name":"dynamicMakeURL","description":"Constructs the URL for the resource, checking whether or not `hash` starts with `a_` if `dynamic` is set to `true`.","access":"private","params":[{"name":"route","description":"The base cdn route","optional":false,"type":[[["string"]]]},{"name":"hash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the link","optional":true,"default":"{}","type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":270,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L270"}},{"name":"emoji","description":"Generates an emoji's URL for an emoji.","params":[{"name":"emojiId","description":"The emoji id","optional":false,"type":[[["string"]]]},{"name":"extension","description":"The extension of the emoji","optional":true,"type":[[["'jpg'"," | "],["'png'"," | "],["'gif'"," | "],["'webp'"," | "],["'jpeg'"]]]}],"returns":[[[["string"]]]],"meta":{"line":144,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L144"}},{"name":"guildMemberAvatar","description":"Generates a guild member avatar URL.","params":[{"name":"guildId","description":"The id of the guild","optional":false,"type":[[["string"]]]},{"name":"userId","description":"The id of the user","optional":false,"type":[[["string"]]]},{"name":"avatarHash","description":"The hash provided by Discord for this avatar","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the avatar","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":156,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L156"}},{"name":"guildMemberBanner","description":"Generates a guild member banner URL.","params":[{"name":"guildId","description":"The id of the guild","optional":false,"type":[[["string"]]]},{"name":"userId","description":"The id of the user","optional":false,"type":[[["string"]]]},{"name":"bannerHash","description":"The hash provided by Discord for this banner","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the banner","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":173,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L173"}},{"name":"guildScheduledEventCover","description":"Generates a cover image for a guild scheduled event.","params":[{"name":"scheduledEventId","description":"The scheduled event id","optional":false,"type":[[["string"]]]},{"name":"coverHash","description":"The hash provided by discord for this cover image","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the cover image","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":255,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L255"}},{"name":"icon","description":"Generates an icon URL, e.g. for a guild.","params":[{"name":"id","description":"The id that has the icon splash","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":189,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L189"}},{"name":"makeURL","description":"Constructs the URL for the resource","access":"private","params":[{"name":"route","description":"The base cdn route","optional":false,"type":[[["string"]]]},{"name":"options","description":"The extension/size options for the link","optional":true,"default":"{}","type":[[["Readonly","<"],["MakeURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":284,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L284"}},{"name":"roleIcon","description":"Generates a URL for the icon of a role","params":[{"name":"roleId","description":"The id of the role that has the icon","optional":false,"type":[[["string"]]]},{"name":"roleIconHash","description":"The hash provided by Discord for this role icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the role icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":199,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L199"}},{"name":"splash","description":"Generates a guild invite splash URL for a guild's invite splash.","params":[{"name":"guildId","description":"The guild id that has the invite splash","optional":false,"type":[[["string"]]]},{"name":"splashHash","description":"The hash provided by Discord for this splash","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the splash","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":210,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L210"}},{"name":"sticker","description":"Generates a sticker URL.","params":[{"name":"stickerId","description":"The sticker id","optional":false,"type":[[["string"]]]},{"name":"extension","description":"The extension of the sticker","optional":true,"type":[[["'json'"," | "],["'png'"]]]}],"returns":[[[["string"]]]],"meta":{"line":220,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L220"}},{"name":"stickerPackBanner","description":"Generates a sticker pack banner URL.","params":[{"name":"bannerId","description":"The banner id","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the banner","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":233,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L233"}},{"name":"teamIcon","description":"Generates a team icon URL for a team's icon.","params":[{"name":"teamId","description":"The team id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[[["string"]]]],"meta":{"line":244,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L244"}}],"meta":{"line":60,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L60"}},{"name":"DiscordAPIError","description":"Represents an API error returned by Discord","extends":[[["Error"]]],"construct":{"name":"new DiscordAPIError","params":[{"name":"rawError","description":"The error reported by Discord","optional":false,"type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]},{"name":"code","description":"The error code reported by Discord","optional":false,"type":[[["string"," | "],["number"]]]},{"name":"status","description":"The status code of the response","optional":false,"type":[[["number"]]]},{"name":"method","description":"The method of the request that erred","optional":false,"type":[[["string"]]]},{"name":"url","description":"The url of the request that erred","optional":false,"type":[[["string"]]]},{"name":"bodyData","description":"The unparsed data for the request that errored","optional":false,"type":[[["Pick","<"],["InternalRequest",", "],["'body'"," | "],["'files'",">"]]]}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts"}},{"name":"code","type":[[["string"," | "],["number"]]],"meta":{"line":55,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L55"}},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts"}},{"name":"method","type":[[["string"]]],"meta":{"line":57,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L57"}},{"name":"rawError","type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]],"meta":{"line":54,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L54"}},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":43,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L43"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts"}},{"name":"status","type":[[["number"]]],"meta":{"line":56,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L56"}},{"name":"url","type":[[["string"]]],"meta":{"line":58,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L58"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[[["void"]]]],"meta":{"line":4,"file":"globals.d.ts"}},{"name":"flattenDiscordError","scope":"static","access":"private","params":[{"name":"obj","optional":false,"type":[[["DiscordError"]]]},{"name":"key","optional":true,"default":"''","type":[[["string"]]]}],"returns":[[[["IterableIterator","<"],["string",">"]]]],"meta":{"line":86,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L86"}},{"name":"getMessage","scope":"static","access":"private","params":[{"name":"error","optional":false,"type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]}],"returns":[[[["string"]]]],"meta":{"line":73,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L73"}}],"meta":{"line":42,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L42"}},{"name":"HTTPError","description":"Represents a HTTP error","extends":[[["Error"]]],"construct":{"name":"new HTTPError","params":[{"name":"name","description":"The name of the error","optional":false,"type":[[["string"]]]},{"name":"status","description":"The status code of the response","optional":false,"type":[[["number"]]]},{"name":"method","description":"The method of the request that erred","optional":false,"type":[[["string"]]]},{"name":"url","description":"The url of the request that erred","optional":false,"type":[[["string"]]]},{"name":"bodyData","description":"The unparsed data for the request that errored","optional":false,"type":[[["Pick","<"],["InternalRequest",", "],["'body'"," | "],["'files'",">"]]]}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts"}},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts"}},{"name":"method","type":[[["string"]]],"meta":{"line":20,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L20"}},{"name":"name","type":[[["string"]]],"meta":{"line":18,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L18"}},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":8,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L8"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts"}},{"name":"status","type":[[["number"]]],"meta":{"line":19,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L19"}},{"name":"url","type":[[["string"]]],"meta":{"line":21,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L21"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[[["void"]]]],"meta":{"line":4,"file":"globals.d.ts"}}],"meta":{"line":7,"file":"HTTPError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/HTTPError.ts#L7"}},{"name":"REST","extends":[[["EventEmitter"]]],"construct":{"name":"new REST","params":[{"name":"options","optional":true,"default":"{}","type":[[["Partial","<"],["RESTOptions",">"]]]}]},"props":[{"name":"cdn","readonly":true,"type":[[["CDN"]]],"meta":{"line":238,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L238"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":225,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L225"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":228,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L228"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":219,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L219"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":222,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L222"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["REST"]]],"meta":{"line":231,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L231"}},{"name":"requestManager","readonly":true,"type":[[["RequestManager"]]],"meta":{"line":239,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L239"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":291,"file":"events.d.ts"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":296,"file":"events.d.ts"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":297,"file":"events.d.ts"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":290,"file":"events.d.ts"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["REST"]]]],"meta":{"line":317,"file":"events.d.ts"}},{"name":"delete","description":"Runs a delete request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":301,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L301"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.\n\n```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```","returns":[[[["Array","<"],["string"," | "],["symbol",">"]]]],"meta":{"line":632,"file":"events.d.ts"}},{"name":"get","description":"Runs a get request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":291,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L291"}},{"name":"getAgent","description":"Gets the agent set for this instance","returns":[[[["null"," | "],["Dispatcher"]]]],"meta":{"line":261,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L261"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to defaultMaxListeners.","returns":[[[["number"]]]],"meta":{"line":489,"file":"events.d.ts"}},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["number"]]]],"meta":{"line":579,"file":"events.d.ts"}},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":502,"file":"events.d.ts"}},{"name":"patch","description":"Runs a patch request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":331,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L331"}},{"name":"post","description":"Runs a post request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":311,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L311"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.\n\n```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["REST"]]]],"meta":{"line":597,"file":"events.d.ts"}},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.\n\n```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["REST"]]]],"meta":{"line":613,"file":"events.d.ts"}},{"name":"put","description":"Runs a put request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":321,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L321"}},{"name":"raw","description":"Runs a request from the API, yielding the raw Response object","params":[{"name":"options","description":"Request options","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[[["Promise","<"],["ResponseData",">"]]]],"meta":{"line":350,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L350"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).\n\n```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":532,"file":"events.d.ts"}},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.\n\n```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and_before_ the last listener finishes execution will\nnot remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')`listener is removed:\n\n```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["REST"]]]],"meta":{"line":457,"file":"events.d.ts"}},{"name":"request","description":"Runs a request from the api","params":[{"name":"options","description":"Request options","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":340,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L340"}},{"name":"setAgent","description":"Sets the default agent to use for requests performed by this instance","params":[{"name":"agent","description":"Sets the agent to use","optional":false,"type":[[["Dispatcher"]]]}],"returns":[[[["REST"]]]],"meta":{"line":270,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L270"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[[["REST"]]]],"meta":{"line":483,"file":"events.d.ts"}},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"name":"token","description":"The authorization token to use","optional":false,"type":[[["string"]]]}],"returns":[[[["REST"]]]],"meta":{"line":280,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L280"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"," | "],["DOMEventTarget"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":262,"file":"events.d.ts"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.\n\n```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```","scope":"static","deprecated":"Since v3.2.0 - Use `listenerCount` instead.","params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["number"]]]],"meta":{"line":234,"file":"events.d.ts"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[{"types":[[["AsyncIterableIterator","<"],["any",">"]]],"description":"that iterates `eventName` events emitted by the `emitter`"}],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```\n\nThe special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[[["Promise","<"],["Array","<"],["any",">>"]]]],"meta":{"line":157,"file":"events.d.ts"}},{"name":"setMaxListeners","description":"```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```","scope":"static","params":[{"name":"n","description":"A non-negative number. The maximum number of listeners per `EventTarget` event.","optional":true,"type":[[["number"]]]},{"name":"eventTargets","optional":false,"variable":true,"type":[[["Array","<"],["EventEmitter"," | "],["DOMEventTarget",">"]]]}],"returns":[[[["void"]]]],"meta":{"line":280,"file":"events.d.ts"}}],"meta":{"line":218,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L218"}},{"name":"RateLimitError","description":"Data emitted on `RESTEvents.RateLimited`","extends":[[["Error"]]],"implements":[[["RateLimitData"]]],"construct":{"name":"new RateLimitError","params":[{"name":"__namedParameters","optional":false,"type":[[["RateLimitData"]]]}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts"}},{"name":"global","description":"Whether the rate limit that was reached was the global limit","type":[[["boolean"]]],"meta":{"line":11,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L11"}},{"name":"hash","description":"The bucket hash for this request","type":[[["string"]]],"meta":{"line":7,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L7"}},{"name":"limit","description":"The amount of requests we can perform before locking requests","type":[[["number"]]],"meta":{"line":5,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L5"}},{"name":"majorParameter","description":"The major parameter of the route\n\nFor example, in `/channels/x`, this will be `x`.\nIf there is no major parameter (e.g: `/bot/gateway`) this will be `global`.","type":[[["string"]]],"meta":{"line":10,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L10"}},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts"}},{"name":"method","description":"The HTTP method being performed","type":[[["string"]]],"meta":{"line":6,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L6"}},{"name":"route","description":"The route being hit in this request","type":[[["string"]]],"meta":{"line":9,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L9"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts"}},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","type":[[["number"]]],"meta":{"line":4,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L4"}},{"name":"url","description":"The full URL for this request","type":[[["string"]]],"meta":{"line":8,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L8"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[[["void"]]]],"meta":{"line":4,"file":"globals.d.ts"}}],"meta":{"line":3,"file":"RateLimitError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/RateLimitError.ts#L3"}},{"name":"RequestManager","description":"Represents the class that manages handlers for endpoints","extends":[[["EventEmitter"]]],"construct":{"name":"new RequestManager","params":[{"name":"options","optional":false,"type":[[["Partial","<"],["RESTOptions",">"]]]}]},"props":[{"name":"#token","access":"private","default":"null","type":[[["null"," | "],["string"]]],"meta":{"line":207,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L207"}},{"name":"agent","description":"The Agent for all requests\nperformed by this manager.","default":"null","type":[[["null"," | "],["Dispatcher"]]],"meta":{"line":180,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L180"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":162,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L162"}},{"name":"globalDelay","description":"The promise used to wait out the global rate limit","default":"null","type":[[["null"," | "],["Promise","<"],["void",">"]]],"meta":{"line":189,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L189"}},{"name":"globalRemaining","description":"The number of requests remaining in the global bucket","type":[[["number"]]],"meta":{"line":184,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L184"}},{"name":"globalReset","description":"The timestamp at which the global bucket resets","default":"-1","type":[[["number"]]],"meta":{"line":194,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L194"}},{"name":"handlerTimer","access":"private","type":[[["Timer"]]],"meta":{"line":210,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L210"}},{"name":"handlers","description":"Request handlers created from the bucket hash and the major parameters","readonly":true,"type":[[["Collection","<"],["string",", "],["IHandler",">"]]],"meta":{"line":204,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L204"}},{"name":"hashTimer","access":"private","type":[[["Timer"]]],"meta":{"line":209,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L209"}},{"name":"hashes","description":"API bucket hashes that are cached from provided routes","readonly":true,"type":[[["Collection","<"],["string",", "],["HashData",">"]]],"meta":{"line":199,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L199"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":165,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L165"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":156,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L156"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":159,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L159"}},{"name":"options","readonly":true,"type":[[["RESTOptions"]]],"meta":{"line":212,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L212"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["RequestManager"]]],"meta":{"line":168,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L168"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":291,"file":"events.d.ts"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":296,"file":"events.d.ts"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":297,"file":"events.d.ts"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":290,"file":"events.d.ts"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":317,"file":"events.d.ts"}},{"name":"clearHandlerSweeper","description":"Stops the request handler sweeping interval","returns":[[[["void"]]]],"meta":{"line":480,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L480"}},{"name":"clearHashSweeper","description":"Stops the hash sweeping interval","returns":[[[["void"]]]],"meta":{"line":473,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L473"}},{"name":"createHandler","description":"Creates a new rate limit handler from a hash, based on the hash and the major parameter","access":"private","params":[{"name":"hash","description":"The hash for the route","optional":false,"type":[[["string"]]]},{"name":"majorParameter","description":"The major parameter for this handler","optional":false,"type":[[["string"]]]}],"returns":[[[["SequentialHandler"]]]],"meta":{"line":347,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L347"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.\n\n```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```","returns":[[[["Array","<"],["string"," | "],["symbol",">"]]]],"meta":{"line":632,"file":"events.d.ts"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to defaultMaxListeners.","returns":[[[["number"]]]],"meta":{"line":489,"file":"events.d.ts"}},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["number"]]]],"meta":{"line":579,"file":"events.d.ts"}},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":502,"file":"events.d.ts"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.\n\n```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":597,"file":"events.d.ts"}},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.\n\n```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":613,"file":"events.d.ts"}},{"name":"queueRequest","description":"Queues a request to be sent","params":[{"name":"request","description":"All the information needed to make a request","optional":false,"type":[[["InternalRequest"]]]}],"returns":[{"types":[[["Promise","<"],["ResponseData",">"]]],"description":"The response from the api request"}],"returnsDescription":"The response from the api request","meta":{"line":314,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L314"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).\n\n```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":532,"file":"events.d.ts"}},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.\n\n```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and_before_ the last listener finishes execution will\nnot remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')`listener is removed:\n\n```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":457,"file":"events.d.ts"}},{"name":"resolveRequest","description":"Formats the request data to a usable format for fetch","access":"private","params":[{"name":"request","description":"The request data","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[[["Promise","<{"],["\nfetchOptions",": {"],["\ndispatcher",": "],["Dispatcher\n","} & "],["Omit","<"],["RequestOptions",", "],["'origin'"," | "],["'path'"," | "],["'method'","> & "],["Partial","<"],["Pick","<"],["RequestOptions",", "],["'method'",">>,"],["\nurl",": "],["string\n","}>"]]]],"meta":{"line":361,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L361"}},{"name":"setAgent","description":"Sets the default agent to use for requests performed by this manager","params":[{"name":"agent","description":"The agent to use","optional":false,"type":[[["Dispatcher"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":292,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L292"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":483,"file":"events.d.ts"}},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"name":"token","description":"The authorization token to use","optional":false,"type":[[["string"]]]}],"returns":[[[["RequestManager"]]]],"meta":{"line":302,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L302"}},{"name":"setupSweepers","access":"private","returns":[[[["void"]]]],"meta":{"line":225,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L225"}},{"name":"generateRouteData","description":"Generates route data for an endpoint:method","scope":"static","access":"private","params":[{"name":"endpoint","description":"The raw endpoint to generalize","optional":false,"type":[[["unknown"]]]},{"name":"method","description":"The HTTP method this endpoint is called without","optional":false,"type":[[["RequestMethod"]]]}],"returns":[[[["RouteData"]]]],"meta":{"line":492,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L492"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"," | "],["DOMEventTarget"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["Array","<"],["Function",">"]]]],"meta":{"line":262,"file":"events.d.ts"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.\n\n```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```","scope":"static","deprecated":"Since v3.2.0 - Use `listenerCount` instead.","params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[[["number"]]]],"meta":{"line":234,"file":"events.d.ts"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[{"types":[[["AsyncIterableIterator","<"],["any",">"]]],"description":"that iterates `eventName` events emitted by the `emitter`"}],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```\n\nThe special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```","scope":"static","params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[[["Promise","<"],["Array","<"],["any",">>"]]]],"meta":{"line":157,"file":"events.d.ts"}},{"name":"setMaxListeners","description":"```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```","scope":"static","params":[{"name":"n","description":"A non-negative number. The maximum number of listeners per `EventTarget` event.","optional":true,"type":[[["number"]]]},{"name":"eventTargets","optional":false,"variable":true,"type":[[["Array","<"],["EventEmitter"," | "],["DOMEventTarget",">"]]]}],"returns":[[[["void"]]]],"meta":{"line":280,"file":"events.d.ts"}}],"meta":{"line":155,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L155"}}],"functions":[{"name":"makeURLSearchParams","description":"Creates and populates an URLSearchParams instance from an object, stripping\nout null and undefined values, while also coercing non-strings to strings.","params":[{"name":"options","description":"The options to use","optional":true,"type":[[["Record","<"],["string",", "],["unknown",">"]]]}],"returns":[{"types":[[["URLSearchParams"]]],"description":"A populated URLSearchParams instance"}],"returnsDescription":"A populated URLSearchParams instance","meta":{"line":48,"file":"utils.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/utils.ts#L48"}},{"name":"parseResponse","description":"Converts the response to usable data","params":[{"name":"res","description":"The fetch response","optional":false,"type":[[["ResponseData"]]]}],"returns":[[[["Promise","<"],["unknown",">"]]]],"meta":{"line":65,"file":"utils.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/utils.ts#L65"}}],"interfaces":[],"typedefs":[{"name":"RESTEvents","description":"The events that the REST manager emits","meta":{"line":34,"file":"constants.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/constants.ts#L34"},"props":[{"name":"Debug","type":[[["restDebug"]]]},{"name":"HandlerSweep","type":[[["handlerSweep"]]]},{"name":"HashSweep","type":[[["hashSweep"]]]},{"name":"InvalidRequestWarning","type":[[["invalidRequestWarning"]]]},{"name":"RateLimited","type":[[["rateLimited"]]]},{"name":"Response","type":[[["response"]]]}]},{"name":"RequestMethod","description":"Possible API methods to be used when doing requests","meta":{"line":112,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L112"},"props":[{"name":"Delete","type":[[["DELETE"]]]},{"name":"Get","type":[[["GET"]]]},{"name":"Patch","type":[[["PATCH"]]]},{"name":"Post","type":[[["POST"]]]},{"name":"Put","type":[[["PUT"]]]}]},{"name":"APIRequest","meta":{"line":169,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L169"},"props":[{"name":"data","description":"The data that was used to form the body of this request","optional":false,"type":[[["HandlerRequestData"]]]},{"name":"method","description":"The HTTP method used in this request","optional":false,"type":[[["string"]]]},{"name":"options","description":"Additional HTTP options for this request","optional":false,"type":[[["{"],["\ndispatcher",": "],["Dispatcher\n","} & "],["Omit","<"],["RequestOptions",", "],["'origin'"," | "],["'path'"," | "],["'method'","> & "],["Partial","<"],["Pick","<"],["RequestOptions",", "],["'method'",">>"]]]},{"name":"path","description":"The full path used to make the request","optional":false,"type":[[["unknown"]]]},{"name":"retries","description":"The number of times this request has been attempted","optional":false,"type":[[["number"]]]},{"name":"route","description":"The API route identifying the ratelimit for this request","optional":false,"type":[[["string"]]]}]},{"name":"BaseImageURLOptions","description":"The options used for image URLs","meta":{"line":14,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L14"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["'jpg'"," | "],["'png'"," | "],["'gif'"," | "],["'webp'"," | "],["'jpeg'"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"DiscordErrorData","meta":{"line":14,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L14"},"props":[{"name":"code","optional":false,"type":[[["number"]]]},{"name":"errors","optional":true,"type":[[["DiscordError"]]]},{"name":"message","optional":false,"type":[[["string"]]]}]},{"name":"HashData","description":"Represents a hash and its associated fields","meta":{"line":150,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L150"},"props":[{"name":"lastAccess","optional":false,"type":[[["number"]]]},{"name":"value","optional":false,"type":[[["string"]]]}]},{"name":"ImageURLOptions","description":"The options used for image URLs with animated content","meta":{"line":30,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L30"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["'jpg'"," | "],["'png'"," | "],["'gif'"," | "],["'webp'"," | "],["'jpeg'"]]]},{"name":"forceStatic","description":"Whether or not to prefer the static version of an image asset.","optional":true,"type":[[["boolean"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"InternalRequest","description":"Internal request options","meta":{"line":127,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L127"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"default":"'Bot'","type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"dispatcher","description":"The Agent to use for the request.","optional":true,"type":[[["Agent"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"fullRoute","optional":false,"type":[[["unknown"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"method","optional":false,"type":[[["RequestMethod"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"default":"true","type":[[["boolean"]]]}]},{"name":"InvalidRequestWarningData","meta":{"line":196,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L196"},"props":[{"name":"count","description":"Number of invalid requests that have been made in the window","optional":false,"type":[[["number"]]]},{"name":"remainingTime","description":"Time in milliseconds remaining before the count resets","optional":false,"type":[[["number"]]]}]},{"name":"MakeURLOptions","description":"The options to use when making a CDN URL","meta":{"line":40,"file":"CDN.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/CDN.ts#L40"},"props":[{"name":"allowedExtensions","description":"The allowed extensions that can be used","optional":true,"type":[[["readonly"," "],["Array","<"],["string",">"]]]},{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"OAuthErrorData","meta":{"line":20,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L20"},"props":[{"name":"error","optional":false,"type":[[["string"]]]},{"name":"error_description","optional":true,"type":[[["string"]]]}]},{"name":"RESTOptions","description":"Options to be passed when creating the REST instance","meta":{"line":21,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L21"},"props":[{"name":"agent","description":"The agent to set globally","optional":false,"type":[[["Dispatcher"]]]},{"name":"api","description":"The base api path, without version","optional":false,"default":"'https://discord.com/api'","type":[[["string"]]]},{"name":"authPrefix","description":"The authorization prefix to use for requests, useful if you want to use\nbearer tokens","optional":false,"default":"'Bot'","type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"cdn","description":"The cdn path","optional":false,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"globalRequestsPerSecond","description":"How many requests to allow sending per second (Infinity for unlimited, 50 for the standard global limit used by Discord)","optional":false,"default":"50","type":[[["number"]]]},{"name":"handlerSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 1h)","optional":false,"default":"3_600_000","type":[[["number"]]]},{"name":"hashLifetime","description":"The maximum amount of time a hash can exist in milliseconds without being hit with a request (defaults to 24h)","optional":false,"default":"86_400_000","type":[[["number"]]]},{"name":"hashSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 4h)","optional":false,"default":"14_400_000","type":[[["number"]]]},{"name":"headers","description":"Additional headers to send for all API requests","optional":false,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"invalidRequestWarningInterval","description":"The number of invalid REST requests (those that return 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings).\nThat is, if set to 500, warnings will be emitted at invalid request number 500, 1000, 1500, and so on.","optional":false,"default":"0","type":[[["number"]]]},{"name":"offset","description":"The extra offset to add to rate limits in milliseconds","optional":false,"default":"50","type":[[["number"]]]},{"name":"rejectOnRateLimit","description":"Determines how rate limiting and pre-emptive throttling should be handled.\nWhen an array of strings, each element is treated as a prefix for the request route\n(e.g. `/channels` to match any route starting with `/channels` such as `/channels/:id/messages`)\nfor which to throw RateLimitErrors. All other request routes will be queued normally","optional":false,"default":"null","type":[[["null"," | "],["Array","<"],["string","> | "],["RateLimitQueueFilter"]]]},{"name":"retries","description":"The number of retries for errors with the 500 code, or errors\nthat timeout","optional":false,"default":"3","type":[[["number"]]]},{"name":"timeout","description":"The time to wait in milliseconds before a request is aborted","optional":false,"default":"15_000","type":[[["number"]]]},{"name":"userAgentAppendix","description":"Extra information to add to the user agent","optional":false,"default":"`Node.js ${process.version}`","type":[[["string"]]]},{"name":"version","description":"The version of the API to use","optional":false,"default":"'10'","type":[[["string"]]]}]},{"name":"RateLimitData","description":"Data emitted on `RESTEvents.RateLimited`","meta":{"line":126,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L126"},"props":[{"name":"global","description":"Whether the rate limit that was reached was the global limit","optional":false,"type":[[["boolean"]]]},{"name":"hash","description":"The bucket hash for this request","optional":false,"type":[[["string"]]]},{"name":"limit","description":"The amount of requests we can perform before locking requests","optional":false,"type":[[["number"]]]},{"name":"majorParameter","description":"The major parameter of the route\n\nFor example, in `/channels/x`, this will be `x`.\nIf there is no major parameter (e.g: `/bot/gateway`) this will be `global`.","optional":false,"type":[[["string"]]]},{"name":"method","description":"The HTTP method being performed","optional":false,"type":[[["string"]]]},{"name":"route","description":"The route being hit in this request","optional":false,"type":[[["string"]]]},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","optional":false,"type":[[["number"]]]},{"name":"url","description":"The full URL for this request","optional":false,"type":[[["string"]]]}]},{"name":"RawFile","description":"Represents a file to be added to the request","meta":{"line":21,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L21"},"props":[{"name":"contentType","description":"Content-Type of the file","optional":true,"type":[[["string"]]]},{"name":"data","description":"The actual data for the file","optional":false,"type":[[["string"," | "],["number"," | "],["boolean"," | "],["Buffer"]]]},{"name":"key","description":"An explicit key to use for key of the formdata field for this file.\nWhen not provided, the index of the file in the files array is used in the form `files[${index}]`.\nIf you wish to alter the placeholder snowflake, you must provide this property in the same form (`files[${placeholder}]`)","optional":true,"type":[[["string"]]]},{"name":"name","description":"The name of the file","optional":false,"type":[[["string"]]]}]},{"name":"RequestBody","meta":{"line":25,"file":"DiscordAPIError.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/errors/DiscordAPIError.ts#L25"},"props":[{"name":"files","optional":false,"type":[[["undefined"," | "],["Array","<"],["RawFile",">"]]]},{"name":"json","optional":false,"type":[[["unknown"]]]}]},{"name":"RequestData","description":"Represents possible data to be given to an endpoint","meta":{"line":45,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L45"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"default":"'Bot'","type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"dispatcher","description":"The Agent to use for the request.","optional":true,"type":[[["Agent"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"default":"true","type":[[["boolean"]]]}]},{"name":"RequestHeaders","description":"Possible headers for an API call","meta":{"line":103,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L103"},"props":[{"name":"Authorization","optional":true,"type":[[["string"]]]},{"name":"User-Agent","optional":false,"type":[[["string"]]]},{"name":"X-Audit-Log-Reason","optional":true,"type":[[["string"]]]}]},{"name":"RestEvents","meta":{"line":207,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L207"},"props":[{"name":"handlerSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"hashSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"invalidRequestWarning","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"newListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"rateLimited","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"removeListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"response","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"restDebug","optional":false,"type":[[["["],["unknown","]"]]]}]},{"name":"RouteData","description":"Parsed route data for an endpoint","meta":{"line":139,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L139"},"props":[{"name":"bucketRoute","optional":false,"type":[[["string"]]]},{"name":"majorParameter","optional":false,"type":[[["string"]]]},{"name":"original","optional":false,"type":[[["unknown"]]]}]},{"name":"HandlerRequestData","type":[[["Pick","<"],["InternalRequest",", "],["'files'"," | "],["'body'"," | "],["'auth'",">"]]],"meta":{"line":132,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L132"}},{"name":"ImageExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":47,"file":"constants.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/constants.ts#L47"}},{"name":"ImageSize","type":[[["("],["typeof"," "],["ALLOWED","_"],["SIZES",")["],["number","]"]]],"meta":{"line":49,"file":"constants.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/constants.ts#L49"}},{"name":"RateLimitQueueFilter","description":"A function that determines whether the rate limit hit should throw an Error","type":[[["("],["rateLimitData",": "],["RateLimitData",") => "],["boolean"," | "],["Promise","<"],["boolean",">"]]],"meta":{"line":167,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L167"},"params":[{"name":"rateLimitData","optional":false,"type":[[["RateLimitData"]]]}],"returns":[[[["boolean"," | "],["Promise","<"],["boolean",">"]]]]},{"name":"RequestOptions","type":[[["Exclude","<"],["Parameters","<("],["typeof"," "],["request",")>["],["1","], "],["undefined",">"]]],"meta":{"line":235,"file":"REST.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/REST.ts#L235"}},{"name":"RouteLike","type":[[["unknown"]]],"meta":{"line":120,"file":"RequestManager.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/RequestManager.ts#L120"}},{"name":"StickerExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["STICKER","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":48,"file":"constants.ts","url":"https://github.com/discordjs/discord.js/blob/0e2a095/packages/rest/src/lib/utils/constants.ts#L48"}}],"externals":[],"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n\t<br />\n\t<p>\n\t\t<a href=\"https://discord.js.org\"><img src=\"https://discord.js.org/static/logo.svg\" width=\"546\" alt=\"discord.js\" /></a>\n\t</p>\n\t<br />\n\t<p>\n\t\t<a href=\"https://discord.gg/djs\"><img src=\"https://img.shields.io/discord/222078108977594368?color=5865F2&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n\t\t<a href=\"https://www.npmjs.com/package/@discordjs/rest\"><img src=\"https://img.shields.io/npm/v/@discordjs/rest.svg?maxAge=3600\" alt=\"npm version\" /></a>\n\t\t<a href=\"https://www.npmjs.com/package/@discordjs/rest\"><img src=\"https://img.shields.io/npm/dt/@discordjs/rest.svg?maxAge=3600\" alt=\"npm downloads\" /></a>\n\t\t<a href=\"https://github.com/discordjs/discord.js/actions\"><img src=\"https://github.com/discordjs/discord.js/actions/workflows/test.yml/badge.svg\" alt=\"Tests status\" /></a>\n\t\t<a href=\"https://codecov.io/gh/discordjs/discord.js\" ><img src=\"https://codecov.io/gh/discordjs/discord.js/branch/main/graph/badge.svg?precision=2&flag=rest\" alt=\"Code coverage\" /></a>\n\t</p>\n\t<p>\n\t\t<a href=\"https://vercel.com/?utm_source=discordjs&utm_campaign=oss\"><img src=\"https://raw.githubusercontent.com/discordjs/discord.js/main/.github/powered-by-vercel.svg\" alt=\"Vercel\" /></a>\n\t</p>\n</div>\n\n## Installation\n\n**Node.js 16.9.0 or newer is required.**\n\n```sh-session\nnpm install @discordjs/rest\nyarn add @discordjs/rest\npnpm add @discordjs/rest\n```\n\n## Examples\n\nInstall all required dependencies:\n\n```sh-session\nnpm install @discordjs/rest discord-api-types\nyarn add @discordjs/rest discord-api-types\npnpm add @discordjs/rest discord-api-types\n```\n\nSend a basic message:\n\n```js\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\n\nconst rest = new REST({ version: '10' }).setToken('token');\n\ntry {\n\tawait rest.post(Routes.channelMessages(CHANNEL_ID), {\n\t\tbody: {\n\t\t\tcontent: 'A message via REST!',\n\t\t},\n\t});\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\nCreate a thread from an existing message to be archived after 60 minutes of inactivity:\n\n```js\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\n\nconst rest = new REST({ version: '10' }).setToken('token');\n\ntry {\n\tawait rest.post(Routes.threads(CHANNEL_ID, MESSAGE_ID), {\n\t\tbody: {\n\t\t\tname: 'Thread',\n\t\t\tauto_archive_duration: 60,\n\t\t},\n\t});\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n## Links\n\n- [Website](https://discord.js.org/) ([source](https://github.com/discordjs/discord.js/tree/main/packages/website))\n- [Documentation](https://discord.js.org/#/docs/rest)\n- [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide))\n  See also the [Update Guide](https://discordjs.guide/additional-info/changes-in-v14.html), including updated and removed items in the library.\n- [discord.js Discord server](https://discord.gg/djs)\n- [Discord API Discord server](https://discord.gg/discord-api)\n- [GitHub](https://github.com/discordjs/discord.js/tree/main/packages/rest)\n- [npm](https://www.npmjs.com/package/@discordjs/rest)\n- [Related libraries](https://discord.com/developers/docs/topics/community-resources#libraries)\n\n## Contributing\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs/rest).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/main/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don't hesitate to join our official [discord.js Server](https://discord.gg/djs).\n","path":"README.md"}}}}}