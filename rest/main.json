{"meta":{"generator":"0.12.0-dev","format":30,"date":1654702202711},"classes":[{"name":"CDN","description":"The CDN link builder","construct":{"name":"constructor","params":[{"data":{"id":21,"name":"base","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"DefaultRestOptions.cdn"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"methods":[{"name":"appAsset","description":"Generates an app asset URL for a client's asset.","params":[{"data":{"id":24,"name":"clientId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The client id that has the asset"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":25,"name":"assetHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this asset"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":26,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the asset\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":67,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"appIcon","description":"Generates an app icon URL for a client's icon.","params":[{"data":{"id":29,"name":"clientId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The client id that has the icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":30,"name":"iconHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":31,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the icon\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":77,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"avatar","description":"Generates an avatar URL, e.g. for a user or a webhook.","params":[{"data":{"id":34,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id that has the icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":35,"name":"avatarHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this avatar"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":36,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the avatar\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":87,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"banner","description":"Generates a banner URL, e.g. for a user or a guild.","params":[{"data":{"id":39,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id that has the banner splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":40,"name":"bannerHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this banner"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":41,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the banner\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":97,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"channelIcon","description":"Generates an icon URL for a channel, e.g. a group DM.","params":[{"data":{"id":44,"name":"channelId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The channel id that has the icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":45,"name":"iconHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this channel"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":46,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the icon\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":107,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"defaultAvatar","description":"Generates the default avatar URL for a discriminator.","params":[{"data":{"id":49,"name":"discriminator","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The discriminator modulo 5\n"},"type":{"type":"intrinsic","name":"number"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":115,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"discoverySplash","description":"Generates a discovery splash URL for a guild's discovery splash.","params":[{"data":{"id":52,"name":"guildId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The guild id that has the discovery splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":53,"name":"splashHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":54,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the splash\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":125,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"dynamicMakeURL","description":"Constructs the URL for the resource, checking whether or not `hash` starts with `a_` if `dynamic` is set to `true`.","access":"private","params":[{"data":{"id":106,"name":"route","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The base cdn route"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":107,"name":"hash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":108,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional options for the link\n"},"originalName":"__namedParameters","type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":251,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"emoji","description":"Generates an emoji's URL for an emoji.","params":[{"data":{"id":57,"name":"emojiId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The emoji id"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":58,"name":"extension","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The extension of the emoji\n"},"type":{"type":"union","types":[{"type":"literal","value":"webp"},{"type":"literal","value":"png"},{"type":"literal","value":"jpg"},{"type":"literal","value":"jpeg"},{"type":"literal","value":"gif"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":134,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"guildMemberAvatar","description":"Generates a guild member avatar URL.","params":[{"data":{"id":61,"name":"guildId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id of the guild"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":62,"name":"userId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id of the user"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":63,"name":"avatarHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this avatar"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":64,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the avatar\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":145,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"guildMemberBanner","description":"Generates a guild member banner URL.","params":[{"data":{"id":67,"name":"guildId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id of the guild"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":68,"name":"userId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id of the user"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":69,"name":"bannerHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this banner"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":70,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the banner\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":161,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"guildScheduledEventCover","description":"Generates a cover image for a guild scheduled event.","params":[{"data":{"id":101,"name":"scheduledEventId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The scheduled event id"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":102,"name":"coverHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by discord for this cover image"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":103,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the cover image\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":237,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"icon","description":"Generates an icon URL, e.g. for a guild.","params":[{"data":{"id":73,"name":"id","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id that has the icon splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":74,"name":"iconHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":75,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the icon\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":10,"name":"ImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":176,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"makeURL","description":"Constructs the URL for the resource","access":"private","params":[{"data":{"id":111,"name":"route","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The base cdn route"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":112,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The extension/size options for the link\n"},"originalName":"__namedParameters","type":{"type":"reference","typeArguments":[{"type":"reference","id":14,"name":"MakeURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":264,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"roleIcon","description":"Generates a URL for the icon of a role","params":[{"data":{"id":78,"name":"roleId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The id of the role that has the icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":79,"name":"roleIconHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this role icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":80,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the role icon\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":186,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"splash","description":"Generates a guild invite splash URL for a guild's invite splash.","params":[{"data":{"id":83,"name":"guildId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The guild id that has the invite splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":84,"name":"splashHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this splash"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":85,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the splash\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":196,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"sticker","description":"Generates a sticker URL.","params":[{"data":{"id":88,"name":"stickerId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The sticker id"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":89,"name":"extension","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The extension of the sticker\n"},"type":{"type":"union","types":[{"type":"literal","value":"json"},{"type":"literal","value":"png"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":205,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"stickerPackBanner","description":"Generates a sticker pack banner URL.","params":[{"data":{"id":92,"name":"bannerId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The banner id"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":93,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the banner\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":217,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"teamIcon","description":"Generates a team icon URL for a team's icon.","params":[{"data":{"id":96,"name":"teamId","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The team id that has the icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":97,"name":"iconHash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash provided by Discord for this icon"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":98,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Optional options for the icon\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":7,"name":"BaseImageURLOptions"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":227,"file":"CDN.ts","path":"packages/rest/src/lib"}}],"meta":{"line":58,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"DiscordAPIError","description":"Represents an API error returned by Discord","extends":[[["Error"]]],"construct":{"name":"constructor","params":[{"data":{"id":143,"name":"rawError","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The error reported by Discord"},"type":{"type":"union","types":[{"type":"reference","id":113,"name":"DiscordErrorData"},{"type":"reference","id":117,"name":"OAuthErrorData"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":144,"name":"code","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The error code reported by Discord"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":145,"name":"status","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The status code of the response"},"type":{"type":"intrinsic","name":"number"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":146,"name":"method","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The method of the request that erred"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":147,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The url of the request that erred"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":148,"name":"bodyData","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The unparsed data for the request that errored\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":240,"name":"InternalRequest"},{"type":"union","types":[{"type":"literal","value":"body"},{"type":"literal","value":"files"}]}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts","path":"node_modules/typescript/lib"}},{"name":"code","type":[[["string"," | "],["number"]]]},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","type":[[["string"]]]},{"name":"rawError","type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":43,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"status","type":[[["number"]]]},{"name":"url","type":[[["string"]]]},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"data":{"id":133,"name":"targetObject","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"object"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":134,"name":"constructorOpt","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"Function","package":"typescript","name":"Function"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["void"]]]},{"name":"flattenDiscordError","scope":"static","access":"private","params":[{"data":{"id":129,"name":"obj","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"DiscordError"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":130,"name":"key","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"''"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["IterableIterator","<"],["string",">"]]],"meta":{"line":86,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"getMessage","scope":"static","access":"private","params":[{"data":{"id":126,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","id":113,"name":"DiscordErrorData"},{"type":"reference","id":117,"name":"OAuthErrorData"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["string"]]],"meta":{"line":73,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}}],"meta":{"line":42,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"HTTPError","description":"Represents a HTTP error","extends":[[["Error"]]],"construct":{"name":"constructor","params":[{"data":{"id":173,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The name of the error"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":174,"name":"status","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The status code of the response"},"type":{"type":"intrinsic","name":"number"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":175,"name":"method","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The method of the request that erred"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":176,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The url of the request that erred"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":177,"name":"bodyData","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The unparsed data for the request that errored\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":240,"name":"InternalRequest"},{"type":"union","types":[{"type":"literal","value":"body"},{"type":"literal","value":"files"}]}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts","path":"node_modules/typescript/lib"}},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":8,"file":"HTTPError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"status","type":[[["number"]]]},{"name":"url","type":[[["string"]]]},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"data":{"id":163,"name":"targetObject","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"object"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":164,"name":"constructorOpt","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"Function","package":"typescript","name":"Function"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["void"]]]}],"meta":{"line":7,"file":"HTTPError.ts","path":"packages/rest/src/lib/errors"}},{"name":"REST","extends":[[["EventEmitter"]]],"construct":{"name":"constructor","params":[{"data":{"id":534,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":448,"name":"RESTOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"props":[{"name":"cdn","readonly":true,"type":[[["CDN"]]],"meta":{"line":224,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":211,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":214,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":205,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":208,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["REST"]]],"meta":{"line":217,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"requestManager","readonly":true,"type":[[["RequestManager"]]],"meta":{"line":225,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":273,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":278,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":272,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":644,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":645,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":646,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":647,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":648,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]]},{"name":"delete","description":"Runs a delete request from the api","params":[{"data":{"id":622,"name":"fullRoute","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The full route to query"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":623,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional request options\n"},"type":{"type":"reference","id":217,"name":"RequestData"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":283,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"get","description":"Runs a get request from the api","params":[{"data":{"id":618,"name":"fullRoute","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The full route to query"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":619,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional request options\n"},"type":{"type":"reference","id":217,"name":"RequestData"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":274,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"getAgent","description":"Gets the agent set for this instance","returns":[[["null"," | "],["Dispatcher"]]],"meta":{"line":247,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":669,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event being listened for\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":663,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"patch","description":"Runs a patch request from the api","params":[{"data":{"id":634,"name":"fullRoute","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The full route to query"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":635,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional request options\n"},"type":{"type":"reference","id":217,"name":"RequestData"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":310,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"post","description":"Runs a post request from the api","params":[{"data":{"id":626,"name":"fullRoute","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The full route to query"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":627,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional request options\n"},"type":{"type":"reference","id":217,"name":"RequestData"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":292,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":672,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":673,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The callback function\n"},"type":{"type":"reflection","declaration":{"id":674,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":675,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":676,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":679,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":680,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The callback function\n"},"type":{"type":"reflection","declaration":{"id":681,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":682,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":683,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]]},{"name":"put","description":"Runs a put request from the api","params":[{"data":{"id":630,"name":"fullRoute","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The full route to query"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":631,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Optional request options\n"},"type":{"type":"reference","id":217,"name":"RequestData"},"defaultValue":"{}"},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":301,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"raw","description":"Runs a request from the API, yielding the raw Response object","params":[{"data":{"id":641,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Request options\n"},"type":{"type":"reference","id":240,"name":"InternalRequest"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["ResponseData",">"]]],"meta":{"line":327,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":666,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":651,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":652,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":653,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":654,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":655,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]]},{"name":"request","description":"Runs a request from the api","params":[{"data":{"id":638,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Request options\n"},"type":{"type":"reference","id":240,"name":"InternalRequest"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":318,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"setAgent","description":"Sets the default agent to use for requests performed by this instance","params":[{"data":{"id":612,"name":"agent","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Sets the agent to use\n"},"type":{"type":"reference","qualifiedName":"Dispatcher","package":"undici","name":"Dispatcher"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]],"meta":{"line":255,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":658,"name":"n","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"number"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]]},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"data":{"id":615,"name":"token","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The authorization token to use\n"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["REST"]]],"meta":{"line":264,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":526,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"},{"type":"reference","qualifiedName":"DOMEventTarget","package":"@types/node","name":"DOMEventTarget"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":527,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":522,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The emitter to query"},"type":{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":523,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The event name\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":517,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":518,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event being listened for"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":519,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"StaticEventEmitterOptions","package":"@types/node","name":"StaticEventEmitterOptions"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":{"types":[[["AsyncIterableIterator","<"],["any",">"]]],"description":"that iterates `eventName` events emitted by the `emitter`"},"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":508,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"NodeEventTarget","package":"@types/node","name":"NodeEventTarget"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":509,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":510,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"StaticEventEmitterOptions","package":"@types/node","name":"StaticEventEmitterOptions"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":223,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"RateLimitError","extends":[[["Error"]]],"implements":[[["RateLimitData"]]],"construct":{"name":"constructor","params":[{"data":{"id":199,"name":"__namedParameters","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":465,"name":"RateLimitData"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"props":[{"name":"cause","type":[[["Error"]]],"meta":{"line":26,"file":"lib.es2022.error.d.ts","path":"node_modules/typescript/lib"}},{"name":"global","description":"Whether the rate limit that was reached was the global limit","type":[[["boolean"]]],"meta":{"line":11,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"hash","description":"The bucket hash for this request","type":[[["string"]]],"meta":{"line":7,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"limit","description":"The amount of requests we can perform before locking requests","type":[[["number"]]],"meta":{"line":5,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"majorParameter","description":"The major parameter of the route","type":[[["string"]]],"meta":{"line":10,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"message","type":[[["string"]]],"meta":{"line":1029,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","description":"The HTTP method being performed","type":[[["string"]]],"meta":{"line":6,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"route","description":"The route being hit in this request","type":[[["string"]]],"meta":{"line":9,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","type":[[["number"]]],"meta":{"line":4,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"url","description":"The full URL for this request","type":[[["string"]]],"meta":{"line":8,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"data":{"id":189,"name":"targetObject","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"object"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":190,"name":"constructorOpt","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"Function","package":"typescript","name":"Function"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["void"]]]}],"meta":{"line":3,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"RequestManager","description":"Represents the class that manages handlers for endpoints","extends":[[["EventEmitter"]]],"construct":{"name":"constructor","params":[{"data":{"id":295,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"reference","id":448,"name":"RESTOptions"}],"qualifiedName":"Partial","package":"typescript","name":"Partial"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}]},"props":[{"name":"#token","access":"private","default":"null","type":[[["null"," | "],["string"]]],"meta":{"line":194,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"agent","description":"The {@link https://undici.nodejs.org/#/docs/api/Agent Agent} for all requests\nperformed by this manager.","default":"null","type":[[["null"," | "],["Dispatcher"]]],"meta":{"line":167,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":149,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalDelay","description":"The promise used to wait out the global rate limit","default":"null","type":[[["null"," | "],["Promise","<"],["void",">"]]],"meta":{"line":176,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalRemaining","description":"The number of requests remaining in the global bucket","type":[[["number"]]],"meta":{"line":171,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalReset","description":"The timestamp at which the global bucket resets","default":"-1","type":[[["number"]]],"meta":{"line":181,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"handlerTimer","access":"private","type":[[["Timer"]]],"meta":{"line":197,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"handlers","description":"Request handlers created from the bucket hash and the major parameters","readonly":true,"type":[[["Collection","<"],["string",", "],["IHandler",">"]]],"meta":{"line":191,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"hashTimer","access":"private","type":[[["Timer"]]],"meta":{"line":196,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"hashes","description":"API bucket hashes that are cached from provided routes","readonly":true,"type":[[["Collection","<"],["string",", "],["HashData",">"]]],"meta":{"line":186,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":152,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":143,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":146,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"options","readonly":true,"type":[[["RESTOptions"]]],"meta":{"line":199,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["RequestManager"]]],"meta":{"line":155,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":273,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":278,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":272,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":406,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":407,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":408,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":409,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":410,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]]},{"name":"clearHandlerSweeper","description":"Stops the request handler sweeping interval","returns":[[["void"]]],"meta":{"line":457,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"clearHashSweeper","description":"Stops the hash sweeping interval","returns":[[["void"]]],"meta":{"line":450,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"createHandler","description":"Creates a new rate limit handler from a hash, based on the hash and the major parameter","access":"private","params":[{"data":{"id":390,"name":"hash","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The hash for the route"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":391,"name":"majorParameter","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The major parameter for this handler"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["SequentialHandler"]]],"meta":{"line":328,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":431,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event being listened for\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":425,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":434,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":435,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The callback function\n"},"type":{"type":"reflection","declaration":{"id":436,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":437,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":438,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":441,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":442,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The callback function\n"},"type":{"type":"reflection","declaration":{"id":443,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":444,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":445,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]]},{"name":"queueRequest","description":"Queues a request to be sent","params":[{"data":{"id":387,"name":"request","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"All the information needed to make a request"},"type":{"type":"reference","id":240,"name":"InternalRequest"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":{"types":[[["Promise","<"],["ResponseData",">"]]],"description":"The response from the api request"},"returnsDescription":"The response from the api request","meta":{"line":297,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":428,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":413,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":414,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":415,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"id":416,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":417,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]]},{"name":"resolveRequest","description":"Formats the request data to a usable format for fetch","access":"private","params":[{"data":{"id":394,"name":"request","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request data\n"},"type":{"type":"reference","id":240,"name":"InternalRequest"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<{"],["\nfetchOptions",": {"],["\ndispatcher",": "],["Dispatcher\n","} & "],["Omit","<"],["RequestOptions",", "],["'origin'"," | "],["'path'"," | "],["'method'","> & "],["Partial","<"],["Pick","<"],["RequestOptions",", "],["'method'",">>,"],["\nurl",": "],["string\n","}>"]]],"meta":{"line":341,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"setAgent","description":"Sets the default agent to use for requests performed by this manager","params":[{"data":{"id":381,"name":"agent","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The agent to use\n"},"type":{"type":"reference","qualifiedName":"Dispatcher","package":"undici","name":"Dispatcher"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]],"meta":{"line":278,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":420,"name":"n","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"number"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]]},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"data":{"id":384,"name":"token","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The authorization token to use\n"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RequestManager"]]],"meta":{"line":287,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"setupSweepers","access":"private","returns":[[["void"]]],"meta":{"line":212,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"generateRouteData","description":"Generates route data for an endpoint:method","scope":"static","access":"private","params":[{"data":{"id":265,"name":"endpoint","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The raw endpoint to generalize"},"type":{"type":"template-literal","head":"/","tail":[[{"type":"intrinsic","name":"string"},""]]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":266,"name":"method","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The HTTP method this endpoint is called without"},"type":{"type":"reference","id":233,"name":"RequestMethod"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["RouteData"]]],"meta":{"line":467,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":287,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"},{"type":"reference","qualifiedName":"DOMEventTarget","package":"@types/node","name":"DOMEventTarget"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":288,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":283,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The emitter to query"},"type":{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":284,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The event name\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":278,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node","name":"EventEmitter"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":279,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"shortText":"The name of the event being listened for"},"type":{"type":"intrinsic","name":"string"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":280,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"StaticEventEmitterOptions","package":"@types/node","name":"StaticEventEmitterOptions"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":{"types":[[["AsyncIterableIterator","<"],["any",">"]]],"description":"that iterates `eventName` events emitted by the `emitter`"},"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"data":{"id":269,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"NodeEventTarget","package":"@types/node","name":"NodeEventTarget"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":270,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}},{"data":{"id":271,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","qualifiedName":"StaticEventEmitterOptions","package":"@types/node","name":"StaticEventEmitterOptions"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":162,"file":"RequestManager.ts","path":"packages/rest/src/lib"}}],"functions":[{"name":"makeURLSearchParams","description":"Creates and populates an URLSearchParams instance from an object, stripping\nout null and undefined values, while also coercing non-strings to strings.","params":[{"data":{"id":3,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The options to use"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":{"types":[[["URLSearchParams"]]],"description":"A populated URLSearchParams instance"},"returnsDescription":"A populated URLSearchParams instance","meta":{"line":46,"file":"utils.ts","path":"packages/rest/src/lib/utils"}},{"name":"parseResponse","description":"Converts the response to usable data","params":[{"data":{"id":6,"name":"res","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The fetch response\n"},"type":{"type":"reference","qualifiedName":"Dispatcher.ResponseData","package":"undici","name":"ResponseData"}},"config":{"root":".","typescript":true,"input":["src/index.ts"],"custom":"docs/index.json","output":"docs/docs.json"}}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":62,"file":"utils.ts","path":"packages/rest/src/lib/utils"}}],"interfaces":[],"typedefs":[{"name":"RESTEvents","description":"The events that the REST manager emits","meta":{"line":34,"file":"constants.ts","path":"packages/rest/src/lib/utils"},"props":[{"name":"Debug","type":[[["\"restDebug\""]]]},{"name":"HandlerSweep","type":[[["\"handlerSweep\""]]]},{"name":"HashSweep","type":[[["\"hashSweep\""]]]},{"name":"InvalidRequestWarning","type":[[["\"invalidRequestWarning\""]]]},{"name":"RateLimited","type":[[["\"rateLimited\""]]]},{"name":"Response","type":[[["\"response\""]]]}]},{"name":"RequestMethod","description":"Possible API methods to be used when doing requests","meta":{"line":99,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"Delete","type":[[["\"DELETE\""]]]},{"name":"Get","type":[[["\"GET\""]]]},{"name":"Patch","type":[[["\"PATCH\""]]]},{"name":"Post","type":[[["\"POST\""]]]},{"name":"Put","type":[[["\"PUT\""]]]}]},{"name":"APIRequest","meta":{"line":155,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"data","description":"The data that was used to form the body of this request","optional":false,"type":[[["HandlerRequestData"]]]},{"name":"method","description":"The HTTP method used in this request","optional":false,"type":[[["string"]]]},{"name":"options","description":"Additional HTTP options for this request","optional":false,"type":[[["{"],["\ndispatcher",": "],["Dispatcher\n","} & "],["Omit","<"],["RequestOptions",", "],["'origin'"," | "],["'path'"," | "],["'method'","> & "],["Partial","<"],["Pick","<"],["RequestOptions",", "],["'method'",">>"]]]},{"name":"path","description":"The full path used to make the request","optional":false,"type":[[["unknown"]]]},{"name":"retries","description":"The number of times this request has been attempted","optional":false,"type":[[["number"]]]},{"name":"route","description":"The API route identifying the ratelimit for this request","optional":false,"type":[[["string"]]]}]},{"name":"BaseImageURLOptions","description":"The options used for image URLs","meta":{"line":14,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"type":[[["'webp'"," | "],["'png'"," | "],["'jpg'"," | "],["'jpeg'"," | "],["'gif'"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"DiscordErrorData","meta":{"line":14,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"code","optional":false,"type":[[["number"]]]},{"name":"errors","optional":true,"type":[[["DiscordError"]]]},{"name":"message","optional":false,"type":[[["string"]]]}]},{"name":"HashData","description":"Represents a hash and its associated fields","see":[],"deprecated":false,"meta":{"line":137,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"lastAccess","optional":false,"type":[[["number"]]]},{"name":"value","optional":false,"type":[[["string"]]]}]},{"name":"ImageURLOptions","description":"The options used for image URLs with animated content","meta":{"line":29,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"type":[[["'webp'"," | "],["'png'"," | "],["'jpg'"," | "],["'jpeg'"," | "],["'gif'"]]]},{"name":"forceStatic","description":"Whether or not to prefer the static version of an image asset.","optional":true,"type":[[["boolean"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"InternalRequest","description":"Internal request options","see":[],"deprecated":false,"meta":{"line":114,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"dispatcher","description":"The {@link https://undici.nodejs.org/#/docs/api/Agent Agent} to use for the request.","optional":true,"type":[[["Agent"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"fullRoute","optional":false,"type":[[["unknown"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"method","optional":false,"type":[[["RequestMethod"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"type":[[["boolean"]]]}]},{"name":"InvalidRequestWarningData","meta":{"line":182,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"count","description":"Number of invalid requests that have been made in the window","optional":false,"type":[[["number"]]]},{"name":"remainingTime","description":"Time in milliseconds remaining before the count resets","optional":false,"type":[[["number"]]]}]},{"name":"MakeURLOptions","description":"The options to use when making a CDN URL","meta":{"line":39,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"allowedExtensions","description":"The allowed extensions that can be used","optional":true,"type":[[["readonly"," "],["Array","<"],["string",">"]]]},{"name":"extension","description":"The extension to use for the image URL","optional":true,"type":[[["string"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"OAuthErrorData","meta":{"line":20,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"error","optional":false,"type":[[["string"]]]},{"name":"error_description","optional":true,"type":[[["string"]]]}]},{"name":"RESTOptions","description":"Options to be passed when creating the REST instance","meta":{"line":21,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"agent","description":"The agent to set globally","optional":false,"type":[[["Dispatcher"]]]},{"name":"api","description":"The base api path, without version","optional":false,"type":[[["string"]]]},{"name":"authPrefix","description":"The authorization prefix to use for requests, useful if you want to use\nbearer tokens","optional":false,"type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"cdn","description":"The cdn path","optional":false,"type":[[["string"]]]},{"name":"globalRequestsPerSecond","description":"How many requests to allow sending per second (Infinity for unlimited, 50 for the standard global limit used by Discord)","optional":false,"type":[[["number"]]]},{"name":"handlerSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 1h)","optional":false,"type":[[["number"]]]},{"name":"hashLifetime","description":"The maximum amount of time a hash can exist in milliseconds without being hit with a request (defaults to 24h)","optional":false,"type":[[["number"]]]},{"name":"hashSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 4h)","optional":false,"type":[[["number"]]]},{"name":"headers","description":"Additional headers to send for all API requests","optional":false,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"invalidRequestWarningInterval","description":"The number of invalid REST requests (those that return 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings).\nThat is, if set to 500, warnings will be emitted at invalid request number 500, 1000, 1500, and so on.","optional":false,"type":[[["number"]]]},{"name":"offset","description":"The extra offset to add to rate limits in milliseconds","optional":false,"type":[[["number"]]]},{"name":"rejectOnRateLimit","description":"Determines how rate limiting and pre-emptive throttling should be handled.\nWhen an array of strings, each element is treated as a prefix for the request route\n(e.g. `/channels` to match any route starting with `/channels` such as `/channels/:id/messages`)\nfor which to throw {@link RateLimitError}s. All other request routes will be queued normally","optional":false,"type":[[["null"," | "],["Array","<"],["string","> | "],["RateLimitQueueFilter"]]]},{"name":"retries","description":"The number of retries for errors with the 500 code, or errors\nthat timeout","optional":false,"type":[[["number"]]]},{"name":"timeout","description":"The time to wait in milliseconds before a request is aborted","optional":false,"type":[[["number"]]]},{"name":"userAgentAppendix","description":"Extra information to add to the user agent","optional":false,"type":[[["string"]]]},{"name":"version","description":"The version of the API to use","optional":false,"type":[[["string"]]]}]},{"name":"RateLimitData","description":"Data emitted on `RESTEvents.RateLimited`","meta":{"line":112,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"global","description":"Whether the rate limit that was reached was the global limit","optional":false,"type":[[["boolean"]]]},{"name":"hash","description":"The bucket hash for this request","optional":false,"type":[[["string"]]]},{"name":"limit","description":"The amount of requests we can perform before locking requests","optional":false,"type":[[["number"]]]},{"name":"majorParameter","description":"The major parameter of the route","optional":false,"type":[[["string"]]]},{"name":"method","description":"The HTTP method being performed","optional":false,"type":[[["string"]]]},{"name":"route","description":"The route being hit in this request","optional":false,"type":[[["string"]]]},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","optional":false,"type":[[["number"]]]},{"name":"url","description":"The full URL for this request","optional":false,"type":[[["string"]]]}]},{"name":"RawFile","description":"Represents a file to be added to the request","meta":{"line":15,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"data","description":"The actual data for the file","optional":false,"type":[[["string"," | "],["number"," | "],["boolean"," | "],["Buffer"]]]},{"name":"key","description":"An explicit key to use for key of the formdata field for this file.\nWhen not provided, the index of the file in the files array is used in the form `files[${index}]`.\nIf you wish to alter the placeholder snowflake, you must provide this property in the same form (`files[${placeholder}]`)","optional":true,"type":[[["string"]]]},{"name":"name","description":"The name of the file","optional":false,"type":[[["string"]]]}]},{"name":"RequestBody","meta":{"line":25,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"files","optional":false,"type":[[["undefined"," | "],["Array","<"],["RawFile",">"]]]},{"name":"json","optional":false,"type":[[["unknown"]]]}]},{"name":"RequestData","description":"Represents possible data to be given to an endpoint","meta":{"line":35,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"dispatcher","description":"The {@link https://undici.nodejs.org/#/docs/api/Agent Agent} to use for the request.","optional":true,"type":[[["Agent"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"type":[[["boolean"]]]}]},{"name":"RequestHeaders","description":"Possible headers for an API call","meta":{"line":90,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"Authorization","optional":true,"type":[[["string"]]]},{"name":"User-Agent","optional":false,"type":[[["string"]]]},{"name":"X-Audit-Log-Reason","optional":true,"type":[[["string"]]]}]},{"name":"RestEvents","meta":{"line":193,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"handlerSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"hashSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"invalidRequestWarning","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"newListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"rateLimited","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"removeListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"response","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"restDebug","optional":false,"type":[[["["],["unknown","]"]]]}]},{"name":"RouteData","description":"Parsed route data for an endpoint","see":[],"deprecated":false,"meta":{"line":126,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"bucketRoute","optional":false,"type":[[["string"]]]},{"name":"majorParameter","optional":false,"type":[[["string"]]]},{"name":"original","optional":false,"type":[[["unknown"]]]}]},{"name":"HandlerRequestData","type":[[["Pick","<"],["InternalRequest",", "],["'files'"," | "],["'body'"," | "],["'auth'",">"]]],"meta":{"line":119,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"ImageExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":47,"file":"constants.ts","path":"packages/rest/src/lib/utils"}},{"name":"ImageSize","type":[[["("],["typeof"," "],["ALLOWED","_"],["SIZES",")["],["number","]"]]],"meta":{"line":49,"file":"constants.ts","path":"packages/rest/src/lib/utils"}},{"name":"RateLimitQueueFilter","description":"A function that determines whether the rate limit hit should throw an Error","type":[[["("],["rateLimitData",": "],["RateLimitData",") => "],["boolean"," | "],["Promise","<"],["boolean",">"]]],"meta":{"line":153,"file":"REST.ts","path":"packages/rest/src/lib"},"params":[{"name":"rateLimitData","optional":false,"type":[[["RateLimitData"]]]}],"returns":[[["boolean"," | "],["Promise","<"],["boolean",">"]]]},{"name":"RequestOptions","type":[[["Exclude","<"],["Parameters","<("],["typeof"," "],["request",")>["],["1","], "],["undefined",">"]]],"meta":{"line":221,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"RouteLike","type":[[["unknown"]]],"meta":{"line":107,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"StickerExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["STICKER","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":48,"file":"constants.ts","path":"packages/rest/src/lib/utils"}}],"externals":[],"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"https://discord.js.org/static/logo.svg\" width=\"546\" alt=\"discord.js\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/djs\"><img src=\"https://img.shields.io/discord/222078108977594368?color=5865F2&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/@discordjs/rest\"><img src=\"https://img.shields.io/npm/v/@discordjs/rest.svg?maxAge=3600\" alt=\"npm version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@discordjs/rest\"><img src=\"https://img.shields.io/npm/dt/@discordjs/rest.svg?maxAge=3600\" alt=\"npm downloads\" /></a>\n    <a href=\"https://github.com/discordjs/discord.js/actions\"><img src=\"https://github.com/discordjs/discord.js/actions/workflows/test.yml/badge.svg\" alt=\"Tests status\" /></a>\n  </p>\n</div>\n\n## Installation\n\n**Node.js 16.9.0 or newer is required.**\n\n```sh-session\nnpm install @discordjs/rest\nyarn add @discordjs/rest\npnpm add @discordjs/rest\n```\n\n## Examples\n\nInstall all required dependencies:\n\n```sh-session\nnpm install @discordjs/rest discord-api-types\nyarn add @discordjs/rest discord-api-types\npnpm add @discordjs/rest discord-api-types\n```\n\nSend a basic message:\n\n```js\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\n\nconst rest = new REST({ version: '10' }).setToken('token');\n\ntry {\n\tawait rest.post(Routes.channelMessages(CHANNEL_ID), {\n\t\tbody: {\n\t\t\tcontent: 'A message via REST!',\n\t\t},\n\t});\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\nCreate a thread from an existing message to be archived after 60 minutes of inactivity:\n\n```js\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\n\nconst rest = new REST({ version: '10' }).setToken('token');\n\ntry {\n\tawait rest.post(Routes.threads(CHANNEL_ID, MESSAGE_ID), {\n\t\tbody: {\n\t\t\tname: 'Thread',\n\t\t\tauto_archive_duration: 60,\n\t\t},\n\t});\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n## Links\n\n- [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n- [Documentation](https://discord.js.org/#/docs/rest)\n- [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide))\n  See also the [Update Guide](https://discordjs.guide/additional-info/changes-in-v13.html), including updated and removed items in the library.\n- [discord.js Discord server](https://discord.gg/djs)\n- [Discord API Discord server](https://discord.gg/discord-api)\n- [GitHub](https://github.com/discordjs/discord.js/tree/main/packages/rest)\n- [npm](https://www.npmjs.com/package/@discordjs/rest)\n- [Related libraries](https://discord.com/developers/docs/topics/community-resources#libraries)\n\n## Contributing\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs/rest).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/main/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don't hesitate to join our official [discord.js Server](https://discord.gg/djs).\n","path":"README.md"}}}}}