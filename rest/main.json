{"meta":{"version":"0.3.3","format":20,"date":1642423886336},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# `@discordjs/rest`\n\n> The REST API module for Discord.js\n","path":"README.md"}}}},"classes":[{"name":"CDN","description":"The CDN link builder","construct":{"name":"constructor","params":[{"name":"base","optional":true,"default":"DefaultRestOptions.cdn","type":[[["string"]]]}],"returns":[[["CDN"]]],"meta":{"line":59,"file":"CDN.ts","path":"packages/rest/src/lib"}},"methods":[{"name":"appAsset","description":"Generates an app asset URL for a client's asset.","params":[{"name":"clientId","description":"The client id that has the asset","optional":false,"type":[[["string"]]]},{"name":"assetHash","description":"The hash provided by Discord for this asset","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the asset","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":67,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"appIcon","description":"Generates an app icon URL for a client's icon.","params":[{"name":"clientId","description":"The client id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":77,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"avatar","description":"Generates an avatar URL, e.g. for a user or a webhook.","params":[{"name":"id","description":"The id that has the icon","optional":false,"type":[[["string"]]]},{"name":"avatarHash","description":"The hash provided by Discord for this avatar","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the avatar","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":87,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"banner","description":"Generates a banner URL, e.g. for a user or a guild.","params":[{"name":"id","description":"The id that has the banner splash","optional":false,"type":[[["string"]]]},{"name":"bannerHash","description":"The hash provided by Discord for this banner","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the banner","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":97,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"channelIcon","description":"Generates an icon URL for a channel, e.g. a group DM.","params":[{"name":"channelId","description":"The channel id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this channel","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":107,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"defaultAvatar","description":"Generates the default avatar URL for a discriminator.","params":[{"name":"discriminator","description":"The discriminator modulo 5","optional":false,"type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":115,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"discoverySplash","description":"Generates a discovery splash URL for a guild's discovery splash.","params":[{"name":"guildId","description":"The guild id that has the discovery splash","optional":false,"type":[[["string"]]]},{"name":"splashHash","description":"The hash provided by Discord for this splash","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the splash","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":125,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"dynamicMakeURL","description":"Constructs the URL for the resource, checking whether or not `hash` starts with `a_` if `dynamic` is set to `true`.","access":"private","params":[{"name":"route","description":"The base cdn route","optional":false,"type":[[["string"]]]},{"name":"hash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the link","optional":true,"default":"{}","type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":221,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"emoji","description":"Generates an emoji's URL for an emoji.","params":[{"name":"emojiId","description":"The emoji id","optional":false,"type":[[["string"]]]},{"name":"extension","description":"The extension of the emoji","optional":true,"type":[[["'webp'"," | "],["'png'"," | "],["'jpg'"," | "],["'jpeg'"," | "],["'gif'"]]]}],"returns":[[["string"]]],"meta":{"line":134,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"guildMemberAvatar","description":"Generates a guild member avatar URL.","params":[{"name":"guildId","description":"The id of the guild","optional":false,"type":[[["string"]]]},{"name":"userId","description":"The id of the user","optional":false,"type":[[["string"]]]},{"name":"avatarHash","description":"The hash provided by Discord for this avatar","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the avatar","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":145,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"icon","description":"Generates an icon URL, e.g. for a guild.","params":[{"name":"id","description":"The id that has the icon splash","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["ImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":160,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"makeURL","description":"Constructs the URL for the resource","access":"private","params":[{"name":"route","description":"The base cdn route","optional":false,"type":[[["string"]]]},{"name":"options","description":"The extension/size options for the link","optional":true,"default":"{}","type":[[["Readonly","<"],["MakeURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":234,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"roleIcon","description":"Generates a URL for the icon of a role","params":[{"name":"roleId","description":"The id of the role that has the icon","optional":false,"type":[[["string"]]]},{"name":"roleIconHash","description":"The hash provided by Discord for this role icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the role icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":170,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"splash","description":"Generates a guild invite splash URL for a guild's invite splash.","params":[{"name":"guildId","description":"The guild id that has the invite splash","optional":false,"type":[[["string"]]]},{"name":"splashHash","description":"The hash provided by Discord for this splash","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the splash","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":180,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"sticker","description":"Generates a sticker URL.","params":[{"name":"stickerId","description":"The sticker id","optional":false,"type":[[["string"]]]},{"name":"extension","description":"The extension of the sticker","optional":true,"type":[[["'png'"," | "],["'json'"]]]}],"returns":[[["string"]]],"meta":{"line":189,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"stickerPackBanner","description":"Generates a sticker pack banner URL.","params":[{"name":"bannerId","description":"The banner id","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the banner","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":201,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"teamIcon","description":"Generates a team icon URL for a team's icon.","params":[{"name":"teamId","description":"The team id that has the icon","optional":false,"type":[[["string"]]]},{"name":"iconHash","description":"The hash provided by Discord for this icon","optional":false,"type":[[["string"]]]},{"name":"options","description":"Optional options for the icon","optional":true,"type":[[["Readonly","<"],["BaseImageURLOptions",">"]]]}],"returns":[[["string"]]],"meta":{"line":211,"file":"CDN.ts","path":"packages/rest/src/lib"}}],"meta":{"line":58,"file":"CDN.ts","path":"packages/rest/src/lib"}},{"name":"DiscordAPIError","description":"Represents an API error returned by Discord","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"rawError","description":"The error reported by Discord","optional":false,"type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]},{"name":"code","description":"The error code reported by Discord","optional":false,"type":[[["string"," | "],["number"]]]},{"name":"status","description":"The status code of the response","optional":false,"type":[[["number"]]]},{"name":"method","description":"The method of the request that erred","optional":false,"type":[[["string"]]]},{"name":"url","description":"The url of the request that erred","optional":false,"type":[[["string"]]]},{"name":"bodyData","description":"The unparsed data for the request that errored","optional":false,"type":[[["Pick","<"],["InternalRequest",", "],["'files'"," | "],["'body'",">"]]]}],"returns":[[["DiscordAPIError"]]],"meta":{"line":53,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},"props":[{"name":"code","type":[[["string"," | "],["number"]]]},{"name":"message","type":[[["string"]]],"meta":{"line":1023,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","type":[[["string"]]]},{"name":"rawError","type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":43,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1024,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"status","type":[[["number"]]]},{"name":"url","type":[[["string"]]]},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"name","description":"The name of the error","readonly":true,"type":[[["string"]]],"meta":{"line":69,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[["void"]]]},{"name":"flattenDiscordError","scope":"static","access":"private","params":[{"name":"obj","optional":false,"type":[[["DiscordError"]]]},{"name":"key","optional":true,"default":"''","type":[[["string"]]]}],"returns":[[["IterableIterator","<"],["string",">"]]],"meta":{"line":86,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"getMessage","scope":"static","access":"private","params":[{"name":"error","optional":false,"type":[[["DiscordErrorData"," | "],["OAuthErrorData"]]]}],"returns":[[["string"]]],"meta":{"line":73,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}}],"meta":{"line":42,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"}},{"name":"HTTPError","description":"Represents a HTTP error","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"message","description":"The error message","optional":false,"type":[[["string"]]]},{"name":"name","description":"The name of the error","optional":false,"type":[[["string"]]]},{"name":"status","description":"The status code of the response","optional":false,"type":[[["number"]]]},{"name":"method","description":"The method of the request that erred","optional":false,"type":[[["string"]]]},{"name":"url","description":"The url of the request that erred","optional":false,"type":[[["string"]]]},{"name":"bodyData","description":"The unparsed data for the request that errored","optional":false,"type":[[["Pick","<"],["InternalRequest",", "],["'files'"," | "],["'body'",">"]]]}],"returns":[[["HTTPError"]]],"meta":{"line":18,"file":"HTTPError.ts","path":"packages/rest/src/lib/errors"}},"props":[{"name":"message","type":[[["string"]]],"meta":{"line":1023,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"requestBody","type":[[["RequestBody"]]],"meta":{"line":8,"file":"HTTPError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1024,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"status","type":[[["number"]]]},{"name":"url","type":[[["string"]]]},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[["void"]]]}],"meta":{"line":7,"file":"HTTPError.ts","path":"packages/rest/src/lib/errors"}},{"name":"REST","extends":["EventEmitter"],"construct":{"name":"constructor","params":[{"name":"options","optional":true,"default":"{}","type":[[["Partial","<"],["RESTOptions",">"]]]}],"returns":[[["REST"]]],"meta":{"line":214,"file":"REST.ts","path":"packages/rest/src/lib"}},"props":[{"name":"cdn","readonly":true,"type":[[["CDN"]]],"meta":{"line":211,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":200,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":203,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":194,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["REST"]]],"meta":{"line":197,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["REST"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["REST"]]],"meta":{"line":206,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"requestManager","readonly":true,"type":[[["RequestManager"]]],"meta":{"line":212,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":273,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":278,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":272,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["REST"]]]},{"name":"delete","description":"Runs a delete request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":254,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"get","description":"Runs a get request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":245,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"patch","description":"Runs a patch request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":281,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"post","description":"Runs a post request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":263,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["REST"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["REST"]]]},{"name":"put","description":"Runs a put request from the api","params":[{"name":"fullRoute","description":"The full route to query","optional":false,"type":[[["unknown"]]]},{"name":"options","description":"Optional request options","optional":true,"default":"{}","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":272,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["REST"]]]},{"name":"request","description":"Runs a request from the api","params":[{"name":"options","description":"Request options","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":289,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["REST"]]]},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"name":"token","description":"The authorization token to use","optional":false,"type":[[["string"]]]}],"returns":[[["REST"]]],"meta":{"line":235,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["DOMEventTarget"," | "],["EventEmitter"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":210,"file":"REST.ts","path":"packages/rest/src/lib"}},{"name":"RateLimitError","extends":["Error"],"implements":["RateLimitData"],"construct":{"name":"constructor","params":[{"name":"__namedParameters","optional":false,"type":[[["RateLimitData"]]]}],"returns":[[["RateLimitError"]]],"meta":{"line":12,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},"props":[{"name":"global","description":"Whether the rate limit that was reached was the global limit","type":[[["boolean"]]],"meta":{"line":11,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"hash","description":"The bucket hash for this request","type":[[["string"]]],"meta":{"line":7,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"limit","description":"The amount of requests we can perform before locking requests","type":[[["number"]]],"meta":{"line":5,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"majorParameter","description":"The major parameter of the route","type":[[["string"]]],"meta":{"line":10,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"message","type":[[["string"]]],"meta":{"line":1023,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"method","description":"The HTTP method being performed","type":[[["string"]]],"meta":{"line":6,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"route","description":"The route being hit in this request","type":[[["string"]]],"meta":{"line":9,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1024,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","type":[[["number"]]],"meta":{"line":4,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"url","description":"The full URL for this request","type":[[["string"]]],"meta":{"line":8,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"name","description":"The name of the error","readonly":true,"type":[[["string"]]],"meta":{"line":27,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[["void"]]]}],"meta":{"line":3,"file":"RateLimitError.ts","path":"packages/rest/src/lib/errors"}},{"name":"RequestManager","description":"Represents the class that manages handlers for endpoints","extends":["EventEmitter"],"construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["Partial","<"],["RESTOptions",">"]]]}],"returns":[[["RequestManager"]]],"meta":{"line":192,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},"props":[{"name":"#token","access":"private","default":"null","type":[[["null"," | "],["string"]]],"meta":{"line":185,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"emit","type":[[["("],["event",": "],["K",", "],["args",": "],["RestEvents","["],["K","]) => "],["boolean"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["args",": "],["Array","<"],["any",">) => "],["boolean"]]],"meta":{"line":145,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalDelay","description":"The promise used to wait out the global rate limit","default":"null","type":[[["null"," | "],["Promise","<"],["void",">"]]],"meta":{"line":167,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalRemaining","description":"The number of requests remaining in the global bucket","type":[[["number"]]],"meta":{"line":162,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"globalReset","description":"The timestamp at which the global bucket resets","default":"-1","type":[[["number"]]],"meta":{"line":172,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"handlerTimer","access":"private","type":[[["Timer"]]],"meta":{"line":188,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"handlers","description":"Request handlers created from the bucket hash and the major parameters","readonly":true,"type":[[["Collection","<"],["string",", "],["IHandler",">"]]],"meta":{"line":182,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"hashTimer","access":"private","type":[[["Timer"]]],"meta":{"line":187,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"hashes","description":"API bucket hashes that are cached from provided routes","readonly":true,"type":[[["Collection","<"],["string",", "],["HashData",">"]]],"meta":{"line":177,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"off","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":148,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"on","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":139,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"once","type":[[["("],["event",": "],["K",", "],["listener",": ("],["args",": "],["RestEvents","["],["K","]) => "],["void",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">, "],["listener",": ("],["args",": "],["Array","<"],["any",">) => "],["void",") => "],["RequestManager"]]],"meta":{"line":142,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"options","readonly":true,"type":[[["RESTOptions"]]],"meta":{"line":190,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"removeAllListeners","type":[[["("],["event",": "],["K",") => "],["RequestManager"," & ("],["event",": "],["Exclude","<"],["S",", "],["keyof"," "],["RestEvents",">) => "],["RequestManager"]]],"meta":{"line":151,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"captureRejectionSymbol","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["captureRejectionSymbol",")"]]],"meta":{"line":273,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"captureRejections","description":"Sets or gets the default captureRejection value for all emitters.","scope":"static","type":[[["boolean"]]],"meta":{"line":278,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"errorMonitor","description":"This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.","scope":"static","readonly":true,"type":[[["("],["typeof"," "],["errorMonitor",")"]]],"meta":{"line":272,"file":"events.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["RequestManager"]]]},{"name":"clearHandlerSweeper","description":"Stops the request handler sweeping interval","returns":[[["void"]]],"meta":{"line":417,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"clearHashSweeper","description":"Stops the hash sweeping interval","returns":[[["void"]]],"meta":{"line":410,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"createHandler","description":"Creates a new rate limit handler from a hash, based on the hash and the major parameter","access":"private","params":[{"name":"hash","description":"The hash for the route","optional":false,"type":[[["string"]]]},{"name":"majorParameter","description":"The major parameter for this handler","optional":false,"type":[[["string"]]]}],"returns":[[["SequentialHandler"]]],"meta":{"line":305,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["Array","<"],["string"," | "],["symbol",">"]]]},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"returns":[[["number"]]]},{"name":"listenerCount","description":"Returns the number of listeners listening to the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]]},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["RequestManager"]]]},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","description":"The name of the event.","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","description":"The callback function","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["RequestManager"]]]},{"name":"queueRequest","description":"Queues a request to be sent","params":[{"name":"request","description":"All the information needed to make a request","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"returnsDescription":"The response from the api request","meta":{"line":278,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]]},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named`eventName`.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"listener","optional":false,"type":[[["("],["args",": "],["Array","<"],["any",">) => "],["void"]]]}],"returns":[[["RequestManager"]]]},{"name":"resolveRequest","description":"Formats the request data to a usable format for fetch","access":"private","params":[{"name":"request","description":"The request data","optional":false,"type":[[["InternalRequest"]]]}],"returns":[[["{"],["\nfetchOptions",": "],["RequestInit",","],["\nurl",": "],["string\n","}"]]],"meta":{"line":318,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["RequestManager"]]]},{"name":"setToken","description":"Sets the authorization token that should be used for requests","params":[{"name":"token","description":"The authorization token to use","optional":false,"type":[[["string"]]]}],"returns":[[["RequestManager"]]],"meta":{"line":268,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"setupSweepers","access":"private","returns":[[["void"]]],"meta":{"line":202,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"generateRouteData","description":"Generates route data for an endpoint:method","scope":"static","access":"private","params":[{"name":"endpoint","description":"The raw endpoint to generalize","optional":false,"type":[[["unknown"]]]},{"name":"method","description":"The HTTP method this endpoint is called without","optional":false,"type":[[["RequestMethod"]]]}],"returns":[[["RouteData"]]],"meta":{"line":427,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["DOMEventTarget"," | "],["EventEmitter"]]]},{"name":"name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["Array","<"],["Function",">"]]],"meta":{"line":262,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":true,"emits":[],"params":[{"name":"emitter","description":"The emitter to query","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The event name","optional":false,"type":[[["string"," | "],["symbol"]]]}],"returns":[[["number"]]],"meta":{"line":234,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"on","description":"```js\nconst { on, EventEmitter } = require('events');","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["EventEmitter"]]]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["AsyncIterableIterator","<"],["any",">"]]],"returnsDescription":"that iterates `eventName` events emitted by the `emitter`","meta":{"line":217,"file":"events.d.ts","path":"node_modules/@types/node"}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.","see":[],"scope":"static","examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"emitter","optional":false,"type":[[["NodeEventTarget"]]]},{"name":"eventName","optional":false,"type":[[["string"," | "],["symbol"]]]},{"name":"options","optional":true,"type":[[["StaticEventEmitterOptions"]]]}],"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":157,"file":"events.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":158,"file":"RequestManager.ts","path":"packages/rest/src/lib"}}],"typedefs":[{"name":"RESTEvents","description":"The events that the REST manager emits","meta":{"line":30,"file":"constants.ts","path":"packages/rest/src/lib/utils"},"props":[{"name":"Debug","type":[[["\"restDebug\""]]]},{"name":"HandlerSweep","type":[[["\"handlerSweep\""]]]},{"name":"HashSweep","type":[[["\"hashSweep\""]]]},{"name":"InvalidRequestWarning","type":[[["\"invalidRequestWarning\""]]]},{"name":"RateLimited","type":[[["\"rateLimited\""]]]},{"name":"Request","type":[[["\"request\""]]]},{"name":"Response","type":[[["\"response\""]]]}]},{"name":"RequestMethod","description":"Possible API methods to be used when doing requests","meta":{"line":97,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"Delete","type":[[["\"delete\""]]]},{"name":"Get","type":[[["\"get\""]]]},{"name":"Patch","type":[[["\"patch\""]]]},{"name":"Post","type":[[["\"post\""]]]},{"name":"Put","type":[[["\"put\""]]]}]},{"name":"APIRequest","meta":{"line":143,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"data","description":"The data that was used to form the body of this request","optional":false,"type":[[["Pick","<"],["InternalRequest",", "],["'files'"," | "],["'body'",">"]]]},{"name":"method","description":"The HTTP method used in this request","optional":false,"type":[[["string"]]]},{"name":"options","description":"Additional HTTP options for this request","optional":false,"type":[[["RequestInit"]]]},{"name":"path","description":"The full path used to make the request","optional":false,"type":[[["unknown"]]]},{"name":"retries","description":"The number of times this request has been attempted","optional":false,"type":[[["number"]]]},{"name":"route","description":"The API route identifying the ratelimit for this request","optional":false,"type":[[["string"]]]}]},{"name":"BaseImageURLOptions","description":"The options used for image URLs","meta":{"line":14,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["'webp'"," | "],["'png'"," | "],["'jpg'"," | "],["'jpeg'"," | "],["'gif'"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"DiscordErrorData","meta":{"line":14,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"code","optional":false,"type":[[["number"]]]},{"name":"errors","optional":true,"type":[[["DiscordError"]]]},{"name":"message","optional":false,"type":[[["string"]]]}]},{"name":"HashData","description":"Represents a hash and its associated fields","see":[],"access":"private","deprecated":false,"meta":{"line":133,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"lastAccess","optional":false,"type":[[["number"]]]},{"name":"value","optional":false,"type":[[["string"]]]}]},{"name":"ImageURLOptions","description":"The options used for image URLs with animated content","meta":{"line":29,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["'webp'"," | "],["'png'"," | "],["'jpg'"," | "],["'jpeg'"," | "],["'gif'"]]]},{"name":"forceStatic","description":"Whether or not to prefer the static version of an image asset.","optional":true,"type":[[["boolean"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"InternalRequest","description":"Internal request options","see":[],"access":"private","deprecated":false,"meta":{"line":112,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"default":"'Bot'","type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"fullRoute","optional":false,"type":[[["unknown"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"method","optional":false,"type":[[["RequestMethod"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"default":"true","type":[[["boolean"]]]}]},{"name":"InvalidRequestWarningData","meta":{"line":170,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"count","description":"Number of invalid requests that have been made in the window","optional":false,"type":[[["number"]]]},{"name":"remainingTime","description":"Time in milliseconds remaining before the count resets","optional":false,"type":[[["number"]]]}]},{"name":"MakeURLOptions","description":"The options to use when making a CDN URL","meta":{"line":39,"file":"CDN.ts","path":"packages/rest/src/lib"},"props":[{"name":"allowedExtensions","description":"The allowed extensions that can be used","optional":true,"type":[[["readonly"," "],["Array","<"],["string",">"]]]},{"name":"extension","description":"The extension to use for the image URL","optional":true,"default":"'webp'","type":[[["string"]]]},{"name":"size","description":"The size specified in the image URL","optional":true,"type":[[["16"," | "],["32"," | "],["64"," | "],["128"," | "],["256"," | "],["512"," | "],["1024"," | "],["2048"," | "],["4096"]]]}]},{"name":"OAuthErrorData","meta":{"line":20,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"error","optional":false,"type":[[["string"]]]},{"name":"error_description","optional":true,"type":[[["string"]]]}]},{"name":"RESTOptions","description":"Options to be passed when creating the REST instance","meta":{"line":14,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"agent","description":"HTTPS Agent options","optional":false,"default":"{}","type":[[["Omit","<"],["AgentOptions",", "],["'keepAlive'",">"]]]},{"name":"api","description":"The base api path, without version","optional":false,"default":"'https://discord.com/api'","type":[[["string"]]]},{"name":"cdn","description":"The cdn path","optional":false,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"globalRequestsPerSecond","description":"How many requests to allow sending per second (Infinity for unlimited, 50 for the standard global limit used by Discord)","optional":false,"default":"50","type":[[["number"]]]},{"name":"handlerSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 1h)","optional":false,"default":"3_600_000","type":[[["number"]]]},{"name":"hashLifetime","description":"The maximum amount of time a hash can exist in milliseconds without being hit with a request (defaults to 24h)","optional":false,"default":"86_400_000","type":[[["number"]]]},{"name":"hashSweepInterval","description":"The amount of time in milliseconds that passes between each hash sweep. (defaults to 4h)","optional":false,"default":"14_400_000","type":[[["number"]]]},{"name":"headers","description":"Additional headers to send for all API requests","optional":false,"default":"{}","type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"invalidRequestWarningInterval","description":"The number of invalid REST requests (those that return 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings).\nThat is, if set to 500, warnings will be emitted at invalid request number 500, 1000, 1500, and so on.","optional":false,"default":"0","type":[[["number"]]]},{"name":"offset","description":"The extra offset to add to rate limits in milliseconds","optional":false,"default":"50","type":[[["number"]]]},{"name":"rejectOnRateLimit","description":"Determines how rate limiting and pre-emptive throttling should be handled.\nWhen an array of strings, each element is treated as a prefix for the request route\n(e.g. `/channels` to match any route starting with `/channels` such as `/channels/:id/messages`)\nfor which to throw {@link RateLimitError}s. All other request routes will be queued normally","optional":false,"default":"null","type":[[["null"," | "],["Array","<"],["string","> | "],["RateLimitQueueFilter"]]]},{"name":"retries","description":"The number of retries for errors with the 500 code, or errors\nthat timeout","optional":false,"default":"3","type":[[["number"]]]},{"name":"timeout","description":"The time to wait in milliseconds before a request is aborted","optional":false,"default":"15_000","type":[[["number"]]]},{"name":"userAgentAppendix","description":"Extra information to add to the user agent","optional":false,"default":"`Node.js ${process.version}`","type":[[["string"]]]},{"name":"version","description":"The version of the API to use","optional":false,"default":"'9'","type":[[["string"]]]}]},{"name":"RateLimitData","description":"Data emitted on `RESTEvents.RateLimited`","meta":{"line":100,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"global","description":"Whether the rate limit that was reached was the global limit","optional":false,"type":[[["boolean"]]]},{"name":"hash","description":"The bucket hash for this request","optional":false,"type":[[["string"]]]},{"name":"limit","description":"The amount of requests we can perform before locking requests","optional":false,"type":[[["number"]]]},{"name":"majorParameter","description":"The major parameter of the route","optional":false,"type":[[["string"]]]},{"name":"method","description":"The HTTP method being performed","optional":false,"type":[[["string"]]]},{"name":"route","description":"The route being hit in this request","optional":false,"type":[[["string"]]]},{"name":"timeToReset","description":"The time, in milliseconds, until the request-lock is reset","optional":false,"type":[[["number"]]]},{"name":"url","description":"The full URL for this request","optional":false,"type":[[["string"]]]}]},{"name":"RawFile","description":"Represents a file to be added to the request","meta":{"line":17,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"fileData","description":"The actual data for the file","optional":false,"type":[[["string"," | "],["number"," | "],["boolean"," | "],["Buffer"]]]},{"name":"fileName","description":"The name of the file","optional":false,"type":[[["string"]]]},{"name":"key","description":"An explicit key to use for key of the formdata field for this file.\nWhen not provided, the index of the file in the files array is used in the form `files[${index}]`.\nIf you wish to alter the placeholder snowflake, you must provide this property in the same form (`files[${placeholder}]`)","optional":true,"type":[[["string"]]]}]},{"name":"RequestBody","meta":{"line":25,"file":"DiscordAPIError.ts","path":"packages/rest/src/lib/errors"},"props":[{"name":"files","optional":false,"type":[[["undefined"," | "],["Array","<"],["RawFile",">"]]]},{"name":"json","optional":false,"type":[[["unknown"]]]}]},{"name":"RequestData","description":"Represents possible data to be given to an endpoint","meta":{"line":37,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"appendToFormData","description":"Whether to append JSON data to form data instead of `payload_json` when sending files","optional":true,"type":[[["boolean"]]]},{"name":"auth","description":"If this request needs the `Authorization` header","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"authPrefix","description":"The authorization prefix to use for this request, useful if you use this with bearer tokens","optional":true,"default":"'Bot'","type":[[["'Bot'"," | "],["'Bearer'"]]]},{"name":"body","description":"The body to send to this request.\nIf providing as BodyInit, set `passThroughBody: true`","optional":true,"type":[[["unknown"]]]},{"name":"files","description":"Files to be attached to this request","optional":true,"type":[[["Array","<"],["RawFile",">"]]]},{"name":"headers","description":"Additional headers to add to this request","optional":true,"type":[[["Record","<"],["string",", "],["string",">"]]]},{"name":"passThroughBody","description":"Whether to pass-through the body property directly to `fetch()`.\n<warn>This only applies when files is NOT present</warn>","optional":true,"type":[[["boolean"]]]},{"name":"query","description":"Query string parameters to append to the called endpoint","optional":true,"type":[[["URLSearchParams"]]]},{"name":"reason","description":"Reason to show in the audit logs","optional":true,"type":[[["string"]]]},{"name":"versioned","description":"If this request should be versioned","optional":true,"default":"true","type":[[["boolean"]]]}]},{"name":"RequestHeaders","description":"Possible headers for an API call","meta":{"line":88,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"Authorization","optional":true,"type":[[["string"]]]},{"name":"User-Agent","optional":false,"type":[[["string"]]]},{"name":"X-Audit-Log-Reason","optional":true,"type":[[["string"]]]}]},{"name":"RestEvents","meta":{"line":181,"file":"REST.ts","path":"packages/rest/src/lib"},"props":[{"name":"handlerSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"hashSweep","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"invalidRequestWarning","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"newListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"rateLimited","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"removeListener","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"request","optional":false,"type":[[["["],["unknown","]"]]]},{"name":"response","optional":false,"type":[[["["],["unknown",", "],["unknown","]"]]]},{"name":"restDebug","optional":false,"type":[[["["],["unknown","]"]]]}]},{"name":"RouteData","description":"Parsed route data for an endpoint","see":[],"access":"private","deprecated":false,"meta":{"line":122,"file":"RequestManager.ts","path":"packages/rest/src/lib"},"props":[{"name":"bucketRoute","optional":false,"type":[[["string"]]]},{"name":"majorParameter","optional":false,"type":[[["string"]]]},{"name":"original","optional":false,"type":[[["unknown"]]]}]},{"name":"ImageExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":44,"file":"constants.ts","path":"packages/rest/src/lib/utils"}},{"name":"ImageSize","type":[[["("],["typeof"," "],["ALLOWED","_"],["SIZES",")["],["number","]"]]],"meta":{"line":46,"file":"constants.ts","path":"packages/rest/src/lib/utils"}},{"name":"RateLimitQueueFilter","description":"A function that determines whether the rate limit hit should throw an Error","type":[[["("],["rateLimitData",": "],["RateLimitData",") => "],["boolean"," | "],["Promise","<"],["boolean",">"]]],"meta":{"line":141,"file":"REST.ts","path":"packages/rest/src/lib"},"params":[{"name":"rateLimitData","optional":false,"type":[[["RateLimitData"]]]}],"returns":[[["boolean"," | "],["Promise","<"],["boolean",">"]]]},{"name":"RouteLike","type":[[["unknown"]]],"meta":{"line":105,"file":"RequestManager.ts","path":"packages/rest/src/lib"}},{"name":"StickerExtension","type":[[["("],["typeof"," "],["ALLOWED","_"],["STICKER","_"],["EXTENSIONS",")["],["number","]"]]],"meta":{"line":45,"file":"constants.ts","path":"packages/rest/src/lib/utils"}}]}