{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/rest",
  "kind": "Package",
  "canonicalReference": "@discordjs/rest!",
  "docComment": "",
  "name": "@discordjs/rest",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/rest!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!ALLOWED_EXTENSIONS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ALLOWED_EXTENSIONS: "
            },
            {
              "kind": "Content",
              "text": "readonly [\"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\"]"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ALLOWED_EXTENSIONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!ALLOWED_SIZES:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ALLOWED_SIZES: "
            },
            {
              "kind": "Content",
              "text": "readonly [16, 32, 64, 128, 256, 512, 1024, 2048, 4096]"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ALLOWED_SIZES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!ALLOWED_STICKER_EXTENSIONS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ALLOWED_STICKER_EXTENSIONS: "
            },
            {
              "kind": "Content",
              "text": "readonly [\"png\", \"json\", \"gif\"]"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ALLOWED_STICKER_EXTENSIONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!APIRequest:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface APIRequest "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "APIRequest",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#data:member",
              "docComment": "/**\n * The data that was used to form the body of this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "HandlerRequestData",
                  "canonicalReference": "@discordjs/rest!HandlerRequestData:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#method:member",
              "docComment": "/**\n * The HTTP method used in this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#options:member",
              "docComment": "/**\n * Additional HTTP options for this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestInit_2",
                  "canonicalReference": "undici!RequestInit:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#path:member",
              "docComment": "/**\n * The full path used to make the request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#retries:member",
              "docComment": "/**\n * The number of times this request has been attempted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retries: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "retries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!APIRequest#route:member",
              "docComment": "/**\n * The API route identifying the ratelimit for this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "route: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "route",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface",
          "docComment": "/**\n * The options used for image URLs\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface BaseImageURLOptions "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "BaseImageURLOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!BaseImageURLOptions#extension:member",
              "docComment": "/**\n * The extension to use for the image URL\n *\n * @defaultValue\n *\n * `'webp'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extension?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageExtension",
                  "canonicalReference": "@discordjs/rest!ImageExtension:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extension",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!BaseImageURLOptions#size:member",
              "docComment": "/**\n * The size specified in the image URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageSize",
                  "canonicalReference": "@discordjs/rest!ImageSize:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!BurstHandlerMajorIdKey:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BurstHandlerMajorIdKey = "
            },
            {
              "kind": "Content",
              "text": "\"burst\""
            }
          ],
          "fileUrlPath": "src/index.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BurstHandlerMajorIdKey",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/rest!calculateUserDefaultAvatarIndex:function(1)",
          "docComment": "/**\n * Calculates the default avatar index for a given user id.\n *\n * @param userId - The user id to calculate the default avatar index for\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function calculateUserDefaultAvatarIndex(userId: "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "userId",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "calculateUserDefaultAvatarIndex"
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!CDN:class",
          "docComment": "/**\n * The CDN link builder\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CDN "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "CDN",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!CDN:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CDN` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(base?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#appAsset:member(1)",
              "docComment": "/**\n * Generates an app asset URL for a client's asset.\n *\n * @param clientId - The client id that has the asset\n *\n * @param assetHash - The hash provided by Discord for this asset\n *\n * @param options - Optional options for the asset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "appAsset(clientId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", assetHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "assetHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "appAsset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#appIcon:member(1)",
              "docComment": "/**\n * Generates an app icon URL for a client's icon.\n *\n * @param clientId - The client id that has the icon\n *\n * @param iconHash - The hash provided by Discord for this icon\n *\n * @param options - Optional options for the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "appIcon(clientId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", iconHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clientId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "iconHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "appIcon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#avatar:member(1)",
              "docComment": "/**\n * Generates an avatar URL, e.g. for a user or a webhook.\n *\n * @param id - The id that has the icon\n *\n * @param avatarHash - The hash provided by Discord for this avatar\n *\n * @param options - Optional options for the avatar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "avatar(id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", avatarHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageURLOptions",
                  "canonicalReference": "@discordjs/rest!ImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "avatarHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "avatar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#avatarDecoration:member(1)",
              "docComment": "/**\n * Generates a user avatar decoration URL.\n *\n * @param userId - The id of the user\n *\n * @param userAvatarDecoration - The hash provided by Discord for this avatar decoration\n *\n * @param options - Optional options for the avatar decoration\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "avatarDecoration(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", userAvatarDecoration: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userAvatarDecoration",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "avatarDecoration"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#banner:member(1)",
              "docComment": "/**\n * Generates a banner URL, e.g. for a user or a guild.\n *\n * @param id - The id that has the banner splash\n *\n * @param bannerHash - The hash provided by Discord for this banner\n *\n * @param options - Optional options for the banner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "banner(id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bannerHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageURLOptions",
                  "canonicalReference": "@discordjs/rest!ImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bannerHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "banner"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#channelIcon:member(1)",
              "docComment": "/**\n * Generates an icon URL for a channel, e.g. a group DM.\n *\n * @param channelId - The channel id that has the icon\n *\n * @param iconHash - The hash provided by Discord for this channel\n *\n * @param options - Optional options for the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channelIcon(channelId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", iconHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "iconHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "channelIcon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#defaultAvatar:member(1)",
              "docComment": "/**\n * Generates a default avatar URL\n *\n * @remarks\n *\n * To calculate the index for a user do `(userId >> 22) % 6`, or `discriminator % 5` if they're using the legacy username system.\n *\n * @param index - The default avatar index\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultAvatar(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "defaultAvatar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#discoverySplash:member(1)",
              "docComment": "/**\n * Generates a discovery splash URL for a guild's discovery splash.\n *\n * @param guildId - The guild id that has the discovery splash\n *\n * @param splashHash - The hash provided by Discord for this splash\n *\n * @param options - Optional options for the splash\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "discoverySplash(guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", splashHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "splashHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "discoverySplash"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#emoji:member(1)",
              "docComment": "/**\n * Generates an emoji's URL for an emoji.\n *\n * @param emojiId - The emoji id\n *\n * @param extension - The extension of the emoji\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emoji(emojiId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", extension?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageExtension",
                  "canonicalReference": "@discordjs/rest!ImageExtension:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "emojiId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "extension",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#guildMemberAvatar:member(1)",
              "docComment": "/**\n * Generates a guild member avatar URL.\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @param avatarHash - The hash provided by Discord for this avatar\n *\n * @param options - Optional options for the avatar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "guildMemberAvatar(guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", avatarHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageURLOptions",
                  "canonicalReference": "@discordjs/rest!ImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "avatarHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "guildMemberAvatar"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#guildMemberBanner:member(1)",
              "docComment": "/**\n * Generates a guild member banner URL.\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @param bannerHash - The hash provided by Discord for this banner\n *\n * @param options - Optional options for the banner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "guildMemberBanner(guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bannerHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageURLOptions",
                  "canonicalReference": "@discordjs/rest!ImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bannerHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "guildMemberBanner"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#guildScheduledEventCover:member(1)",
              "docComment": "/**\n * Generates a cover image for a guild scheduled event.\n *\n * @param scheduledEventId - The scheduled event id\n *\n * @param coverHash - The hash provided by discord for this cover image\n *\n * @param options - Optional options for the cover image\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "guildScheduledEventCover(scheduledEventId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", coverHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scheduledEventId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "coverHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "guildScheduledEventCover"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#icon:member(1)",
              "docComment": "/**\n * Generates an icon URL, e.g. for a guild.\n *\n * @param id - The id that has the icon splash\n *\n * @param iconHash - The hash provided by Discord for this icon\n *\n * @param options - Optional options for the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon(id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", iconHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageURLOptions",
                  "canonicalReference": "@discordjs/rest!ImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "iconHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "icon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#roleIcon:member(1)",
              "docComment": "/**\n * Generates a URL for the icon of a role\n *\n * @param roleId - The id of the role that has the icon\n *\n * @param roleIconHash - The hash provided by Discord for this role icon\n *\n * @param options - Optional options for the role icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roleIcon(roleId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", roleIconHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "roleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roleIconHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "roleIcon"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#splash:member(1)",
              "docComment": "/**\n * Generates a guild invite splash URL for a guild's invite splash.\n *\n * @param guildId - The guild id that has the invite splash\n *\n * @param splashHash - The hash provided by Discord for this splash\n *\n * @param options - Optional options for the splash\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splash(guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", splashHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "splashHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "splash"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#sticker:member(1)",
              "docComment": "/**\n * Generates a sticker URL.\n *\n * @param stickerId - The sticker id\n *\n * @param extension - The extension of the sticker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sticker(stickerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", extension?: "
                },
                {
                  "kind": "Reference",
                  "text": "StickerExtension",
                  "canonicalReference": "@discordjs/rest!StickerExtension:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "stickerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "extension",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "sticker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#stickerPackBanner:member(1)",
              "docComment": "/**\n * Generates a sticker pack banner URL.\n *\n * @param bannerId - The banner id\n *\n * @param options - Optional options for the banner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickerPackBanner(bannerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "bannerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "stickerPackBanner"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!CDN#teamIcon:member(1)",
              "docComment": "/**\n * Generates a team icon URL for a team's icon.\n *\n * @param teamId - The team id that has the icon\n *\n * @param iconHash - The hash provided by Discord for this icon\n *\n * @param options - Optional options for the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "teamIcon(teamId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", iconHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseImageURLOptions",
                  "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "teamId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "iconHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "teamIcon"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!DefaultRestOptions:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultRestOptions: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly agent: null;\n    readonly api: \"https://discord.com/api\";\n    readonly authPrefix: \"Bot\";\n    readonly cdn: \"https://cdn.discordapp.com\";\n    readonly headers: {};\n    readonly invalidRequestWarningInterval: 0;\n    readonly globalRequestsPerSecond: 50;\n    readonly offset: 50;\n    readonly rejectOnRateLimit: null;\n    readonly retries: 3;\n    readonly timeout: 15000;\n    readonly userAgentAppendix: string;\n    readonly version: \"10\";\n    readonly hashSweepInterval: 14400000;\n    readonly hashLifetime: 86400000;\n    readonly handlerSweepInterval: 3600000;\n    readonly makeRequest: (url: string, init: "
            },
            {
              "kind": "Reference",
              "text": "RequestInit_2",
              "canonicalReference": "undici!RequestInit:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResponseLike",
              "canonicalReference": "@discordjs/rest!ResponseLike:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultRestOptions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!DefaultUserAgent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultUserAgent: "
            },
            {
              "kind": "Content",
              "text": "`DiscordBot (https://discord.js.org, ${string})`"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultUserAgent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!DefaultUserAgentAppendix:var",
          "docComment": "/**\n * The default string to append onto the user agent.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultUserAgentAppendix: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultUserAgentAppendix",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!DiscordAPIError:class",
          "docComment": "/**\n * Represents an API error returned by Discord\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DiscordAPIError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "DiscordAPIError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!DiscordAPIError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DiscordAPIError` class\n *\n * @param rawError - The error reported by Discord\n *\n * @param code - The error code reported by Discord\n *\n * @param status - The status code of the response\n *\n * @param method - The method of the request that erred\n *\n * @param url - The url of the request that erred\n *\n * @param bodyData - The unparsed data for the request that errored\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rawError: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordErrorData",
                  "canonicalReference": "@discordjs/rest!DiscordErrorData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthErrorData",
                  "canonicalReference": "@discordjs/rest!OAuthErrorData:interface"
                },
                {
                  "kind": "Content",
                  "text": ", code: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ", status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bodyData: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalRequest",
                  "canonicalReference": "@discordjs/rest!InternalRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'body' | 'files'>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rawError",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "status",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "method",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bodyData",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 17
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#name:member",
              "docComment": "/**\n * The name of the error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get name(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#rawError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rawError: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordErrorData",
                  "canonicalReference": "@discordjs/rest!DiscordErrorData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthErrorData",
                  "canonicalReference": "@discordjs/rest!OAuthErrorData:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rawError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#requestBody:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestBody: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestBody",
                  "canonicalReference": "@discordjs/rest!RequestBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestBody",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!DiscordAPIError#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!DiscordErrorData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface DiscordErrorData "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "DiscordErrorData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!DiscordErrorData#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!DiscordErrorData#errors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errors?: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordError",
                  "canonicalReference": "@discordjs/rest!~DiscordError:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "errors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!DiscordErrorData#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!HandlerRequestData:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type HandlerRequestData = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InternalRequest",
              "canonicalReference": "@discordjs/rest!InternalRequest:interface"
            },
            {
              "kind": "Content",
              "text": ", 'auth' | 'body' | 'files' | 'signal'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "HandlerRequestData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!HTTPError:class",
          "docComment": "/**\n * Represents a HTTP error\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HTTPError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "HTTPError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!HTTPError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `HTTPError` class\n *\n * @param status - The status code of the response\n *\n * @param statusText - The status text of the response\n *\n * @param method - The method of the request that erred\n *\n * @param url - The url of the request that erred\n *\n * @param bodyData - The unparsed data for the request that errored\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", statusText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bodyData: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalRequest",
                  "canonicalReference": "@discordjs/rest!InternalRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'body' | 'files'>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "status",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "statusText",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "method",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bodyData",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 13
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!HTTPError#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!HTTPError#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!HTTPError#requestBody:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestBody: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestBody",
                  "canonicalReference": "@discordjs/rest!RequestBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestBody",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!HTTPError#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!HTTPError#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!ImageExtension:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ImageExtension = "
            },
            {
              "kind": "Content",
              "text": "(typeof "
            },
            {
              "kind": "Reference",
              "text": "ALLOWED_EXTENSIONS",
              "canonicalReference": "@discordjs/rest!ALLOWED_EXTENSIONS:var"
            },
            {
              "kind": "Content",
              "text": ")[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "ImageExtension",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!ImageSize:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ImageSize = "
            },
            {
              "kind": "Content",
              "text": "(typeof "
            },
            {
              "kind": "Reference",
              "text": "ALLOWED_SIZES",
              "canonicalReference": "@discordjs/rest!ALLOWED_SIZES:var"
            },
            {
              "kind": "Content",
              "text": ")[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "ImageSize",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!ImageURLOptions:interface",
          "docComment": "/**\n * The options used for image URLs with animated content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface ImageURLOptions extends "
            },
            {
              "kind": "Reference",
              "text": "BaseImageURLOptions",
              "canonicalReference": "@discordjs/rest!BaseImageURLOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "ImageURLOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!ImageURLOptions#forceStatic:member",
              "docComment": "/**\n * Whether or not to prefer the static version of an image asset.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceStatic?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "forceStatic",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!InvalidRequestWarningData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface InvalidRequestWarningData "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "InvalidRequestWarningData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!InvalidRequestWarningData#count:member",
              "docComment": "/**\n * Number of invalid requests that have been made in the window\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!InvalidRequestWarningData#remainingTime:member",
              "docComment": "/**\n * Time in milliseconds remaining before the count resets\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remainingTime: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remainingTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!MakeURLOptions:interface",
          "docComment": "/**\n * The options to use when making a CDN URL\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface MakeURLOptions "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "MakeURLOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!MakeURLOptions#allowedExtensions:member",
              "docComment": "/**\n * The allowed extensions that can be used\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowedExtensions?: "
                },
                {
                  "kind": "Content",
                  "text": "readonly string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowedExtensions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!MakeURLOptions#extension:member",
              "docComment": "/**\n * The extension to use for the image URL\n *\n * @defaultValue\n *\n * `'webp'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extension?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extension",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!MakeURLOptions#size:member",
              "docComment": "/**\n * The size specified in the image URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageSize",
                  "canonicalReference": "@discordjs/rest!ImageSize:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/rest!makeURLSearchParams:function(1)",
          "docComment": "/**\n * Creates and populates an URLSearchParams instance from an object, stripping out null and undefined values, while also coercing non-strings to strings.\n *\n * @param options - The options to use\n *\n * @returns A populated URLSearchParams instance\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function makeURLSearchParams<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "URLSearchParams_2",
              "canonicalReference": "!\"\\\"url\\\"\".URLSearchParams:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "makeURLSearchParams"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!OAuthErrorData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface OAuthErrorData "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "OAuthErrorData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!OAuthErrorData#error_description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error_description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error_description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!OAuthErrorData#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!OverwrittenMimeTypes:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "OverwrittenMimeTypes: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly 'image/apng': \"image/png\";\n}"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "OverwrittenMimeTypes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/rest!parseResponse:function(1)",
          "docComment": "/**\n * Converts the response to usable data\n *\n * @param res - The fetch response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseResponse(res: "
            },
            {
              "kind": "Reference",
              "text": "ResponseLike",
              "canonicalReference": "@discordjs/rest!ResponseLike:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "parseResponse"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RateLimitData:interface",
          "docComment": "/**\n * Data emitted on `RESTEvents.RateLimited`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RateLimitData "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RateLimitData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#global:member",
              "docComment": "/**\n * Whether the rate limit that was reached was the global limit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "global: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "global",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#hash:member",
              "docComment": "/**\n * The bucket hash for this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#limit:member",
              "docComment": "/**\n * The amount of requests we can perform before locking requests\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "limit: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "limit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#majorParameter:member",
              "docComment": "/**\n * The major parameter of the route\n *\n * For example, in `/channels/x`, this will be `x`. If there is no major parameter (e.g: `/bot/gateway`) this will be `global`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "majorParameter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "majorParameter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#method:member",
              "docComment": "/**\n * The HTTP method being performed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#route:member",
              "docComment": "/**\n * The route being hit in this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "route: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "route",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#timeToReset:member",
              "docComment": "/**\n * The time, in milliseconds, until the request-lock is reset\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeToReset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeToReset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RateLimitData#url:member",
              "docComment": "/**\n * The full URL for this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!RateLimitError:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RateLimitError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "RateLimitData",
              "canonicalReference": "@discordjs/rest!RateLimitData:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RateLimitError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!RateLimitError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RateLimitError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ timeToReset, limit, method, hash, url, route, majorParameter, global }: "
                },
                {
                  "kind": "Reference",
                  "text": "RateLimitData",
                  "canonicalReference": "@discordjs/rest!RateLimitData:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ timeToReset, limit, method, hash, url, route, majorParameter, global }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#global:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "global: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "global",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#hash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#limit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "limit: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "limit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#majorParameter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "majorParameter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "majorParameter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#method:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "method: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#name:member",
              "docComment": "/**\n * The name of the error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get name(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#route:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "route: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "route",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#timeToReset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeToReset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeToReset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RateLimitError#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!RateLimitQueueFilter:type",
          "docComment": "/**\n * A function that determines whether the rate limit hit should throw an Error\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RateLimitQueueFilter = "
            },
            {
              "kind": "Content",
              "text": "(rateLimitData: "
            },
            {
              "kind": "Reference",
              "text": "RateLimitData",
              "canonicalReference": "@discordjs/rest!RateLimitData:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean> | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RateLimitQueueFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RawFile:interface",
          "docComment": "/**\n * Represents a file to be added to the request\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RawFile "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RawFile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RawFile#contentType:member",
              "docComment": "/**\n * Content-Type of the file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentType?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RawFile#data:member",
              "docComment": "/**\n * The actual data for the file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | boolean | number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RawFile#key:member",
              "docComment": "/**\n * An explicit key to use for key of the formdata field for this file. When not provided, the index of the file in the files array is used in the form `files[${index}]`. If you wish to alter the placeholder snowflake, you must provide this property in the same form (`files[${placeholder}]`)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RawFile#name:member",
              "docComment": "/**\n * The name of the file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RequestBody:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RequestBody "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RequestBody",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestBody#files:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "files: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "files",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestBody#json:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "json: "
                },
                {
                  "kind": "Content",
                  "text": "unknown | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "json",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RequestData:interface",
          "docComment": "/**\n * Represents possible data to be given to an endpoint\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RequestData "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RequestData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#appendToFormData:member",
              "docComment": "/**\n * Whether to append JSON data to form data instead of `payload_json` when sending files\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "appendToFormData?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "appendToFormData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#auth:member",
              "docComment": "/**\n * If this request needs the `Authorization` header\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "auth?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "auth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#authPrefix:member",
              "docComment": "/**\n * The authorization prefix to use for this request, useful if you use this with bearer tokens\n *\n * @defaultValue\n *\n * `'Bot'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authPrefix?: "
                },
                {
                  "kind": "Content",
                  "text": "'Bearer' | 'Bot'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "authPrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#body:member",
              "docComment": "/**\n * The body to send to this request. If providing as BodyInit, set `passThroughBody: true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "body?: "
                },
                {
                  "kind": "Reference",
                  "text": "BodyInit_2",
                  "canonicalReference": "undici!BodyInit:type"
                },
                {
                  "kind": "Content",
                  "text": " | unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#dispatcher:member",
              "docComment": "/**\n * The {@link https://undici.nodejs.org/#/docs/api/Agent | Agent} to use for the request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatcher?: "
                },
                {
                  "kind": "Reference",
                  "text": "Agent",
                  "canonicalReference": "undici!Agent:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dispatcher",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#files:member",
              "docComment": "/**\n * Files to be attached to this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "files",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#headers:member",
              "docComment": "/**\n * Additional headers to add to this request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#passThroughBody:member",
              "docComment": "/**\n * Whether to pass-through the body property directly to `fetch()`. <warn>This only applies when files is NOT present</warn>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "passThroughBody?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "passThroughBody",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#query:member",
              "docComment": "/**\n * Query string parameters to append to the called endpoint\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query?: "
                },
                {
                  "kind": "Reference",
                  "text": "URLSearchParams",
                  "canonicalReference": "!URLSearchParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#reason:member",
              "docComment": "/**\n * Reason to show in the audit logs\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#signal:member",
              "docComment": "/**\n * The signal to abort the queue entry or the REST call, where applicable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signal?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignal",
                  "canonicalReference": "!AbortSignal:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "signal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestData#versioned:member",
              "docComment": "/**\n * If this request should be versioned\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "versioned?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "versioned",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RequestHeaders:interface",
          "docComment": "/**\n * Possible headers for an API call\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RequestHeaders "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RequestHeaders",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestHeaders#\"User-Agent\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'User-Agent': "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"User-Agent\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestHeaders#\"X-Audit-Log-Reason\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'X-Audit-Log-Reason'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "\"X-Audit-Log-Reason\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RequestHeaders#Authorization:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Authorization?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "Authorization",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!RequestManager:class",
          "docComment": "/**\n * Represents the class that manages handlers for endpoints\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RequestManager extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RestEventsMap",
              "canonicalReference": "@discordjs/rest!RestEventsMap:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RequestManager",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!RequestManager:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RequestManager` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTOptions",
                  "canonicalReference": "@discordjs/rest!RESTOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#agent:member",
              "docComment": "/**\n * The {@link https://undici.nodejs.org/#/docs/api/Agent | Agent} for all requests performed by this manager.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "agent: "
                },
                {
                  "kind": "Reference",
                  "text": "Dispatcher",
                  "canonicalReference": "undici!Dispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "agent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!RequestManager#clearHandlerSweeper:member(1)",
              "docComment": "/**\n * Stops the request handler sweeping interval\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearHandlerSweeper(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "clearHandlerSweeper"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!RequestManager#clearHashSweeper:member(1)",
              "docComment": "/**\n * Stops the hash sweeping interval\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearHashSweeper(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "clearHashSweeper"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#globalDelay:member",
              "docComment": "/**\n * The promise used to wait out the global rate limit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalDelay: "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "globalDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#globalRemaining:member",
              "docComment": "/**\n * The number of requests remaining in the global bucket\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalRemaining: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "globalRemaining",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#globalReset:member",
              "docComment": "/**\n * The timestamp at which the global bucket resets\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalReset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "globalReset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#handlers:member",
              "docComment": "/**\n * Request handlers created from the bucket hash and the major parameters\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly handlers: "
                },
                {
                  "kind": "Reference",
                  "text": "Collection",
                  "canonicalReference": "@discordjs/collection!Collection:class"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "IHandler",
                  "canonicalReference": "@discordjs/rest!~IHandler:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handlers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#hashes:member",
              "docComment": "/**\n * API bucket hashes that are cached from provided routes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hashes: "
                },
                {
                  "kind": "Reference",
                  "text": "Collection",
                  "canonicalReference": "@discordjs/collection!Collection:class"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "HashData",
                  "canonicalReference": "@discordjs/rest!HashData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hashes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!RequestManager#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTOptions",
                  "canonicalReference": "@discordjs/rest!RESTOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!RequestManager#queueRequest:member(1)",
              "docComment": "/**\n * Queues a request to be sent\n *\n * @param request - All the information needed to make a request\n *\n * @returns The response from the api request\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queueRequest(request: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalRequest",
                  "canonicalReference": "@discordjs/rest!InternalRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResponseLike",
                  "canonicalReference": "@discordjs/rest!ResponseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "request",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "queueRequest"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!RequestManager#setAgent:member(1)",
              "docComment": "/**\n * Sets the default agent to use for requests performed by this manager\n *\n * @param agent - The agent to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAgent(agent: "
                },
                {
                  "kind": "Reference",
                  "text": "Dispatcher",
                  "canonicalReference": "undici!Dispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "agent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setAgent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!RequestManager#setToken:member(1)",
              "docComment": "/**\n * Sets the authorization token that should be used for requests\n *\n * @param token - The authorization token to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setToken(token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setToken"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/rest!RequestMethod:enum",
          "docComment": "/**\n * Possible API methods to be used when doing requests\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RequestMethod "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RequestMethod",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RequestMethod.Delete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Delete = "
                },
                {
                  "kind": "Content",
                  "text": "\"DELETE\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Delete"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RequestMethod.Get:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Get = "
                },
                {
                  "kind": "Content",
                  "text": "\"GET\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Get"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RequestMethod.Patch:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Patch = "
                },
                {
                  "kind": "Content",
                  "text": "\"PATCH\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Patch"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RequestMethod.Post:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Post = "
                },
                {
                  "kind": "Content",
                  "text": "\"POST\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Post"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RequestMethod.Put:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Put = "
                },
                {
                  "kind": "Content",
                  "text": "\"PUT\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Put"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!ResponseLike:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface ResponseLike extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Response_2",
              "canonicalReference": "undici!Response:class"
            },
            {
              "kind": "Content",
              "text": ", 'arrayBuffer' | 'bodyUsed' | 'headers' | 'json' | 'ok' | 'status' | 'statusText' | 'text'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "ResponseLike",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!ResponseLike#body:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "body: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "!\"\\\"stream\\\"\".internal.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ReadableStream_2",
                  "canonicalReference": "!\"\\\"stream/web\\\"\".ReadableStream:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/rest!REST:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class REST extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RestEventsMap",
              "canonicalReference": "@discordjs/rest!RestEventsMap:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "REST",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/rest!REST:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `REST` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTOptions",
                  "canonicalReference": "@discordjs/rest!RESTOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!REST#cdn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly cdn: "
                },
                {
                  "kind": "Reference",
                  "text": "CDN",
                  "canonicalReference": "@discordjs/rest!CDN:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cdn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#delete:member(1)",
              "docComment": "/**\n * Runs a delete request from the api\n *\n * @param fullRoute - The full route to query\n *\n * @param options - Optional request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(fullRoute: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestData",
                  "canonicalReference": "@discordjs/rest!RequestData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fullRoute",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#get:member(1)",
              "docComment": "/**\n * Runs a get request from the api\n *\n * @param fullRoute - The full route to query\n *\n * @param options - Optional request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(fullRoute: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestData",
                  "canonicalReference": "@discordjs/rest!RequestData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fullRoute",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#getAgent:member(1)",
              "docComment": "/**\n * Gets the agent set for this instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAgent(): "
                },
                {
                  "kind": "Reference",
                  "text": "Dispatcher",
                  "canonicalReference": "undici!Dispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAgent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#patch:member(1)",
              "docComment": "/**\n * Runs a patch request from the api\n *\n * @param fullRoute - The full route to query\n *\n * @param options - Optional request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "patch(fullRoute: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestData",
                  "canonicalReference": "@discordjs/rest!RequestData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fullRoute",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "patch"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#post:member(1)",
              "docComment": "/**\n * Runs a post request from the api\n *\n * @param fullRoute - The full route to query\n *\n * @param options - Optional request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "post(fullRoute: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestData",
                  "canonicalReference": "@discordjs/rest!RequestData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fullRoute",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "post"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#put:member(1)",
              "docComment": "/**\n * Runs a put request from the api\n *\n * @param fullRoute - The full route to query\n *\n * @param options - Optional request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "put(fullRoute: "
                },
                {
                  "kind": "Reference",
                  "text": "RouteLike",
                  "canonicalReference": "@discordjs/rest!RouteLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestData",
                  "canonicalReference": "@discordjs/rest!RequestData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fullRoute",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "put"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#raw:member(1)",
              "docComment": "/**\n * Runs a request from the API, yielding the raw Response object\n *\n * @param options - Request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "raw(options: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalRequest",
                  "canonicalReference": "@discordjs/rest!InternalRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResponseLike",
                  "canonicalReference": "@discordjs/rest!ResponseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "raw"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#request:member(1)",
              "docComment": "/**\n * Runs a request from the api\n *\n * @param options - Request options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request(options: "
                },
                {
                  "kind": "Reference",
                  "text": "InternalRequest",
                  "canonicalReference": "@discordjs/rest!InternalRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "request"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/rest!REST#requestManager:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly requestManager: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestManager",
                  "canonicalReference": "@discordjs/rest!RequestManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#setAgent:member(1)",
              "docComment": "/**\n * Sets the default agent to use for requests performed by this instance\n *\n * @param agent - Sets the agent to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAgent(agent: "
                },
                {
                  "kind": "Reference",
                  "text": "Dispatcher",
                  "canonicalReference": "undici!Dispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "agent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setAgent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/rest!REST#setToken:member(1)",
              "docComment": "/**\n * Sets the authorization token that should be used for requests\n *\n * @param token - The authorization token to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setToken(token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setToken"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/rest!RESTEvents:enum",
          "docComment": "/**\n * The events that the REST manager emits\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RESTEvents "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RESTEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.Debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Debug = "
                },
                {
                  "kind": "Content",
                  "text": "\"restDebug\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Debug"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.HandlerSweep:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HandlerSweep = "
                },
                {
                  "kind": "Content",
                  "text": "\"handlerSweep\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "HandlerSweep"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.HashSweep:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HashSweep = "
                },
                {
                  "kind": "Content",
                  "text": "\"hashSweep\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "HashSweep"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.InvalidRequestWarning:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidRequestWarning = "
                },
                {
                  "kind": "Content",
                  "text": "\"invalidRequestWarning\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidRequestWarning"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.RateLimited:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RateLimited = "
                },
                {
                  "kind": "Content",
                  "text": "\"rateLimited\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RateLimited"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/rest!RESTEvents.Response:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Response = "
                },
                {
                  "kind": "Content",
                  "text": "\"response\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Response"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RestEvents:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RestEvents "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RestEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#handlerSweep:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handlerSweep: "
                },
                {
                  "kind": "Content",
                  "text": "[sweptHandlers: "
                },
                {
                  "kind": "Reference",
                  "text": "Collection",
                  "canonicalReference": "@discordjs/collection!Collection:class"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "IHandler",
                  "canonicalReference": "@discordjs/rest!~IHandler:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handlerSweep",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#hashSweep:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hashSweep: "
                },
                {
                  "kind": "Content",
                  "text": "[sweptHashes: "
                },
                {
                  "kind": "Reference",
                  "text": "Collection",
                  "canonicalReference": "@discordjs/collection!Collection:class"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "HashData",
                  "canonicalReference": "@discordjs/rest!HashData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hashSweep",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#invalidRequestWarning:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalidRequestWarning: "
                },
                {
                  "kind": "Content",
                  "text": "[invalidRequestInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "InvalidRequestWarningData",
                  "canonicalReference": "@discordjs/rest!InvalidRequestWarningData:interface"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "invalidRequestWarning",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#rateLimited:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rateLimited: "
                },
                {
                  "kind": "Content",
                  "text": "[rateLimitInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "RateLimitData",
                  "canonicalReference": "@discordjs/rest!RateLimitData:interface"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rateLimited",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#response:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response: "
                },
                {
                  "kind": "Content",
                  "text": "[request: "
                },
                {
                  "kind": "Reference",
                  "text": "APIRequest",
                  "canonicalReference": "@discordjs/rest!APIRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ", response: "
                },
                {
                  "kind": "Reference",
                  "text": "ResponseLike",
                  "canonicalReference": "@discordjs/rest!ResponseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "response",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RestEvents#restDebug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "restDebug: "
                },
                {
                  "kind": "Content",
                  "text": "[info: string]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "restDebug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!RestEventsMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RestEventsMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof "
            },
            {
              "kind": "Reference",
              "text": "RestEvents",
              "canonicalReference": "@discordjs/rest!RestEvents:interface"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "RestEvents",
              "canonicalReference": "@discordjs/rest!RestEvents:interface"
            },
            {
              "kind": "Content",
              "text": "[K];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RestEventsMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/rest!RESTOptions:interface",
          "docComment": "/**\n * Options to be passed when creating the REST instance\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RESTOptions "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RESTOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#agent:member",
              "docComment": "/**\n * The agent to set globally\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "agent: "
                },
                {
                  "kind": "Reference",
                  "text": "Dispatcher",
                  "canonicalReference": "undici!Dispatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "agent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#api:member",
              "docComment": "/**\n * The base api path, without version\n *\n * @defaultValue\n *\n * `'https://discord.com/api'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "api: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "api",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#authPrefix:member",
              "docComment": "/**\n * The authorization prefix to use for requests, useful if you want to use bearer tokens\n *\n * @defaultValue\n *\n * `'Bot'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authPrefix: "
                },
                {
                  "kind": "Content",
                  "text": "'Bearer' | 'Bot'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authPrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#cdn:member",
              "docComment": "/**\n * The cdn path\n *\n * @defaultValue\n *\n * `'https://cdn.discordapp.com'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cdn: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cdn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#globalRequestsPerSecond:member",
              "docComment": "/**\n * How many requests to allow sending per second (Infinity for unlimited, 50 for the standard global limit used by Discord)\n *\n * @defaultValue\n *\n * `50`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "globalRequestsPerSecond: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "globalRequestsPerSecond",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#handlerSweepInterval:member",
              "docComment": "/**\n * The amount of time in milliseconds that passes between each hash sweep. (defaults to 1h)\n *\n * @defaultValue\n *\n * `3_600_000`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handlerSweepInterval: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handlerSweepInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#hashLifetime:member",
              "docComment": "/**\n * The maximum amount of time a hash can exist in milliseconds without being hit with a request (defaults to 24h)\n *\n * @defaultValue\n *\n * `86_400_000`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hashLifetime: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hashLifetime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#hashSweepInterval:member",
              "docComment": "/**\n * The amount of time in milliseconds that passes between each hash sweep. (defaults to 4h)\n *\n * @defaultValue\n *\n * `14_400_000`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hashSweepInterval: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hashSweepInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#headers:member",
              "docComment": "/**\n * Additional headers to send for all API requests\n *\n * @defaultValue\n *\n * `{}`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#invalidRequestWarningInterval:member",
              "docComment": "/**\n * The number of invalid REST requests (those that return 401, 403, or 429) in a 10 minute window between emitted warnings (0 for no warnings). That is, if set to 500, warnings will be emitted at invalid request number 500, 1000, 1500, and so on.\n *\n * @defaultValue\n *\n * `0`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalidRequestWarningInterval: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "invalidRequestWarningInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#makeRequest:member(1)",
              "docComment": "/**\n * The method called to perform the actual HTTP request given a url and web `fetch` options For example, to use global fetch, simply provide `makeRequest: fetch`\n *\n * @defaultValue\n *\n * `undici.request`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "makeRequest(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", init: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestInit_2",
                  "canonicalReference": "undici!RequestInit:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResponseLike",
                  "canonicalReference": "@discordjs/rest!ResponseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "init",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "makeRequest"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#offset:member",
              "docComment": "/**\n * The extra offset to add to rate limits in milliseconds\n *\n * @defaultValue\n *\n * `50`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#rejectOnRateLimit:member",
              "docComment": "/**\n * Determines how rate limiting and pre-emptive throttling should be handled. When an array of strings, each element is treated as a prefix for the request route (e.g. `/channels` to match any route starting with `/channels` such as `/channels/:id/messages`) for which to throw {@link RateLimitError}s. All other request routes will be queued normally\n *\n * @defaultValue\n *\n * `null`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejectOnRateLimit: "
                },
                {
                  "kind": "Reference",
                  "text": "RateLimitQueueFilter",
                  "canonicalReference": "@discordjs/rest!RateLimitQueueFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | string[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rejectOnRateLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#retries:member",
              "docComment": "/**\n * The number of retries for errors with the 500 code, or errors that timeout\n *\n * @defaultValue\n *\n * `3`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retries: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "retries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#timeout:member",
              "docComment": "/**\n * The time to wait in milliseconds before a request is aborted\n *\n * @defaultValue\n *\n * `15_000`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#userAgentAppendix:member",
              "docComment": "/**\n * Extra information to add to the user agent\n *\n * @defaultValue\n *\n * DefaultUserAgentAppendix\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userAgentAppendix: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userAgentAppendix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/rest!RESTOptions#version:member",
              "docComment": "/**\n * The version of the API to use\n *\n * @defaultValue\n *\n * `'10'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!RouteLike:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RouteLike = "
            },
            {
              "kind": "Content",
              "text": "`/${string}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RouteLike",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/rest!StickerExtension:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StickerExtension = "
            },
            {
              "kind": "Content",
              "text": "(typeof "
            },
            {
              "kind": "Reference",
              "text": "ALLOWED_STICKER_EXTENSIONS",
              "canonicalReference": "@discordjs/rest!ALLOWED_STICKER_EXTENSIONS:var"
            },
            {
              "kind": "Content",
              "text": ")[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "StickerExtension",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/rest!version:var",
          "docComment": "/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/rest/#readme | @discordjs/rest} version that you are currently using.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "version: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "version",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
