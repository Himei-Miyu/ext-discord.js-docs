{
  "metadata": {
    "toolPackage": "@discordjs/api-extractor",
    "toolVersion": "7.38.1",
    "schemaVersion": 1012,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/formatters",
  "kind": "Package",
  "canonicalReference": "@discordjs/formatters!",
  "docComment": "",
  "name": "@discordjs/formatters",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/formatters!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!blockQuote:function(1)",
          "docComment": "/**\n * Formats the content into a block quote.\n *\n * @remarks\n *\n * This needs to be at the start of the line for Discord to format it.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "blockQuote",
              "canonicalReference": "@discordjs/formatters!blockQuote"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`>>> ${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 97,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "blockQuote"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!bold:function(1)",
          "docComment": "/**\n * Formats the content into bold text.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "bold",
              "canonicalReference": "@discordjs/formatters!bold"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`**${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}**`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 55,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "bold"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelLink:function(1)",
          "docComment": "/**\n * Formats a channel link for a direct message channel.\n *\n * @param channelId - The channel's id\n *\n * @typeParam ChannelId - This is inferred by the supplied channel id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "channelLink",
              "canonicalReference": "@discordjs/formatters!channelLink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "channelId",
              "canonicalReference": "@discordjs/formatters!~channelId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/@me/${"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 341,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChannelId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelLink:function(2)",
          "docComment": "/**\n * Formats a channel link for a guild channel.\n *\n * @param channelId - The channel's id\n *\n * @param guildId - The guild's id\n *\n * @typeParam ChannelId - This is inferred by the supplied channel id\n *\n * @typeParam GuildId - This is inferred by the supplied guild id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "channelLink",
              "canonicalReference": "@discordjs/formatters!channelLink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "channelId",
              "canonicalReference": "@discordjs/formatters!~channelId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "guildId",
              "canonicalReference": "@discordjs/formatters!~guildId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/${"
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": "}/${"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 353,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "guildId",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChannelId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "GuildId",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelMention:function(1)",
          "docComment": "/**\n * Formats a channel id into a channel mention.\n *\n * @param channelId - The channel id to format\n *\n * @typeParam ChannelId - This is inferred by the supplied channel id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "channelMention",
              "canonicalReference": "@discordjs/formatters!channelMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "channelId",
              "canonicalReference": "@discordjs/formatters!~channelId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<#${"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 203,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChannelId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(1)",
          "docComment": "/**\n * Formats an application command name, subcommand group name, subcommand name, and id into an application command mention.\n *\n * @param commandName - The application command name to format\n *\n * @param subcommandGroupName - The subcommand group name to format\n *\n * @param subcommandName - The subcommand name to format\n *\n * @param commandId - The application command id to format\n *\n * @typeParam CommandName - This is inferred by the supplied command name\n *\n * @typeParam SubcommandGroupName - This is inferred by the supplied subcommand group name\n *\n * @typeParam SubcommandName - This is inferred by the supplied subcommand name\n *\n * @typeParam CommandId - This is inferred by the supplied command id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "chatInputApplicationCommandMention",
              "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SubcommandGroupName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "commandName",
              "canonicalReference": "@discordjs/formatters!~commandName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "subcommandGroupName",
              "canonicalReference": "@discordjs/formatters!~subcommandGroupName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "SubcommandGroupName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "subcommandName",
              "canonicalReference": "@discordjs/formatters!~subcommandName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "commandId",
              "canonicalReference": "@discordjs/formatters!~commandId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": "} ${"
            },
            {
              "kind": "Reference",
              "text": "SubcommandGroupName"
            },
            {
              "kind": "Content",
              "text": "} ${"
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": "}:${"
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 229,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 35,
            "endIndex": 44
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "subcommandGroupName",
              "parameterTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 26
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "subcommandName",
              "parameterTypeTokenRange": {
                "startIndex": 29,
                "endIndex": 30
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 33,
                "endIndex": 34
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CommandName",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SubcommandGroupName",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SubcommandName",
              "constraintTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CommandId",
              "constraintTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(2)",
          "docComment": "/**\n * Formats an application command name, subcommand name, and id into an application command mention.\n *\n * @param commandName - The application command name to format\n *\n * @param subcommandName - The subcommand name to format\n *\n * @param commandId - The application command id to format\n *\n * @typeParam CommandName - This is inferred by the supplied command name\n *\n * @typeParam SubcommandName - This is inferred by the supplied subcommand name\n *\n * @typeParam CommandId - This is inferred by the supplied command id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "chatInputApplicationCommandMention",
              "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "commandName",
              "canonicalReference": "@discordjs/formatters!~commandName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "subcommandName",
              "canonicalReference": "@discordjs/formatters!~subcommandName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "commandId",
              "canonicalReference": "@discordjs/formatters!~commandId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": "} ${"
            },
            {
              "kind": "Reference",
              "text": "SubcommandName"
            },
            {
              "kind": "Content",
              "text": "}:${"
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 251,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 27,
            "endIndex": 34
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "subcommandName",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 26
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CommandName",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SubcommandName",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CommandId",
              "constraintTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(3)",
          "docComment": "/**\n * Formats an application command name and id into an application command mention.\n *\n * @param commandName - The application command name to format\n *\n * @param commandId - The application command id to format\n *\n * @typeParam CommandName - This is inferred by the supplied command name\n *\n * @typeParam CommandId - This is inferred by the supplied command id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "chatInputApplicationCommandMention",
              "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "commandName",
              "canonicalReference": "@discordjs/formatters!~commandName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "commandId",
              "canonicalReference": "@discordjs/formatters!~commandId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${"
            },
            {
              "kind": "Reference",
              "text": "CommandName"
            },
            {
              "kind": "Content",
              "text": "}:${"
            },
            {
              "kind": "Reference",
              "text": "CommandId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 269,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "CommandName",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CommandId",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!codeBlock:function(1)",
          "docComment": "/**\n * Wraps the content inside a code block with no language.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "codeBlock",
              "canonicalReference": "@discordjs/formatters!codeBlock"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`\\`\\`\\n${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}\\n\\`\\`\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 10,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "codeBlock"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!codeBlock:function(2)",
          "docComment": "/**\n * Wraps the content inside a code block with the specified language.\n *\n * @param language - The language for the code block\n *\n * @param content - The content to wrap\n *\n * @typeParam Language - This is inferred by the supplied language\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "codeBlock",
              "canonicalReference": "@discordjs/formatters!codeBlock"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Language"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "language",
              "canonicalReference": "@discordjs/formatters!~language"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Language"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`\\`\\`${"
            },
            {
              "kind": "Reference",
              "text": "Language"
            },
            {
              "kind": "Content",
              "text": "}\\n${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}\\n\\`\\`\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 20,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "language",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Language",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "codeBlock"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeBold:function(1)",
          "docComment": "/**\n * Escapes bold markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeBold",
              "canonicalReference": "@discordjs/formatters!escapeBold"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 231,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeBold"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeBulletedList:function(1)",
          "docComment": "/**\n * Escapes bulleted list characters in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeBulletedList",
              "canonicalReference": "@discordjs/formatters!escapeBulletedList"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 293,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeBulletedList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeCodeBlock:function(1)",
          "docComment": "/**\n * Escapes code block markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeCodeBlock",
              "canonicalReference": "@discordjs/formatters!escapeCodeBlock"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 195,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeCodeBlock"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeEscape:function(1)",
          "docComment": "/**\n * Escapes escape characters in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeEscape",
              "canonicalReference": "@discordjs/formatters!escapeEscape"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 275,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeEscape"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeHeading:function(1)",
          "docComment": "/**\n * Escapes heading characters in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeHeading",
              "canonicalReference": "@discordjs/formatters!escapeHeading"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 284,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeHeading"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeInlineCode:function(1)",
          "docComment": "/**\n * Escapes inline code markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeInlineCode",
              "canonicalReference": "@discordjs/formatters!escapeInlineCode"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 204,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeInlineCode"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeItalic:function(1)",
          "docComment": "/**\n * Escapes italic markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeItalic",
              "canonicalReference": "@discordjs/formatters!escapeItalic"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 213,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeItalic"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeMarkdown:function(1)",
          "docComment": "/**\n * Escapes any Discord-flavored markdown in a string.\n *\n * @param text - Content to escape\n *\n * @param options - Options for escaping the markdown\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeMarkdown",
              "canonicalReference": "@discordjs/formatters!escapeMarkdown"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "options",
              "canonicalReference": "@discordjs/formatters!~options"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "EscapeMarkdownOptions",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 111,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "name": "escapeMarkdown"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions:interface",
          "docComment": "/**\n * The options that affect what will be escaped.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EscapeMarkdownOptions",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 6,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "EscapeMarkdownOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#bold:member",
              "docComment": "/**\n * Whether to escape bold text.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "bold",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#bold"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 12,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bold",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#bulletedList:member",
              "docComment": "/**\n * Whether to escape bulleted lists.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "bulletedList",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#bulletedList"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 19,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bulletedList",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#codeBlock:member",
              "docComment": "/**\n * Whether to escape code blocks.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "codeBlock",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#codeBlock"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 26,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "codeBlock",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#codeBlockContent:member",
              "docComment": "/**\n * Whether to escape text inside code blocks.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "codeBlockContent",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#codeBlockContent"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 33,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "codeBlockContent",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#escape:member",
              "docComment": "/**\n * Whether to escape `\\`.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "escape",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#escape"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 40,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "escape",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#heading:member",
              "docComment": "/**\n * Whether to escape headings.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "heading",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#heading"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 47,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "heading",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#inlineCode:member",
              "docComment": "/**\n * Whether to escape inline code.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "inlineCode",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#inlineCode"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 54,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineCode",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#inlineCodeContent:member",
              "docComment": "/**\n * Whether to escape text inside inline code.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "inlineCodeContent",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#inlineCodeContent"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 61,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineCodeContent",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#italic:member",
              "docComment": "/**\n * Whether to escape italics.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "italic",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#italic"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 67,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "italic",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#maskedLink:member",
              "docComment": "/**\n * Whether to escape masked links.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maskedLink",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#maskedLink"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 74,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maskedLink",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#numberedList:member",
              "docComment": "/**\n * Whether to escape numbered lists.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "numberedList",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#numberedList"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 81,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "numberedList",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#spoiler:member",
              "docComment": "/**\n * Whether to escape spoilers.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "spoiler",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#spoiler"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 88,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "spoiler",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#strikethrough:member",
              "docComment": "/**\n * Whether to escape strikethroughs.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "strikethrough",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#strikethrough"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 95,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strikethrough",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#underline:member",
              "docComment": "/**\n * Whether to escape underlines.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "underline",
                  "canonicalReference": "@discordjs/formatters!EscapeMarkdownOptions#underline"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 102,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "underline",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeMaskedLink:function(1)",
          "docComment": "/**\n * Escapes masked link characters in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeMaskedLink",
              "canonicalReference": "@discordjs/formatters!escapeMaskedLink"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 311,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeMaskedLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeNumberedList:function(1)",
          "docComment": "/**\n * Escapes numbered list characters in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeNumberedList",
              "canonicalReference": "@discordjs/formatters!escapeNumberedList"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 302,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeNumberedList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeSpoiler:function(1)",
          "docComment": "/**\n * Escapes spoiler markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeSpoiler",
              "canonicalReference": "@discordjs/formatters!escapeSpoiler"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 266,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeSpoiler"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeStrikethrough:function(1)",
          "docComment": "/**\n * Escapes strikethrough markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeStrikethrough",
              "canonicalReference": "@discordjs/formatters!escapeStrikethrough"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 257,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeStrikethrough"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!escapeUnderline:function(1)",
          "docComment": "/**\n * Escapes underline markdown in a string.\n *\n * @param text - Content to escape\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "escapeUnderline",
              "canonicalReference": "@discordjs/formatters!escapeUnderline"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "text",
              "canonicalReference": "@discordjs/formatters!~text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/escapers.ts",
          "fileLine": 244,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "escapeUnderline"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/formatters!Faces:enum",
          "docComment": "/**\n * All the available faces from Discord's native slash commands.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "Faces",
              "canonicalReference": "@discordjs/formatters!Faces:enum"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 607,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "Faces",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Shrug:member",
              "docComment": "/**\n * `¯\\_(ツ)_/¯`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Shrug",
                  "canonicalReference": "@discordjs/formatters!Faces.Shrug:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\u00AF_(\\u30C4)_/\\u00AF\""
                }
              ],
              "fileLine": 612,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Shrug"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Tableflip:member",
              "docComment": "/**\n * `(╯°□°)╯︵ ┻━┻`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Tableflip",
                  "canonicalReference": "@discordjs/formatters!Faces.Tableflip:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"(\\u256F\\u00B0\\u25A1\\u00B0)\\u256F\\uFE35 \\u253B\\u2501\\u253B\""
                }
              ],
              "fileLine": 617,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Tableflip"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Unflip:member",
              "docComment": "/**\n * `┬─┬ノ( º _ ºノ)`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Unflip",
                  "canonicalReference": "@discordjs/formatters!Faces.Unflip:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\u252C\\u2500\\u252C\\u30CE( \\u00BA _ \\u00BA\\u30CE)\""
                }
              ],
              "fileLine": 622,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Unflip"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(1)",
          "docComment": "/**\n * Formats a non-animated emoji id into a fully qualified emoji identifier.\n *\n * @param emojiId - The emoji id to format\n *\n * @typeParam EmojiId - This is inferred by the supplied emoji id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "formatEmoji",
              "canonicalReference": "@discordjs/formatters!formatEmoji"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "emojiId",
              "canonicalReference": "@discordjs/formatters!~emojiId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "animated",
              "canonicalReference": "@discordjs/formatters!~animated"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Content",
              "text": "false"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<:_:${"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 305,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "EmojiId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(2)",
          "docComment": "/**\n * Formats an animated emoji id into a fully qualified emoji identifier.\n *\n * @param emojiId - The emoji id to format\n *\n * @param animated - Whether the emoji is animated\n *\n * @typeParam EmojiId - This is inferred by the supplied emoji id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "formatEmoji",
              "canonicalReference": "@discordjs/formatters!formatEmoji"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "emojiId",
              "canonicalReference": "@discordjs/formatters!~emojiId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "animated",
              "canonicalReference": "@discordjs/formatters!~animated"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Content",
              "text": "true"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<a:_:${"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 314,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "EmojiId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(3)",
          "docComment": "/**\n * Formats an emoji id into a fully qualified emoji identifier.\n *\n * @param emojiId - The emoji id to format\n *\n * @param animated - Whether the emoji is animated\n *\n * @typeParam EmojiId - This is inferred by the supplied emoji id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "formatEmoji",
              "canonicalReference": "@discordjs/formatters!formatEmoji"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "emojiId",
              "canonicalReference": "@discordjs/formatters!~emojiId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "animated",
              "canonicalReference": "@discordjs/formatters!~animated"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<:_:${"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": "}>` | `<a:_:${"
            },
            {
              "kind": "Reference",
              "text": "EmojiId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 323,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "EmojiId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/formatters!GuildNavigationMentions:enum",
          "docComment": "/**\n * All the available guild navigation mentions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "GuildNavigationMentions",
              "canonicalReference": "@discordjs/formatters!GuildNavigationMentions:enum"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 628,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "GuildNavigationMentions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Browse:member",
              "docComment": "/**\n * Browse Channels tab.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Browse",
                  "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Browse:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"<id:browse>\""
                }
              ],
              "fileLine": 632,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Browse"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Customize:member",
              "docComment": "/**\n * Customize tab with the server's {@link https://discord.com/developers/docs/resources/guild#guild-onboarding-object | onboarding prompts}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Customize",
                  "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Customize:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"<id:customize>\""
                }
              ],
              "fileLine": 636,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Customize"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Guide:member",
              "docComment": "/**\n * {@link https://support.discord.com/hc/articles/13497665141655 | Server Guide} tab.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Guide",
                  "canonicalReference": "@discordjs/formatters!GuildNavigationMentions.Guide:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"<id:guide>\""
                }
              ],
              "fileLine": 640,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Guide"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!heading:function(1)",
          "docComment": "/**\n * Formats the content into a heading level.\n *\n * @param content - The content to wrap\n *\n * @param level - The heading level\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "heading",
              "canonicalReference": "@discordjs/formatters!heading"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "level",
              "canonicalReference": "@discordjs/formatters!~level"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "HeadingLevel.One",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.One:member"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`# ${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 429,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "level",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "heading"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!heading:function(2)",
          "docComment": "/**\n * Formats the content into a heading level.\n *\n * @param content - The content to wrap\n *\n * @param level - The heading level\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "heading",
              "canonicalReference": "@discordjs/formatters!heading"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "level",
              "canonicalReference": "@discordjs/formatters!~level"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "HeadingLevel.Two",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.Two:member"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`## ${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 438,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "level",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "heading"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!heading:function(3)",
          "docComment": "/**\n * Formats the content into a heading level.\n *\n * @param content - The content to wrap\n *\n * @param level - The heading level\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "heading",
              "canonicalReference": "@discordjs/formatters!heading"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "level",
              "canonicalReference": "@discordjs/formatters!~level"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "HeadingLevel.Three",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.Three:member"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`### ${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 447,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "level",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "heading"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/formatters!HeadingLevel:enum",
          "docComment": "/**\n * The heading levels for expanded markdown.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "HeadingLevel",
              "canonicalReference": "@discordjs/formatters!HeadingLevel:enum"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 407,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "HeadingLevel",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.One:member",
              "docComment": "/**\n * The first heading level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "One",
                  "canonicalReference": "@discordjs/formatters!HeadingLevel.One:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "fileLine": 411,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "One"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.Three:member",
              "docComment": "/**\n * The third heading level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Three",
                  "canonicalReference": "@discordjs/formatters!HeadingLevel.Three:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "fileLine": 419,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Three"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!HeadingLevel.Two:member",
              "docComment": "/**\n * The second heading level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Two",
                  "canonicalReference": "@discordjs/formatters!HeadingLevel.Two:member"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "fileLine": 415,
              "fileColumn": 2,
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "name": "Two"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hideLinkEmbed:function(1)",
          "docComment": "/**\n * Wraps the URL into `<>` which stops it from embedding.\n *\n * @param url - The URL to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hideLinkEmbed",
              "canonicalReference": "@discordjs/formatters!hideLinkEmbed"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 107,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hideLinkEmbed"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hideLinkEmbed:function(2)",
          "docComment": "/**\n * Wraps the URL into `<>` which stops it from embedding.\n *\n * @param url - The URL to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hideLinkEmbed",
              "canonicalReference": "@discordjs/formatters!hideLinkEmbed"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<${"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 114,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "hideLinkEmbed"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(1)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL.\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hyperlink",
              "canonicalReference": "@discordjs/formatters!hyperlink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}](${"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "})`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 127,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(2)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL.\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @typeParam Content - This is inferred by the supplied content\n *\n * @typeParam Url - This is inferred by the supplied URL\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hyperlink",
              "canonicalReference": "@discordjs/formatters!hyperlink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}](${"
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": "})`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 137,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Url",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(3)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL with a custom tooltip.\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @param title - The title shown when hovering on the masked link\n *\n * @typeParam Content - This is inferred by the supplied content\n *\n * @typeParam Title - This is inferred by the supplied title\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hyperlink",
              "canonicalReference": "@discordjs/formatters!hyperlink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "title",
              "canonicalReference": "@discordjs/formatters!~title"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}](${"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "} \"${"
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": "}\")`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 151,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 23,
            "endIndex": 30
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "title",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Title",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(4)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL with a custom tooltip.\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @param title - The title shown when hovering on the masked link\n *\n * @typeParam Content - This is inferred by the supplied content\n *\n * @typeParam Url - This is inferred by the supplied URL\n *\n * @typeParam Title - This is inferred by the supplied title\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "hyperlink",
              "canonicalReference": "@discordjs/formatters!hyperlink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "url",
              "canonicalReference": "@discordjs/formatters!~url"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "title",
              "canonicalReference": "@discordjs/formatters!~title"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}](${"
            },
            {
              "kind": "Reference",
              "text": "Url"
            },
            {
              "kind": "Content",
              "text": "} \"${"
            },
            {
              "kind": "Reference",
              "text": "Title"
            },
            {
              "kind": "Content",
              "text": "}\")`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 167,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 27,
            "endIndex": 34
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "title",
              "parameterTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 26
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Url",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Title",
              "constraintTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!inlineCode:function(1)",
          "docComment": "/**\n * Wraps the content inside \\`backticks\\` which formats it as inline code.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "inlineCode",
              "canonicalReference": "@discordjs/formatters!inlineCode"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 35,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "inlineCode"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!italic:function(1)",
          "docComment": "/**\n * Formats the content into italic text.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "italic",
              "canonicalReference": "@discordjs/formatters!italic"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`_${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}_`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 45,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "italic"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!messageLink:function(1)",
          "docComment": "/**\n * Formats a message link for a direct message channel.\n *\n * @param channelId - The channel's id\n *\n * @param messageId - The message's id\n *\n * @typeParam ChannelId - This is inferred by the supplied channel id\n *\n * @typeParam MessageId - This is inferred by the supplied message id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "messageLink",
              "canonicalReference": "@discordjs/formatters!messageLink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "channelId",
              "canonicalReference": "@discordjs/formatters!~channelId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "messageId",
              "canonicalReference": "@discordjs/formatters!~messageId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/@me/${"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "}/${"
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 373,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "messageId",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChannelId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "MessageId",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "messageLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!messageLink:function(2)",
          "docComment": "/**\n * Formats a message link for a guild channel.\n *\n * @param channelId - The channel's id\n *\n * @param messageId - The message's id\n *\n * @param guildId - The guild's id\n *\n * @typeParam ChannelId - This is inferred by the supplied channel id\n *\n * @typeParam MessageId - This is inferred by the supplied message id\n *\n * @typeParam GuildId - This is inferred by the supplied guild id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "messageLink",
              "canonicalReference": "@discordjs/formatters!messageLink"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "channelId",
              "canonicalReference": "@discordjs/formatters!~channelId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "messageId",
              "canonicalReference": "@discordjs/formatters!~messageId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "guildId",
              "canonicalReference": "@discordjs/formatters!~guildId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/${"
            },
            {
              "kind": "Reference",
              "text": "GuildId"
            },
            {
              "kind": "Content",
              "text": "}/${"
            },
            {
              "kind": "Reference",
              "text": "ChannelId"
            },
            {
              "kind": "Content",
              "text": "}/${"
            },
            {
              "kind": "Reference",
              "text": "MessageId"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 388,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 27,
            "endIndex": 34
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "messageId",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "guildId",
              "parameterTypeTokenRange": {
                "startIndex": 25,
                "endIndex": 26
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ChannelId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "MessageId",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "GuildId",
              "constraintTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "messageLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!orderedList:function(1)",
          "docComment": "/**\n * Formats the elements in the array to an ordered list.\n *\n * @param list - The array of elements to list\n *\n * @param startNumber - The starting number for the list\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "orderedList",
              "canonicalReference": "@discordjs/formatters!orderedList"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "list",
              "canonicalReference": "@discordjs/formatters!~list"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "@discordjs/formatters!RecursiveArray:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "startNumber",
              "canonicalReference": "@discordjs/formatters!~startNumber"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 484,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "list",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "startNumber",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "name": "orderedList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!quote:function(1)",
          "docComment": "/**\n * Formats the content into a quote.\n *\n * @remarks\n *\n * This needs to be at the start of the line for Discord to format it.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "quote",
              "canonicalReference": "@discordjs/formatters!quote"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`> ${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 86,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "quote"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/formatters!RecursiveArray:type",
          "docComment": "/**\n * A type that recursively traverses into arrays.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "@discordjs/formatters!RecursiveArray:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ItemType"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "readonly ("
            },
            {
              "kind": "Reference",
              "text": "ItemType"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "@discordjs/formatters!RecursiveArray:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ItemType"
            },
            {
              "kind": "Content",
              "text": ">)[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 463,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "RecursiveArray",
          "typeParameters": [
            {
              "typeParameterName": "ItemType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 12
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!roleMention:function(1)",
          "docComment": "/**\n * Formats a role id into a role mention.\n *\n * @param roleId - The role id to format\n *\n * @typeParam RoleId - This is inferred by the supplied role id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "roleMention",
              "canonicalReference": "@discordjs/formatters!roleMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoleId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "roleId",
              "canonicalReference": "@discordjs/formatters!~roleId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RoleId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<@&${"
            },
            {
              "kind": "Reference",
              "text": "RoleId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 213,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roleId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RoleId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "roleMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!spoiler:function(1)",
          "docComment": "/**\n * Formats the content into a spoiler.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "spoiler",
              "canonicalReference": "@discordjs/formatters!spoiler"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`||${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}||`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 183,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "spoiler"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!strikethrough:function(1)",
          "docComment": "/**\n * Formats the content into strike-through text.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "strikethrough",
              "canonicalReference": "@discordjs/formatters!strikethrough"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`~~${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}~~`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 75,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "strikethrough"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(1)",
          "docComment": "/**\n * Formats a date into a short date-time string.\n *\n * @param date - The date to format. Defaults to the current time\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "time",
              "canonicalReference": "@discordjs/formatters!time"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "date",
              "canonicalReference": "@discordjs/formatters!~date"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${"
            },
            {
              "kind": "Reference",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 502,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true,
              "isRest": false
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(2)",
          "docComment": "/**\n * Formats a date given a format style.\n *\n * @param date - The date to format\n *\n * @param style - The style to use\n *\n * @typeParam Style - This is inferred by the supplied {@link TimestampStylesString}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "time",
              "canonicalReference": "@discordjs/formatters!time"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "TimestampStylesString",
              "canonicalReference": "@discordjs/formatters!TimestampStylesString:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "date",
              "canonicalReference": "@discordjs/formatters!~date"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "style",
              "canonicalReference": "@discordjs/formatters!~style"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${"
            },
            {
              "kind": "Reference",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": "}:${"
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 511,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "style",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Style",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(3)",
          "docComment": "/**\n * Formats the given timestamp into a short date-time string.\n *\n * @param seconds - A Unix timestamp in seconds\n *\n * @typeParam Seconds - This is inferred by the supplied timestamp\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "time",
              "canonicalReference": "@discordjs/formatters!time"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "seconds",
              "canonicalReference": "@discordjs/formatters!~seconds"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${"
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 519,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "seconds",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Seconds",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(4)",
          "docComment": "/**\n * Formats the given timestamp into a short date-time string.\n *\n * @param seconds - A Unix timestamp in seconds\n *\n * @param style - The style to use\n *\n * @typeParam Seconds - This is inferred by the supplied timestamp\n *\n * @typeParam Style - This is inferred by the supplied {@link TimestampStylesString}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "time",
              "canonicalReference": "@discordjs/formatters!time"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "TimestampStylesString",
              "canonicalReference": "@discordjs/formatters!TimestampStylesString:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "seconds",
              "canonicalReference": "@discordjs/formatters!~seconds"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "style",
              "canonicalReference": "@discordjs/formatters!~style"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${"
            },
            {
              "kind": "Reference",
              "text": "Seconds"
            },
            {
              "kind": "Content",
              "text": "}:${"
            },
            {
              "kind": "Reference",
              "text": "Style"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 529,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "seconds",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false,
              "isRest": false
            },
            {
              "parameterName": "style",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Seconds",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Style",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/formatters!TimestampStyles:var",
          "docComment": "/**\n * The {@link https://discord.com/developers/docs/reference#message-formatting-timestamp-styles | message formatting timestamp styles} supported by Discord.\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "TimestampStyles",
              "canonicalReference": "@discordjs/formatters!TimestampStyles"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "{  readonly "
            },
            {
              "kind": "Reference",
              "text": "ShortTime",
              "canonicalReference": "@discordjs/formatters!~__type#ShortTime"
            },
            {
              "kind": "Content",
              "text": ": \"t\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "LongTime",
              "canonicalReference": "@discordjs/formatters!~__type#LongTime"
            },
            {
              "kind": "Content",
              "text": ": \"T\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "ShortDate",
              "canonicalReference": "@discordjs/formatters!~__type#ShortDate"
            },
            {
              "kind": "Content",
              "text": ": \"d\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "LongDate",
              "canonicalReference": "@discordjs/formatters!~__type#LongDate"
            },
            {
              "kind": "Content",
              "text": ": \"D\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "ShortDateTime",
              "canonicalReference": "@discordjs/formatters!~__type#ShortDateTime"
            },
            {
              "kind": "Content",
              "text": ": \"f\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "LongDateTime",
              "canonicalReference": "@discordjs/formatters!~__type#LongDateTime"
            },
            {
              "kind": "Content",
              "text": ": \"F\";  readonly "
            },
            {
              "kind": "Reference",
              "text": "RelativeTime",
              "canonicalReference": "@discordjs/formatters!~__type#RelativeTime"
            },
            {
              "kind": "Content",
              "text": ": \"R\";}"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 547,
          "fileColumn": 14,
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TimestampStyles",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 17
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/formatters!TimestampStylesString:type",
          "docComment": "/**\n * The possible {@link TimestampStyles} values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type "
            },
            {
              "kind": "Reference",
              "text": "TimestampStylesString",
              "canonicalReference": "@discordjs/formatters!TimestampStylesString:type"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "typeof"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Reference",
              "text": "TimestampStyles",
              "canonicalReference": "@discordjs/formatters!TimestampStyles:var"
            },
            {
              "kind": "Content",
              "text": ")[keyof "
            },
            {
              "kind": "Reference",
              "text": "typeof"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Reference",
              "text": "TimestampStyles",
              "canonicalReference": "@discordjs/formatters!TimestampStyles:var"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 601,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "TimestampStylesString",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 12
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!underscore:function(1)",
          "docComment": "/**\n * Formats the content into underscored text.\n *\n * @param content - The content to wrap\n *\n * @typeParam Content - This is inferred by the supplied content\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "underscore",
              "canonicalReference": "@discordjs/formatters!underscore"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "content",
              "canonicalReference": "@discordjs/formatters!~content"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`__${"
            },
            {
              "kind": "Reference",
              "text": "Content"
            },
            {
              "kind": "Content",
              "text": "}__`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 65,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Content",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "underscore"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!unorderedList:function(1)",
          "docComment": "/**\n * Formats the elements in the array to an unordered list.\n *\n * @param list - The array of elements to list\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "unorderedList",
              "canonicalReference": "@discordjs/formatters!unorderedList"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "list",
              "canonicalReference": "@discordjs/formatters!~list"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RecursiveArray",
              "canonicalReference": "@discordjs/formatters!RecursiveArray:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 493,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "list",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "name": "unorderedList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!userMention:function(1)",
          "docComment": "/**\n * Formats a user id into a user mention.\n *\n * @param userId - The user id to format\n *\n * @typeParam UserId - This is inferred by the supplied user id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "userMention",
              "canonicalReference": "@discordjs/formatters!userMention"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserId"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "userId",
              "canonicalReference": "@discordjs/formatters!~userId"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "UserId"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<@${"
            },
            {
              "kind": "Reference",
              "text": "UserId"
            },
            {
              "kind": "Content",
              "text": "}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/formatters.ts",
          "fileLine": 193,
          "fileColumn": 1,
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "userId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false,
              "isRest": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "UserId",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "userMention"
        }
      ]
    }
  ]
}
