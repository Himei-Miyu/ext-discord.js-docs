{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.7",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@discordjs/formatters!",
  "docComment": "",
  "name": "@discordjs/formatters",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/formatters!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!blockQuote:function(1)",
          "docComment": "/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function blockQuote<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`>>> ${C}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "blockQuote"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!bold:function(1)",
          "docComment": "/**\n * Formats the content into bold text\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function bold<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`**${C}**`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "bold"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelLink:function(1)",
          "docComment": "/**\n * Formats a channel link for a direct message channel.\n *\n * @param channelId - The channel's id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function channelLink<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(channelId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/@me/${C}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelLink:function(2)",
          "docComment": "/**\n * Formats a channel link for a guild channel.\n *\n * @param channelId - The channel's id\n *\n * @param guildId - The guild's id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function channelLink<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", G extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(channelId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", guildId: "
            },
            {
              "kind": "Content",
              "text": "G"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/${G}/${C}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "guildId",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!channelMention:function(1)",
          "docComment": "/**\n * Formats a channel ID into a channel mention\n *\n * @param channelId - The channel ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function channelMention<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(channelId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<#${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "channelMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(1)",
          "docComment": "/**\n * Formats an application command name, subcommand group name, subcommand name, and ID into an application command mention\n *\n * @param commandName - The application command name to format\n *\n * @param subcommandGroupName - The subcommand group name to format\n *\n * @param subcommandName - The subcommand name to format\n *\n * @param commandId - The application command ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function chatInputApplicationCommandMention<N extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", G extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", I extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(commandName: "
            },
            {
              "kind": "Content",
              "text": "N"
            },
            {
              "kind": "Content",
              "text": ", subcommandGroupName: "
            },
            {
              "kind": "Content",
              "text": "G"
            },
            {
              "kind": "Content",
              "text": ", subcommandName: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": ", commandId: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${N} ${G} ${S}:${I}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "subcommandGroupName",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "subcommandName",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "N",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(2)",
          "docComment": "/**\n * Formats an application command name, subcommand name, and ID into an application command mention\n *\n * @param commandName - The application command name to format\n *\n * @param subcommandName - The subcommand name to format\n *\n * @param commandId - The application command ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function chatInputApplicationCommandMention<N extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", S extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", I extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(commandName: "
            },
            {
              "kind": "Content",
              "text": "N"
            },
            {
              "kind": "Content",
              "text": ", subcommandName: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": ", commandId: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${N} ${S}:${I}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "subcommandName",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "N",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!chatInputApplicationCommandMention:function(3)",
          "docComment": "/**\n * Formats an application command name and ID into an application command mention\n *\n * @param commandName - The application command name to format\n *\n * @param commandId - The application command ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function chatInputApplicationCommandMention<N extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", I extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(commandName: "
            },
            {
              "kind": "Content",
              "text": "N"
            },
            {
              "kind": "Content",
              "text": ", commandId: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`</${N}:${I}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "commandId",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "N",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "chatInputApplicationCommandMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!codeBlock:function(1)",
          "docComment": "/**\n * Wraps the content inside a codeblock with no language\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function codeBlock<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`\\`\\`\\n${C}\\n\\`\\`\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "codeBlock"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!codeBlock:function(2)",
          "docComment": "/**\n * Wraps the content inside a codeblock with the specified language\n *\n * @param language - The language for the codeblock\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function codeBlock<L extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(language: "
            },
            {
              "kind": "Content",
              "text": "L"
            },
            {
              "kind": "Content",
              "text": ", content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`\\`\\`${L}\\n${C}\\n\\`\\`\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "language",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "L",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "codeBlock"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/formatters!Faces:enum",
          "docComment": "/**\n * An enum with all the available faces from Discord's native slash commands\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare enum Faces "
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Faces",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Shrug:member",
              "docComment": "/**\n * ¯\\\\_(ツ)\\\\_/¯\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shrug = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\u00AF\\\\_(\\u30C4)\\\\_/\\u00AF\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Shrug"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Tableflip:member",
              "docComment": "/**\n * (╯°□°）╯︵ ┻━┻\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Tableflip = "
                },
                {
                  "kind": "Content",
                  "text": "\"(\\u256F\\u00B0\\u25A1\\u00B0\\uFF09\\u256F\\uFE35 \\u253B\\u2501\\u253B\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Tableflip"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/formatters!Faces.Unflip:member",
              "docComment": "/**\n * ┬─┬ ノ( ゜-゜ノ)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unflip = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\u252C\\u2500\\u252C \\u30CE( \\u309C-\\u309C\\u30CE)\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Unflip"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(1)",
          "docComment": "/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function formatEmoji<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(emojiId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", animated?: "
            },
            {
              "kind": "Content",
              "text": "false"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<:_:${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(2)",
          "docComment": "/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n *\n * @param animated - Whether the emoji is animated or not. Defaults to `false`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function formatEmoji<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(emojiId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", animated?: "
            },
            {
              "kind": "Content",
              "text": "true"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<a:_:${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!formatEmoji:function(3)",
          "docComment": "/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n *\n * @param animated - Whether the emoji is animated or not. Defaults to `false`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function formatEmoji<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(emojiId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", animated?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<:_:${C}>` | `<a:_:${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "emojiId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "animated",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "formatEmoji"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hideLinkEmbed:function(1)",
          "docComment": "/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url - The URL to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hideLinkEmbed<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(url: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hideLinkEmbed"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hideLinkEmbed:function(2)",
          "docComment": "/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url - The URL to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hideLinkEmbed(url: "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<${string}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hideLinkEmbed"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(1)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hyperlink<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${C}](${string})`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(2)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hyperlink<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", U extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "U"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${C}](${U})`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(3)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @param title - The title shown when hovering on the masked link\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hyperlink<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!\"\\\"url\\\"\".URL:class"
            },
            {
              "kind": "Content",
              "text": ", title: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${C}](${string} \"${T}\")`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "title",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!hyperlink:function(4)",
          "docComment": "/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n *\n * @param url - The URL the content links to\n *\n * @param title - The title shown when hovering on the masked link\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function hyperlink<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", U extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "U"
            },
            {
              "kind": "Content",
              "text": ", title: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`[${C}](${U} \"${T}\")`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "title",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hyperlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!inlineCode:function(1)",
          "docComment": "/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function inlineCode<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`\\`${C}\\``"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "inlineCode"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!italic:function(1)",
          "docComment": "/**\n * Formats the content into italic text\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function italic<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`_${C}_`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "italic"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!messageLink:function(1)",
          "docComment": "/**\n * Formats a message link for a direct message channel.\n *\n * @param channelId - The channel's id\n *\n * @param messageId - The message's id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function messageLink<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(channelId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", messageId: "
            },
            {
              "kind": "Content",
              "text": "M"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/@me/${C}/${M}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "messageId",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "messageLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!messageLink:function(2)",
          "docComment": "/**\n * Formats a message link for a guild channel.\n *\n * @param channelId - The channel's id\n *\n * @param messageId - The message's id\n *\n * @param guildId - The guild's id\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function messageLink<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", M extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ", G extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(channelId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", messageId: "
            },
            {
              "kind": "Content",
              "text": "M"
            },
            {
              "kind": "Content",
              "text": ", guildId: "
            },
            {
              "kind": "Content",
              "text": "G"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`https://discord.com/channels/${G}/${C}/${M}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "channelId",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "messageId",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "guildId",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "M",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "G",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "messageLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!quote:function(1)",
          "docComment": "/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function quote<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`> ${C}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "quote"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!roleMention:function(1)",
          "docComment": "/**\n * Formats a role ID into a role mention\n *\n * @param roleId - The role ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function roleMention<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(roleId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<@&${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roleId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "roleMention"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!spoiler:function(1)",
          "docComment": "/**\n * Wraps the content inside spoiler (hidden text)\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function spoiler<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`||${C}||`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "spoiler"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!strikethrough:function(1)",
          "docComment": "/**\n * Formats the content into strike-through text\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function strikethrough<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`~~${C}~~`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "strikethrough"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(1)",
          "docComment": "/**\n * Formats a date into a short date-time string\n *\n * @param date - The date to format, defaults to the current time\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function time(date?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${bigint}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(2)",
          "docComment": "/**\n * Formats a date given a format style\n *\n * @param date - The date to format\n *\n * @param style - The style to use\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function time<S extends "
            },
            {
              "kind": "Reference",
              "text": "TimestampStylesString",
              "canonicalReference": "@discordjs/formatters!TimestampStylesString:type"
            },
            {
              "kind": "Content",
              "text": ">(date: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ", style: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${bigint}:${S}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "style",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(3)",
          "docComment": "/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds - The time to format, represents an UNIX timestamp in seconds\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function time<C extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ">(seconds: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "seconds",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!time:function(4)",
          "docComment": "/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds - The time to format, represents an UNIX timestamp in seconds\n *\n * @param style - The style to use\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function time<C extends "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", S extends "
            },
            {
              "kind": "Reference",
              "text": "TimestampStylesString",
              "canonicalReference": "@discordjs/formatters!TimestampStylesString:type"
            },
            {
              "kind": "Content",
              "text": ">(seconds: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ", style: "
            },
            {
              "kind": "Content",
              "text": "S"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<t:${C}:${S}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "seconds",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "style",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "time"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/formatters!TimestampStyles:var",
          "docComment": "/**\n * The {@link https://discord.com/developers/docs/reference#message-formatting-timestamp-styles | message formatting timestamp styles} supported by Discord\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TimestampStyles: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly ShortTime: \"t\";\n    readonly LongTime: \"T\";\n    readonly ShortDate: \"d\";\n    readonly LongDate: \"D\";\n    readonly ShortDateTime: \"f\";\n    readonly LongDateTime: \"F\";\n    readonly RelativeTime: \"R\";\n}"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TimestampStyles",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/formatters!TimestampStylesString:type",
          "docComment": "/**\n * The possible values, see {@link TimestampStyles} for more information\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TimestampStylesString = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "TimestampStyles",
              "canonicalReference": "@discordjs/formatters!TimestampStyles:var"
            },
            {
              "kind": "Content",
              "text": "[keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "TimestampStyles",
              "canonicalReference": "@discordjs/formatters!TimestampStyles:var"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "TimestampStylesString",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!underscore:function(1)",
          "docComment": "/**\n * Formats the content into underscored text\n *\n * @param content - The content to wrap\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function underscore<C extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ">(content: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`__${C}__`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "content",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "underscore"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/formatters!userMention:function(1)",
          "docComment": "/**\n * Formats a user ID into a user mention\n *\n * @param userId - The user ID to format\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function userMention<C extends "
            },
            {
              "kind": "Reference",
              "text": "Snowflake",
              "canonicalReference": "discord-api-types!Snowflake:type"
            },
            {
              "kind": "Content",
              "text": ">(userId: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "`<@${C}>`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "userId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "userMention"
        }
      ]
    }
  ]
}
