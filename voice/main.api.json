{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.29.3",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@discordjs/voice!",
  "docComment": "",
  "name": "@discordjs/voice",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/voice!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!AudioPlayer:class",
          "docComment": "/**\n * Used to play audio resources (i.e. tracks, streams) to voice connections.\n *\n * @remarks\n *\n * Audio players are designed to be re-used - even if a resource has finished playing, the player itself can still be used.\n *\n * The AudioPlayer drives the timing of playback, and therefore is unaffected by voice connections becoming unavailable. Its behavior in these scenarios can be configured.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AudioPlayer extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!AudioPlayer:constructor(1)",
              "docComment": "/**\n * Creates a new AudioPlayer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CreateAudioPlayerOptions",
                  "canonicalReference": "@discordjs/voice!CreateAudioPlayerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioPlayer#checkPlayable:member(1)",
              "docComment": "/**\n * Checks whether the underlying resource (if any) is playable (readable)\n *\n * @returns `true` if the resource is playable, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkPlayable(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "checkPlayable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioPlayer#pause:member(1)",
              "docComment": "/**\n * Pauses playback of the current resource, if any.\n *\n * @param interpolateSilence - If true, the player will play 5 packets of silence after pausing to prevent audio glitches\n *\n * @returns `true` if the player was successfully paused, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pause(interpolateSilence?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interpolateSilence",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "pause"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioPlayer#play:member(1)",
              "docComment": "/**\n * Plays a new resource on the player. If the player is already playing a resource, the existing resource is destroyed (it cannot be reused, even in another player) and is replaced with the new resource.\n *\n * @remarks\n *\n * The player will transition to the Playing state once playback begins, and will return to the Idle state once playback is ended.\n *\n * If the player was previously playing a resource and this method is called, the player will not transition to the Idle state during the swap over.\n *\n * @param resource - The resource to play\n *\n * @throws\n *\n * Will throw if attempting to play an audio resource that has already ended, or is being played by another player\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "play<T>(resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "resource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "play"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioPlayer#playable:member",
              "docComment": "/**\n * A list of subscribed voice connections that can currently receive audio to play.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get playable(): "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnection",
                  "canonicalReference": "@discordjs/voice!VoiceConnection:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "playable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioPlayer#state:member",
              "docComment": "/**\n * The state that the player is in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get state(): "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n\nset state(newState: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioPlayer#stop:member(1)",
              "docComment": "/**\n * Stops playback of the current resource and destroys the resource. The player will either transition to the Idle state, or remain in its current state until the silence padding frames of the resource have been played.\n *\n * @param force - If true, will force the player to enter the Idle state even if the resource has silence padding frames\n *\n * @returns `true` if the player will come to a stop, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(force?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "force",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "stop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioPlayer#unpause:member(1)",
              "docComment": "/**\n * Unpauses playback of the current resource, if any.\n *\n * @returns `true` if the player was successfully unpaused, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unpause(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "unpause"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioPlayer:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioPlayer extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayer",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!AudioPlayer#on:member(1)",
              "docComment": "/**\n * Emitted when there is an error emitted from the audio resource played by the audio player\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerError",
                  "canonicalReference": "@discordjs/voice!AudioPlayerError:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!AudioPlayer#on:member(2)",
              "docComment": "/**\n * Emitted debugging information about the audio player\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'debug'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!AudioPlayer#on:member(3)",
              "docComment": "/**\n * Emitted when the state of the audio player changes\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'stateChange'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": ", newState: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!AudioPlayer#on:member(4)",
              "docComment": "/**\n * Emitted when the audio player is subscribed to a voice connection\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'subscribe' | 'unsubscribe'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(subscription: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!AudioPlayer#on:member(5)",
              "docComment": "/**\n * Emitted when the status of state changes to a specific status\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": ", newState: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerState",
                  "canonicalReference": "@discordjs/voice!AudioPlayerState:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        status: T;\n    }) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState:interface",
          "docComment": "/**\n * The state that an AudioPlayer is in when it is waiting for a resource to become readable. Once this happens, the AudioPlayer will enter the Playing state. If the resource ends/errors before this, then it will re-enter the Idle state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioPlayerBufferingState "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerBufferingState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState#onFailureCallback:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFailureCallback: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onFailureCallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState#onReadableCallback:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onReadableCallback: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onReadableCallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState#onStreamError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStreamError: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStreamError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState#resource:member",
              "docComment": "/**\n * The resource that the AudioPlayer is waiting for\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus.Buffering",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Buffering:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!AudioPlayerError:class",
          "docComment": "/**\n * An error emitted by an AudioPlayer. Contains an attached resource to aid with debugging and identifying where the error came from.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AudioPlayerError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!AudioPlayerError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AudioPlayerError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ", resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "resource",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioPlayerError#resource:member",
              "docComment": "/**\n * The resource associated with the audio player at the time the error was thrown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioPlayerIdleState:interface",
          "docComment": "/**\n * The state that an AudioPlayer is in when it has no resource to play. This is the starting state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioPlayerIdleState "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerIdleState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerIdleState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus.Idle",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Idle:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioPlayerPausedState:interface",
          "docComment": "/**\n * The state that an AudioPlayer is in when it has either been explicitly paused by the user, or done automatically by the AudioPlayer itself if there are no available subscribers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioPlayerPausedState "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerPausedState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState#onStreamError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStreamError: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStreamError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState#playbackDuration:member",
              "docComment": "/**\n * The playback duration in milliseconds of the current audio resource. This includes filler silence packets that have been played when the resource was buffering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playbackDuration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "playbackDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState#resource:member",
              "docComment": "/**\n * The current resource of the audio player.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState#silencePacketsRemaining:member",
              "docComment": "/**\n * How many silence packets still need to be played to avoid audio interpolation due to the stream suddenly pausing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "silencePacketsRemaining: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "silencePacketsRemaining",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus.Paused",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Paused:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus.AutoPaused",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus.AutoPaused:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState:interface",
          "docComment": "/**\n * The state that an AudioPlayer is in when it is actively playing an AudioResource. When playback ends, it will enter the Idle state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioPlayerPlayingState "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerPlayingState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState#missedFrames:member",
              "docComment": "/**\n * The number of consecutive times that the audio resource has been unable to provide an Opus frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "missedFrames: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "missedFrames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState#onStreamError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStreamError: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStreamError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState#playbackDuration:member",
              "docComment": "/**\n * The playback duration in milliseconds of the current audio resource. This includes filler silence packets that have been played when the resource was buffering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playbackDuration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "playbackDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState#resource:member",
              "docComment": "/**\n * The resource that is being played.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resource: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioResource",
                  "canonicalReference": "@discordjs/voice!AudioResource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayerStatus.Playing",
                  "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Playing:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/voice!AudioPlayerState:type",
          "docComment": "/**\n * The various states that the player can be in.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AudioPlayerState = "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayerIdleState",
              "canonicalReference": "@discordjs/voice!AudioPlayerIdleState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayerBufferingState",
              "canonicalReference": "@discordjs/voice!AudioPlayerBufferingState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayerPlayingState",
              "canonicalReference": "@discordjs/voice!AudioPlayerPlayingState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayerPausedState",
              "canonicalReference": "@discordjs/voice!AudioPlayerPausedState:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!AudioPlayerStatus:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AudioPlayerStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioPlayerStatus",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus.AutoPaused:member",
              "docComment": "/**\n * When the player has paused itself. Only possible with the \"pause\" no subscriber behavior.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AutoPaused = "
                },
                {
                  "kind": "Content",
                  "text": "\"autopaused\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AutoPaused"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Buffering:member",
              "docComment": "/**\n * When the player is waiting for an audio resource to become readable before transitioning to Playing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Buffering = "
                },
                {
                  "kind": "Content",
                  "text": "\"buffering\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Buffering"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Idle:member",
              "docComment": "/**\n * When there is currently no resource for the player to be playing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Idle = "
                },
                {
                  "kind": "Content",
                  "text": "\"idle\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Idle"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Paused:member",
              "docComment": "/**\n * When the player has been manually paused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Paused = "
                },
                {
                  "kind": "Content",
                  "text": "\"paused\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Paused"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus.Playing:member",
              "docComment": "/**\n * When the player is actively playing an audio resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Playing = "
                },
                {
                  "kind": "Content",
                  "text": "\"playing\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Playing"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!AudioReceiveStream:class",
          "docComment": "/**\n * A readable stream of Opus packets received from a specific entity in a Discord voice connection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AudioReceiveStream extends "
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioReceiveStream",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioReceiveStream#_read:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_read(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "_read"
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!AudioReceiveStream:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AudioReceiveStream` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ end, ...options }: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioReceiveStreamOptions",
                  "canonicalReference": "@discordjs/voice!AudioReceiveStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ end, ...options }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioReceiveStream#end:member",
              "docComment": "/**\n * The end behavior of the receive stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Reference",
                  "text": "EndBehavior",
                  "canonicalReference": "@discordjs/voice!EndBehavior:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!AudioReceiveStream#push:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "push(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "push"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!AudioReceiveStreamOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AudioReceiveStreamOptions extends "
            },
            {
              "kind": "Reference",
              "text": "ReadableOptions",
              "canonicalReference": "!\"\\\"stream\\\"\"~internal.ReadableOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AudioReceiveStreamOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!AudioReceiveStreamOptions#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end: "
                },
                {
                  "kind": "Reference",
                  "text": "EndBehavior",
                  "canonicalReference": "@discordjs/voice!EndBehavior:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!AudioResource:class",
          "docComment": "/**\n * Represents an audio resource that can be played by an audio player.\n *\n * @typeParam T - the type for the metadata (if any) of the audio resource\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AudioResource<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "AudioResource",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!AudioResource:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AudioResource` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(edges: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "Edge",
                  "canonicalReference": "@discordjs/voice!Edge:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", streams: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", metadata: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", silencePaddingFrames: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "edges",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "streams",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "silencePaddingFrames",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#audioPlayer:member",
              "docComment": "/**\n * The audio player that the resource is subscribed to, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioPlayer?: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayer",
                  "canonicalReference": "@discordjs/voice!AudioPlayer:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "audioPlayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#edges:member",
              "docComment": "/**\n * The pipeline used to convert the input stream into a playable format. For example, this may contain an FFmpeg component for arbitrary inputs, and it may contain a VolumeTransformer component for resources with inline volume transformation enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly edges: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "Edge",
                  "canonicalReference": "@discordjs/voice!Edge:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "edges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#encoder:member",
              "docComment": "/**\n * If using an Opus encoder to create this audio resource, then this will be a prism-media opus.Encoder. You can use this to control settings such as bitrate, FEC, PLP.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly encoder?: "
                },
                {
                  "kind": "Content",
                  "text": "prism."
                },
                {
                  "kind": "Reference",
                  "text": "opus.Encoder",
                  "canonicalReference": "prism-media!opus.Encoder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#ended:member",
              "docComment": "/**\n * Whether this resource has ended or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get ended(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ended",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#metadata:member",
              "docComment": "/**\n * Optional metadata that can be used to identify the resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#playbackDuration:member",
              "docComment": "/**\n * The playback duration of this audio resource, given in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playbackDuration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "playbackDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#playStream:member",
              "docComment": "/**\n * An object-mode Readable stream that emits Opus packets. This is what is played by audio players.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly playStream: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "playStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#readable:member",
              "docComment": "/**\n * Whether this resource is readable. If the underlying resource is no longer readable, this will still return true while there are silence padding frames left to play.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get readable(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "readable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#silencePaddingFrames:member",
              "docComment": "/**\n * The number of silence frames to append to the end of the resource's audio stream, to prevent interpolation glitches.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly silencePaddingFrames: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "silencePaddingFrames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#silenceRemaining:member",
              "docComment": "/**\n * The number of remaining silence frames to play. If -1, the frames have not yet started playing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "silenceRemaining: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "silenceRemaining",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#started:member",
              "docComment": "/**\n * Whether or not the stream for this resource has started (data has become readable)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "started: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "started",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!AudioResource#volume:member",
              "docComment": "/**\n * If the resource was created with inline volume transformation enabled, then this will be a prism-media VolumeTransformer. You can use this to alter the volume of the stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly volume?: "
                },
                {
                  "kind": "Content",
                  "text": "prism."
                },
                {
                  "kind": "Reference",
                  "text": "VolumeTransformer",
                  "canonicalReference": "prism-media!VolumeTransformer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "volume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!createAudioPlayer:function(1)",
          "docComment": "/**\n * Creates a new AudioPlayer to be used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createAudioPlayer(options?: "
            },
            {
              "kind": "Reference",
              "text": "CreateAudioPlayerOptions",
              "canonicalReference": "@discordjs/voice!CreateAudioPlayerOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayer",
              "canonicalReference": "@discordjs/voice!AudioPlayer:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "createAudioPlayer"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!CreateAudioPlayerOptions:interface",
          "docComment": "/**\n * Options that can be passed when creating an audio player, used to specify its behavior.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CreateAudioPlayerOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CreateAudioPlayerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioPlayerOptions#behaviors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "behaviors?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        noSubscriber?: "
                },
                {
                  "kind": "Reference",
                  "text": "NoSubscriberBehavior",
                  "canonicalReference": "@discordjs/voice!NoSubscriberBehavior:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        maxMissedFrames?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "behaviors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioPlayerOptions#debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!createAudioResource:function(1)",
          "docComment": "/**\n * Creates an audio resource that can be played by audio players.\n *\n * @remarks\n *\n * If the input is given as a string, then the inputType option will be overridden and FFmpeg will be used.\n *\n * If the input is not in the correct format, then a pipeline of transcoders and transformers will be created to ensure that the resultant stream is in the correct format for playback. This could involve using FFmpeg, Opus transcoders, and Ogg/WebM demuxers.\n *\n * @param input - The resource to play\n *\n * @param options - Configurable options for creating the resource\n *\n * @typeParam T - the type for the metadata (if any) of the audio resource\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createAudioResource<T>(input: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "CreateAudioResourceOptions",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<T extends null | undefined ? "
            },
            {
              "kind": "Reference",
              "text": "CreateAudioResourceOptions",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<T> : "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateAudioResourceOptions",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>, 'metadata'>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AudioResource",
              "canonicalReference": "@discordjs/voice!AudioResource:class"
            },
            {
              "kind": "Content",
              "text": "<T extends null | undefined ? null : T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 14
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createAudioResource"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!createAudioResource:function(2)",
          "docComment": "/**\n * Creates an audio resource that can be played by audio players.\n *\n * @remarks\n *\n * If the input is given as a string, then the inputType option will be overridden and FFmpeg will be used.\n *\n * If the input is not in the correct format, then a pipeline of transcoders and transformers will be created to ensure that the resultant stream is in the correct format for playback. This could involve using FFmpeg, Opus transcoders, and Ogg/WebM demuxers.\n *\n * @param input - The resource to play\n *\n * @param options - Configurable options for creating the resource\n *\n * @typeParam T - the type for the metadata (if any) of the audio resource\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createAudioResource<T extends "
            },
            {
              "kind": "Content",
              "text": "null | undefined"
            },
            {
              "kind": "Content",
              "text": ">(input: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateAudioResourceOptions",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, 'metadata'>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AudioResource",
              "canonicalReference": "@discordjs/voice!AudioResource:class"
            },
            {
              "kind": "Content",
              "text": "<null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createAudioResource"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions:interface",
          "docComment": "/**\n * Options that are set when creating a new audio resource.\n *\n * @typeParam T - the type for the metadata (if any) of the audio resource\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CreateAudioResourceOptions<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CreateAudioResourceOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions#inlineVolume:member",
              "docComment": "/**\n * Whether or not inline volume should be enabled. If enabled, you will be able to change the volume of the stream on-the-fly. However, this also increases the performance cost of playback. Defaults to `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inlineVolume?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inlineVolume",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions#inputType:member",
              "docComment": "/**\n * The type of the input stream. Defaults to `StreamType.Arbitrary`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputType?: "
                },
                {
                  "kind": "Reference",
                  "text": "StreamType",
                  "canonicalReference": "@discordjs/voice!StreamType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "inputType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions#metadata:member",
              "docComment": "/**\n * Optional metadata that can be attached to the resource (e.g. track title, random id). This is useful for identification purposes when the resource is passed around in events. See {@link AudioResource.metadata}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateAudioResourceOptions#silencePaddingFrames:member",
              "docComment": "/**\n * The number of silence frames to append to the end of the resource's audio stream, to prevent interpolation glitches. Defaults to 5.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "silencePaddingFrames?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "silencePaddingFrames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!createDefaultAudioReceiveStreamOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createDefaultAudioReceiveStreamOptions(): "
            },
            {
              "kind": "Reference",
              "text": "AudioReceiveStreamOptions",
              "canonicalReference": "@discordjs/voice!AudioReceiveStreamOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "createDefaultAudioReceiveStreamOptions"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!CreateVoiceConnectionOptions:interface",
          "docComment": "/**\n * The options that can be given when creating a voice connection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CreateVoiceConnectionOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CreateVoiceConnectionOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateVoiceConnectionOptions#adapterCreator:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapterCreator: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordGatewayAdapterCreator",
                  "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterCreator:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapterCreator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!CreateVoiceConnectionOptions#debug:member",
              "docComment": "/**\n * If true, debug messages will be enabled for the voice connection and its related components. Defaults to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "debug",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!demuxProbe:function(1)",
          "docComment": "/**\n * Attempt to probe a readable stream to figure out whether it can be demuxed using an Ogg or WebM Opus demuxer.\n *\n * @param stream - The readable stream to probe\n *\n * @param probeSize - The number of bytes to attempt to read before giving up on the probe\n *\n * @param validator - The Opus Head validator function\n *\n * @experimental\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function demuxProbe(stream: "
            },
            {
              "kind": "Reference",
              "text": "Readable",
              "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
            },
            {
              "kind": "Content",
              "text": ", probeSize?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", validator?: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "validateDiscordOpusHead",
              "canonicalReference": "@discordjs/voice!validateDiscordOpusHead:function"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProbeInfo",
              "canonicalReference": "@discordjs/voice!ProbeInfo:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stream",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "probeSize",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "validator",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "demuxProbe"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterCreator:type",
          "docComment": "/**\n * A function used to build adapters. It accepts a methods parameter that contains functions that can be called by the implementer when new data is received on its gateway connection. In return, the implementer will return some methods that the library can call - e.g. to send messages on the gateway, or to signal that the adapter can be removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DiscordGatewayAdapterCreator = "
            },
            {
              "kind": "Content",
              "text": "(methods: "
            },
            {
              "kind": "Reference",
              "text": "DiscordGatewayAdapterLibraryMethods",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterLibraryMethods:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "DiscordGatewayAdapterImplementerMethods",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DiscordGatewayAdapterCreator",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface",
          "docComment": "/**\n * Methods that are provided by the implementer of a Discord gateway DiscordGatewayAdapter.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DiscordGatewayAdapterImplementerMethods "
            }
          ],
          "releaseTag": "Public",
          "name": "DiscordGatewayAdapterImplementerMethods",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods#destroy:member",
              "docComment": "/**\n * This will be called by \\@discordjs/voice when the adapter can safely be destroyed as it will no longer be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destroy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods#sendPayload:member",
              "docComment": "/**\n * Implement this method such that the given payload is sent to the main Discord gateway connection.\n *\n * @param payload - The payload to send to the main Discord gateway connection\n *\n * @returns `false` if the payload definitely failed to send - in this case, the voice connection disconnects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendPayload: "
                },
                {
                  "kind": "Content",
                  "text": "(payload: any) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendPayload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterLibraryMethods:interface",
          "docComment": "/**\n * Methods that are provided by the \\@discordjs/voice library to implementations of Discord gateway DiscordGatewayAdapters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DiscordGatewayAdapterLibraryMethods "
            }
          ],
          "releaseTag": "Public",
          "name": "DiscordGatewayAdapterLibraryMethods",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterLibraryMethods#destroy:member",
              "docComment": "/**\n * Call this when the adapter can no longer be used (e.g. due to a disconnect from the main gateway)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destroy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceServerUpdate:member",
              "docComment": "/**\n * Call this when you receive a VOICE_SERVER_UPDATE payload that is relevant to the adapter.\n *\n * @param data - The inner data of the VOICE_SERVER_UPDATE payload\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onVoiceServerUpdate: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayVoiceServerUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayVoiceServerUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onVoiceServerUpdate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceStateUpdate:member",
              "docComment": "/**\n * Call this when you receive a VOICE_STATE_UPDATE payload that is relevant to the adapter.\n *\n * @param data - The inner data of the VOICE_STATE_UPDATE payload\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onVoiceStateUpdate: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayVoiceStateUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayVoiceStateUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onVoiceStateUpdate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/voice!EndBehavior:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EndBehavior = "
            },
            {
              "kind": "Content",
              "text": "{\n    behavior: "
            },
            {
              "kind": "Reference",
              "text": "EndBehaviorType.Manual",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.Manual:member"
            },
            {
              "kind": "Content",
              "text": ";\n} | {\n    behavior: "
            },
            {
              "kind": "Reference",
              "text": "EndBehaviorType.AfterSilence",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.AfterSilence:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EndBehaviorType.AfterInactivity",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.AfterInactivity:member"
            },
            {
              "kind": "Content",
              "text": ";\n    duration: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EndBehavior",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!EndBehaviorType:enum",
          "docComment": "/**\n * The different behaviors an audio receive stream can have for deciding when to end.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum EndBehaviorType "
            }
          ],
          "releaseTag": "Public",
          "name": "EndBehaviorType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.AfterInactivity:member",
              "docComment": "/**\n * The stream will end after a given time period of no audio packets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AfterInactivity = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AfterInactivity"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.AfterSilence:member",
              "docComment": "/**\n * The stream will end after a given time period of silence/no audio packets.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AfterSilence = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AfterSilence"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!EndBehaviorType.Manual:member",
              "docComment": "/**\n * The stream will only end when manually destroyed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Manual = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Manual"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!entersState:function(1)",
          "docComment": "/**\n * Allows a voice connection a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The voice connection that we want to observe the state change for\n *\n * @param status - The status that the voice connection should be in\n *\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function entersState(target: "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": ", status: "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionStatus",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus:enum"
            },
            {
              "kind": "Content",
              "text": ", timeoutOrSignal: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "AbortSignal",
              "canonicalReference": "!AbortSignal:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "status",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "timeoutOrSignal",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "entersState"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!entersState:function(2)",
          "docComment": "/**\n * Allows an audio player a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The audio player that we want to observe the state change for\n *\n * @param status - The status that the audio player should be in\n *\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function entersState(target: "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayer",
              "canonicalReference": "@discordjs/voice!AudioPlayer:class"
            },
            {
              "kind": "Content",
              "text": ", status: "
            },
            {
              "kind": "Reference",
              "text": "AudioPlayerStatus",
              "canonicalReference": "@discordjs/voice!AudioPlayerStatus:enum"
            },
            {
              "kind": "Content",
              "text": ", timeoutOrSignal: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "AbortSignal",
              "canonicalReference": "!AbortSignal:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AudioPlayer",
              "canonicalReference": "@discordjs/voice!AudioPlayer:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "status",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "timeoutOrSignal",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "entersState"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!generateDependencyReport:function(1)",
          "docComment": "/**\n * Generates a report of the dependencies used by the \\@discordjs/voice module. Useful for debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateDependencyReport(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "generateDependencyReport"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!getGroups:function(1)",
          "docComment": "/**\n * Retrieves the map of group names to maps of voice connections. By default, all voice connections are created under the 'default' group.\n *\n * @returns The group map\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGroups(): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getGroups"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!getVoiceConnection:function(1)",
          "docComment": "/**\n * Finds a voice connection with the given guild id and group. Defaults to the 'default' group.\n *\n * @param guildId - The guild id of the voice connection\n *\n * @param group - the group that the voice connection was registered with\n *\n * @returns The voice connection, if it exists\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVoiceConnection(guildId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", group?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "guildId",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "group",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getVoiceConnection"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!getVoiceConnections:function(1)",
          "docComment": "/**\n * Retrieves all the voice connections under the 'default' group.\n *\n * @param group - The group to look up\n *\n * @returns The map of voice connections\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVoiceConnections(group?: "
            },
            {
              "kind": "Content",
              "text": "'default'"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "group",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getVoiceConnections"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!getVoiceConnections:function(2)",
          "docComment": "/**\n * Retrieves all the voice connections under the given group name.\n *\n * @param group - The group to look up\n *\n * @returns The map of voice connections\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVoiceConnections(group: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": "> | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "group",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getVoiceConnections"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!JoinConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JoinConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "JoinConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinConfig#channelId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channelId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "channelId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinConfig#group:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "group",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinConfig#guildId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "guildId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinConfig#selfDeaf:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selfDeaf: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selfDeaf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinConfig#selfMute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selfMute: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selfMute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!joinVoiceChannel:function(1)",
          "docComment": "/**\n * Creates a VoiceConnection to a Discord voice channel.\n *\n * @param voiceChannel - the voice channel to connect to\n *\n * @param options - the options for joining the voice channel\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function joinVoiceChannel(options: "
            },
            {
              "kind": "Reference",
              "text": "JoinVoiceChannelOptions",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CreateVoiceConnectionOptions",
              "canonicalReference": "@discordjs/voice!CreateVoiceConnectionOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "import(\"./VoiceConnection\")."
            },
            {
              "kind": "Reference",
              "text": "VoiceConnection",
              "canonicalReference": "@discordjs/voice!VoiceConnection:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "joinVoiceChannel"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions:interface",
          "docComment": "/**\n * The options that can be given when joining a voice channel.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JoinVoiceChannelOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "JoinVoiceChannelOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions#channelId:member",
              "docComment": "/**\n * The id of the Discord voice channel to join.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channelId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "channelId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions#group:member",
              "docComment": "/**\n * An optional group identifier for the voice connection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "group?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "group",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions#guildId:member",
              "docComment": "/**\n * The id of the guild that the voice channel belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "guildId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions#selfDeaf:member",
              "docComment": "/**\n * Whether to join the channel deafened (defaults to true)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selfDeaf?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selfDeaf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!JoinVoiceChannelOptions#selfMute:member",
              "docComment": "/**\n * Whether to join the channel muted (defaults to true)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selfMute?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selfMute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!NoSubscriberBehavior:enum",
          "docComment": "/**\n * Describes the behavior of the player when an audio packet is played but there are no available voice connections to play to.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum NoSubscriberBehavior "
            }
          ],
          "releaseTag": "Public",
          "name": "NoSubscriberBehavior",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!NoSubscriberBehavior.Pause:member",
              "docComment": "/**\n * Pauses playing the stream until a voice connection becomes available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Pause = "
                },
                {
                  "kind": "Content",
                  "text": "\"pause\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Pause"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!NoSubscriberBehavior.Play:member",
              "docComment": "/**\n * Continues to play through the resource regardless.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Play = "
                },
                {
                  "kind": "Content",
                  "text": "\"play\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Play"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!NoSubscriberBehavior.Stop:member",
              "docComment": "/**\n * The player stops and enters the Idle state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Stop = "
                },
                {
                  "kind": "Content",
                  "text": "\"stop\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Stop"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!PlayerSubscription:class",
          "docComment": "/**\n * Represents a subscription of a voice connection to an audio player, allowing the audio player to play audio on the voice connection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PlayerSubscription "
            }
          ],
          "releaseTag": "Public",
          "name": "PlayerSubscription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!PlayerSubscription:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PlayerSubscription` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(connection: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnection",
                  "canonicalReference": "@discordjs/voice!VoiceConnection:class"
                },
                {
                  "kind": "Content",
                  "text": ", player: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayer",
                  "canonicalReference": "@discordjs/voice!AudioPlayer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "connection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "player",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!PlayerSubscription#connection:member",
              "docComment": "/**\n * The voice connection of this subscription.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly connection: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnection",
                  "canonicalReference": "@discordjs/voice!VoiceConnection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!PlayerSubscription#player:member",
              "docComment": "/**\n * The audio player of this subscription.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly player: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayer",
                  "canonicalReference": "@discordjs/voice!AudioPlayer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "player",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!PlayerSubscription#unsubscribe:member(1)",
              "docComment": "/**\n * Unsubscribes the connection from the audio player, meaning that the audio player cannot stream audio to it until a new subscription is made.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "unsubscribe"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!ProbeInfo:interface",
          "docComment": "/**\n * The resulting information after probing an audio stream\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ProbeInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "ProbeInfo",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!ProbeInfo#stream:member",
              "docComment": "/**\n * The readable audio stream to use. You should use this rather than the input stream, as the probing function can sometimes read the input stream to its end and cause the stream to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stream: "
                },
                {
                  "kind": "Reference",
                  "text": "Readable",
                  "canonicalReference": "!\"\\\"stream\\\"\"~internal.Readable:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!ProbeInfo#type:member",
              "docComment": "/**\n * The recommended stream type for this audio stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "StreamType",
                  "canonicalReference": "@discordjs/voice!StreamType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!SpeakingMap:class",
          "docComment": "/**\n * Tracks the speaking states of users in a voice channel.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SpeakingMap extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SpeakingMap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!SpeakingMap:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SpeakingMap` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!SpeakingMap.DELAY:member",
              "docComment": "/**\n * The delay after a packet is received from a user until they're marked as not speaking anymore.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly DELAY = "
                },
                {
                  "kind": "Content",
                  "text": "100"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "DELAY",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!SpeakingMap#onPacket:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPacket(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "onPacket"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!SpeakingMap#users:member",
              "docComment": "/**\n * The currently speaking users, mapped to the milliseconds since UNIX epoch at which they started speaking.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly users: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "users",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!SpeakingMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SpeakingMap extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SpeakingMap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!SpeakingMap#on:member(1)",
              "docComment": "/**\n * Emitted when a user starts speaking.\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'start'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!SpeakingMap#on:member(2)",
              "docComment": "/**\n * Emitted when a user ends speaking.\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'end'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!SSRCMap:class",
          "docComment": "/**\n * Maps audio SSRCs to data of users in voice connections.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SSRCMap extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SSRCMap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!SSRCMap:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SSRCMap` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!SSRCMap#delete:member(1)",
              "docComment": "/**\n * Deletes the stored voice data about a user.\n *\n * @param target - The target of the delete operation, either their audio SSRC or user id\n *\n * @returns The data that was deleted, if any\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(target: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!SSRCMap#get:member(1)",
              "docComment": "/**\n * Gets the stored voice data of a user.\n *\n * @param target - The target, either their user id or audio SSRC\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(target: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!SSRCMap#update:member(1)",
              "docComment": "/**\n * Updates the map with new user data\n *\n * @param data - The data to update with\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(data: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "update"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!SSRCMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SSRCMap extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SSRCMap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!SSRCMap#on:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'create'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(newData: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!SSRCMap#on:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'update'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(oldData: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined, newData: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!SSRCMap#on:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'delete'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(deletedData: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceUserData",
                  "canonicalReference": "@discordjs/voice!VoiceUserData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!StreamType:enum",
          "docComment": "/**\n * The different types of stream that can exist within the pipeline.\n *\n * @remarks\n *\n * - `Arbitrary` - the type of the stream at this point is unknown. - `Raw` - the stream at this point is s16le PCM. - `OggOpus` - the stream at this point is Opus audio encoded in an Ogg wrapper. - `WebmOpus` - the stream at this point is Opus audio encoded in a WebM wrapper. - `Opus` - the stream at this point is Opus audio, and the stream is in object-mode. This is ready to play.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StreamType "
            }
          ],
          "releaseTag": "Public",
          "name": "StreamType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!StreamType.Arbitrary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Arbitrary = "
                },
                {
                  "kind": "Content",
                  "text": "\"arbitrary\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Arbitrary"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!StreamType.OggOpus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OggOpus = "
                },
                {
                  "kind": "Content",
                  "text": "\"ogg/opus\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OggOpus"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!StreamType.Opus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Opus = "
                },
                {
                  "kind": "Content",
                  "text": "\"opus\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Opus"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!StreamType.Raw:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Raw = "
                },
                {
                  "kind": "Content",
                  "text": "\"raw\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Raw"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!StreamType.WebmOpus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WebmOpus = "
                },
                {
                  "kind": "Content",
                  "text": "\"webm/opus\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "WebmOpus"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/voice!validateDiscordOpusHead:function(1)",
          "docComment": "/**\n * Takes an Opus Head, and verifies whether the associated Opus audio is suitable to play in a Discord voice channel.\n *\n * @param opusHead - The Opus Head to validate\n *\n * @returns `true` if suitable to play in a Discord voice channel, otherwise `false`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validateDiscordOpusHead(opusHead: "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "opusHead",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "validateDiscordOpusHead"
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!VoiceConnection:class",
          "docComment": "/**\n * A connection to the voice server of a Guild, can be used to play audio in voice channels.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VoiceConnection extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!VoiceConnection:constructor(1)",
              "docComment": "/**\n * Creates a new voice connection.\n *\n * @param joinConfig - The data required to establish the voice connection\n *\n * @param options - The options used to create this voice connection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(joinConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "JoinConfig",
                  "canonicalReference": "@discordjs/voice!JoinConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", { debug, adapterCreator }: "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVoiceConnectionOptions",
                  "canonicalReference": "@discordjs/voice!CreateVoiceConnectionOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "joinConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ debug, adapterCreator }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#configureNetworking:member(1)",
              "docComment": "/**\n * Attempts to configure a networking instance for this voice connection using the received packets. Both packets are required, and any existing networking instance will be destroyed.\n *\n * @remarks\n *\n * This is called when the voice server of the connection changes, e.g. if the bot is moved into a different channel in the same guild but has a different voice server. In this instance, the connection needs to be re-established to the new voice server.\n *\n * The connection will transition to the Connecting state when this is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configureNetworking(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "configureNetworking"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#destroy:member(1)",
              "docComment": "/**\n * Destroys the VoiceConnection, preventing it from connecting to voice again. This method should be called when you no longer require the VoiceConnection to prevent memory leaks.\n *\n * @param adapterAvailable - Whether the adapter can be used\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(adapterAvailable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "adapterAvailable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#disconnect:member(1)",
              "docComment": "/**\n * Disconnects the VoiceConnection, allowing the possibility of rejoining later on.\n *\n * @returns `true` if the connection was successfully disconnected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disconnect(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "disconnect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#dispatchAudio:member(1)",
              "docComment": "/**\n * Dispatches the previously prepared audio packet (if any)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatchAudio(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "dispatchAudio"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#onSubscriptionRemoved:member(1)",
              "docComment": "/**\n * Called when a subscription of this voice connection to an audio player is removed.\n *\n * @param subscription - The removed subscription\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSubscriptionRemoved(subscription: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subscription",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "onSubscriptionRemoved"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceConnection#ping:member",
              "docComment": "/**\n * The latest ping (in milliseconds) for the WebSocket connection and audio playback for this voice connection, if this data is available.\n *\n * @remarks\n *\n * For this data to be available, the VoiceConnection must be in the Ready state, and its underlying WebSocket connection and UDP socket must have had at least one ping-pong exchange.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get ping(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ws: number | undefined;\n        udp: number | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#playOpusPacket:member(1)",
              "docComment": "/**\n * Prepares an audio packet and dispatches it immediately.\n *\n * @param buffer - The Opus packet to play\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "playOpusPacket(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "playOpusPacket"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#prepareAudioPacket:member(1)",
              "docComment": "/**\n * Prepares an audio packet for dispatch.\n *\n * @param buffer - The Opus packet to prepare\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepareAudioPacket(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "prepareAudioPacket"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceConnection#receiver:member",
              "docComment": "/**\n * The receiver of this voice connection. You should join the voice channel with `selfDeaf` set to false for this feature to work properly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly receiver: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceReceiver",
                  "canonicalReference": "@discordjs/voice!VoiceReceiver:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "receiver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#rejoin:member(1)",
              "docComment": "/**\n * Attempts to rejoin (better explanation soon:tm:)\n *\n * @remarks\n *\n * Calling this method successfully will automatically increment the `rejoinAttempts` counter, which you can use to inform whether or not you'd like to keep attempting to reconnect your voice connection.\n *\n * A state transition from Disconnected to Signalling will be observed when this is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejoin(joinConfig?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JoinConfig",
                  "canonicalReference": "@discordjs/voice!JoinConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'guildId' | 'group'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "joinConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "rejoin"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceConnection#rejoinAttempts:member",
              "docComment": "/**\n * The number of consecutive rejoin attempts. Initially 0, and increments for each rejoin. When a connection is successfully established, it resets to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejoinAttempts: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rejoinAttempts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#setSpeaking:member(1)",
              "docComment": "/**\n * Updates the speaking status of the voice connection. This is used when audio players are done playing audio, and need to signal that the connection is no longer playing audio.\n *\n * @param enabled - Whether or not to show as speaking\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSpeaking(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "false | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setSpeaking"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceConnection#state:member",
              "docComment": "/**\n * The current state of the voice connection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get state(): "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n\nset state(newState: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceConnection#subscribe:member(1)",
              "docComment": "/**\n * Subscribes to an audio player, allowing the player to play audio on this voice connection.\n *\n * @param player - The audio player to subscribe to\n *\n * @returns The created subscription\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(player: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioPlayer",
                  "canonicalReference": "@discordjs/voice!AudioPlayer:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "player",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "subscribe"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnection:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnection extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnection",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!VoiceConnection#on:member(1)",
              "docComment": "/**\n * Emitted when there is an error emitted from the voice connection\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!VoiceConnection#on:member(2)",
              "docComment": "/**\n * Emitted debugging information about the voice connection\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'debug'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(message: string) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!VoiceConnection#on:member(3)",
              "docComment": "/**\n * Emitted when the state of the voice connection changes\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'stateChange'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": ", newState: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/voice!VoiceConnection#on:member(4)",
              "docComment": "/**\n * Emitted when the state of the voice connection changes to a specific status\n *\n * @eventProperty\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": ", newState: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionState",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionState:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        status: T;\n    }) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it is establishing a connection to a Discord voice server.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionConnectingState "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionConnectingState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState#adapter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordGatewayAdapterImplementerMethods",
                  "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState#networking:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "networking: "
                },
                {
                  "kind": "Reference",
                  "text": "Networking",
                  "canonicalReference": "@discordjs/voice!Networking:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "networking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus.Connecting",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Connecting:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState#subscription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscription?: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subscription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDestroyedState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it has been permanently been destroyed by the user and untracked by the library. It cannot be reconnected, instead, a new VoiceConnection needs to be established.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionDestroyedState "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDestroyedState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDestroyedState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus.Destroyed",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Destroyed:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionDisconnectedBaseState "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDisconnectedBaseState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState#adapter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordGatewayAdapterImplementerMethods",
                  "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus.Disconnected",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Disconnected:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState#subscription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscription?: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subscription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedOtherState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionDisconnectedOtherState extends "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDisconnectedBaseState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDisconnectedOtherState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedOtherState#reason:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reason: "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionDisconnectReason",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason:enum"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionDisconnectReason.WebSocketClose",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedState:type",
          "docComment": "/**\n * The states that a VoiceConnection can be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to connect using VoiceConnection#reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VoiceConnectionDisconnectedState = "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDisconnectedOtherState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedOtherState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDisconnectedWebSocketState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedWebSocketState:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDisconnectedState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedWebSocketState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when its WebSocket connection was closed. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionDisconnectedWebSocketState extends "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDisconnectedBaseState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDisconnectedWebSocketState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#closeCode:member",
              "docComment": "/**\n * The close code of the WebSocket connection to the Discord voice server.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeCode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "closeCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#reason:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reason: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionDisconnectReason.WebSocketClose",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason:enum",
          "docComment": "/**\n * The reasons a voice connection can be in the disconnected state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum VoiceConnectionDisconnectReason "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionDisconnectReason",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.AdapterUnavailable:member",
              "docComment": "/**\n * When the adapter was unable to send a message requested by the VoiceConnection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AdapterUnavailable = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "AdapterUnavailable"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.EndpointRemoved:member",
              "docComment": "/**\n * When a VOICE_SERVER_UPDATE packet is received with a null endpoint, causing the connection to be severed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EndpointRemoved = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EndpointRemoved"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.Manual:member",
              "docComment": "/**\n * When a manual disconnect was requested.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Manual = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Manual"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member",
              "docComment": "/**\n * When the WebSocket connection has been closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WebSocketClose = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "WebSocketClose"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it has an active connection to a Discord voice server.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionReadyState "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionReadyState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState#adapter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordGatewayAdapterImplementerMethods",
                  "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState#networking:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "networking: "
                },
                {
                  "kind": "Reference",
                  "text": "Networking",
                  "canonicalReference": "@discordjs/voice!Networking:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "networking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus.Ready",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Ready:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState#subscription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscription?: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subscription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceConnectionSignallingState:interface",
          "docComment": "/**\n * The state that a VoiceConnection will be in when it is waiting to receive a VOICE_SERVER_UPDATE and VOICE_STATE_UPDATE packet from Discord, provided by the adapter.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceConnectionSignallingState "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionSignallingState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionSignallingState#adapter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "DiscordGatewayAdapterImplementerMethods",
                  "canonicalReference": "@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionSignallingState#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnectionStatus.Signalling",
                  "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Signalling:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceConnectionSignallingState#subscription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscription?: "
                },
                {
                  "kind": "Reference",
                  "text": "PlayerSubscription",
                  "canonicalReference": "@discordjs/voice!PlayerSubscription:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "subscription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/voice!VoiceConnectionState:type",
          "docComment": "/**\n * The various states that a voice connection can be in.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VoiceConnectionState = "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionSignallingState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionSignallingState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDisconnectedState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDisconnectedState:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionConnectingState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionConnectingState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionReadyState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionReadyState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "VoiceConnectionDestroyedState",
              "canonicalReference": "@discordjs/voice!VoiceConnectionDestroyedState:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@discordjs/voice!VoiceConnectionStatus:enum",
          "docComment": "/**\n * The various status codes a voice connection can hold at any one time.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum VoiceConnectionStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceConnectionStatus",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Connecting:member",
              "docComment": "/**\n * The `VOICE_SERVER_UPDATE` and `VOICE_STATE_UPDATE` packets have been received, now attempting to establish a voice connection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Connecting = "
                },
                {
                  "kind": "Content",
                  "text": "\"connecting\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Connecting"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Destroyed:member",
              "docComment": "/**\n * The voice connection has been destroyed and untracked, it cannot be reused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Destroyed = "
                },
                {
                  "kind": "Content",
                  "text": "\"destroyed\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Destroyed"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Disconnected:member",
              "docComment": "/**\n * The voice connection has either been severed or not established.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Disconnected = "
                },
                {
                  "kind": "Content",
                  "text": "\"disconnected\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Disconnected"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Ready:member",
              "docComment": "/**\n * A voice connection has been established, and is ready to be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ready = "
                },
                {
                  "kind": "Content",
                  "text": "\"ready\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Ready"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@discordjs/voice!VoiceConnectionStatus.Signalling:member",
              "docComment": "/**\n * Sending a packet to the main Discord gateway to indicate we want to change our voice state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Signalling = "
                },
                {
                  "kind": "Content",
                  "text": "\"signalling\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Signalling"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/voice!VoiceReceiver:class",
          "docComment": "/**\n * Attaches to a VoiceConnection, allowing you to receive audio packets from other users that are speaking.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VoiceReceiver "
            }
          ],
          "releaseTag": "Beta",
          "name": "VoiceReceiver",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/voice!VoiceReceiver:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VoiceReceiver` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(voiceConnection: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnection",
                  "canonicalReference": "@discordjs/voice!VoiceConnection:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Beta",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "voiceConnection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceReceiver#speaking:member",
              "docComment": "/**\n * The speaking map of the receiver.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly speaking: "
                },
                {
                  "kind": "Reference",
                  "text": "SpeakingMap",
                  "canonicalReference": "@discordjs/voice!SpeakingMap:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "speaking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceReceiver#ssrcMap:member",
              "docComment": "/**\n * Maps SSRCs to Discord user ids.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ssrcMap: "
                },
                {
                  "kind": "Reference",
                  "text": "SSRCMap",
                  "canonicalReference": "@discordjs/voice!SSRCMap:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "ssrcMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/voice!VoiceReceiver#subscribe:member(1)",
              "docComment": "/**\n * Creates a subscription for the given user id.\n *\n * @param target - The id of the user to subscribe to\n *\n * @returns A readable stream of Opus packets received from the target\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AudioReceiveStreamOptions",
                  "canonicalReference": "@discordjs/voice!AudioReceiveStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AudioReceiveStream",
                  "canonicalReference": "@discordjs/voice!AudioReceiveStream:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Beta",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "subscribe"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceReceiver#subscriptions:member",
              "docComment": "/**\n * The current audio subscriptions of this receiver.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly subscriptions: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "AudioReceiveStream",
                  "canonicalReference": "@discordjs/voice!AudioReceiveStream:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "subscriptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/voice!VoiceReceiver#voiceConnection:member",
              "docComment": "/**\n * The attached connection of this receiver.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly voiceConnection: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceConnection",
                  "canonicalReference": "@discordjs/voice!VoiceConnection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "voiceConnection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/voice!VoiceUserData:interface",
          "docComment": "/**\n * The known data for a user in a Discord voice connection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VoiceUserData "
            }
          ],
          "releaseTag": "Public",
          "name": "VoiceUserData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceUserData#audioSSRC:member",
              "docComment": "/**\n * The SSRC of the user's audio stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioSSRC: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "audioSSRC",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceUserData#userId:member",
              "docComment": "/**\n * The Discord user id of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/voice!VoiceUserData#videoSSRC:member",
              "docComment": "/**\n * The SSRC of the user's video stream (if one exists) Cannot be 0. If undefined, the user has no video stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "videoSSRC?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "videoSSRC",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
