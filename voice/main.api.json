{"meta":{"tpk":"@discordjs/api-extractor","tv":"7.38.1","v":1013,"ov":1013,"ts":{"undefined":false}},"pdir":"https://github.com/discordjs/discord.js/tree/main/packages/voice","dp":{"@types/ws":"^8.5.12","ws":"^8.18.0"},"k":"Package","c":"@discordjs/voice!","d":"","n":"@discordjs/voice","pmo":false,"ms":[{"k":"EntryPoint","c":"@discordjs/voice!","n":"","pmo":false,"ms":[{"k":"Class","c":"@discordjs/voice!AudioPlayer:class","d":"/**\n * Used to play audio resources (i.e. tracks, streams) to voice connections.\n *\n * @remarks\n *\n * Audio players are designed to be re-used - even if a resource has finished playing, the player itself can still be used.\n *\n * The AudioPlayer drives the timing of playback, and therefore is unaffected by voice connections becoming unavailable. Its behavior in these scenarios can be configured.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":214,"co":1,"r":"Public","ab":false,"n":"AudioPlayer","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!AudioPlayer:constructor(1)","d":"/**\n * Creates a new AudioPlayer.\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":"?: "},{"k":"Reference","t":"CreateAudioPlayerOptions","c":"@discordjs/voice!CreateAudioPlayerOptions:interface"},{"k":"Content","t":");"}],"l":242,"co":2,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"options","ptr":{"st":3,"en":4},"op":true,"rs":false}]},{"k":"Method","c":"@discordjs/voice!AudioPlayer#checkPlayable:member(1)","d":"/**\n * Checks whether the underlying resource (if any) is playable (readable)\n *\n * @returns `true` if the resource is playable, otherwise `false`\n */\n","ex":[{"k":"Reference","t":"checkPlayable","c":"@discordjs/voice!AudioPlayer#checkPlayable"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":510,"co":9,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"checkPlayable"},{"k":"Method","c":"@discordjs/voice!AudioPlayer#pause:member(1)","d":"/**\n * Pauses playback of the current resource, if any.\n *\n * @param interpolateSilence - If true, the player will play 5 packets of silence after pausing to prevent audio glitches\n *\n * @returns `true` if the player was successfully paused, otherwise `false`\n */\n","ex":[{"k":"Reference","t":"pause","c":"@discordjs/voice!AudioPlayer#pause"},{"k":"Content","t":"("},{"k":"Reference","t":"interpolateSilence","c":"@discordjs/voice!~interpolateSilence"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":460,"co":9,"sta":false,"rtr":{"st":6,"en":7},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"interpolateSilence","ptr":{"st":4,"en":5},"op":true,"rs":false}],"op":false,"ab":false,"n":"pause"},{"k":"Method","c":"@discordjs/voice!AudioPlayer#play:member(1)","d":"/**\n * Plays a new resource on the player. If the player is already playing a resource, the existing resource is destroyed (it cannot be reused, even in another player) and is replaced with the new resource.\n *\n * @remarks\n *\n * The player will transition to the Playing state once playback begins, and will return to the Idle state once playback is ended.\n *\n * If the player was previously playing a resource and this method is called, the player will not transition to the Idle state during the swap over.\n *\n * @param resource - The resource to play\n *\n * @throws\n *\n * Will throw if attempting to play an audio resource that has already ended, or is being played by another player\n */\n","ex":[{"k":"Reference","t":"play","c":"@discordjs/voice!AudioPlayer#play"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">("},{"k":"Reference","t":"resource","c":"@discordjs/voice!~resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":378,"co":9,"tps":[{"tp":"Metadata","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"sta":false,"rtr":{"st":11,"en":12},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"resource","ptr":{"st":6,"en":10},"op":false,"rs":false}],"op":false,"ab":false,"n":"play"},{"k":"Property","c":"@discordjs/voice!AudioPlayer#playable:member","d":"/**\n * A list of subscribed voice connections that can currently receive audio to play.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"playable","c":"@discordjs/voice!AudioPlayer#playable"},{"k":"Content","t":"(): "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":"[]"},{"k":"Content","t":";"}],"l":256,"co":2,"ro":true,"op":false,"r":"Public","n":"playable","prtr":{"st":3,"en":5},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioPlayer#state:member","d":"/**\n * The state that the player is in.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"state","c":"@discordjs/voice!AudioPlayer#state"},{"k":"Content","t":"(): "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":";\n\nset "},{"k":"Reference","t":"state","c":"@discordjs/voice!AudioPlayer#state"},{"k":"Content","t":"("},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":");"}],"l":308,"co":2,"ro":false,"op":false,"r":"Public","n":"state","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!AudioPlayer#stop:member(1)","d":"/**\n * Stops playback of the current resource and destroys the resource. The player will either transition to the Idle state, or remain in its current state until the silence padding frames of the resource have been played.\n *\n * @param force - If true, will force the player to enter the Idle state even if the resource has silence padding frames\n *\n * @returns `true` if the player will come to a stop, otherwise `false`\n */\n","ex":[{"k":"Reference","t":"stop","c":"@discordjs/voice!AudioPlayer#stop"},{"k":"Content","t":"("},{"k":"Reference","t":"force","c":"@discordjs/voice!~force"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":492,"co":9,"sta":false,"rtr":{"st":6,"en":7},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"force","ptr":{"st":4,"en":5},"op":true,"rs":false}],"op":false,"ab":false,"n":"stop"},{"k":"Method","c":"@discordjs/voice!AudioPlayer#unpause:member(1)","d":"/**\n * Unpauses playback of the current resource, if any.\n *\n * @returns `true` if the player was successfully unpaused, otherwise `false`\n */\n","ex":[{"k":"Reference","t":"unpause","c":"@discordjs/voice!AudioPlayer#unpause"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":475,"co":9,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"unpause"}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!AudioPlayer:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":155,"co":1,"r":"Public","n":"AudioPlayer","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!AudioPlayer#on:member(1)","d":"/**\n * Emitted when there is an error emitted from the audio resource played by the audio player\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!AudioPlayer#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'error'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerError","c":"@discordjs/voice!AudioPlayerError:class"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":161,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":1,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!AudioPlayer#on:member(2)","d":"/**\n * Emitted debugging information about the audio player\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!AudioPlayer#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'debug'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"message","c":"@discordjs/voice!~message"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":167,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":2,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!AudioPlayer#on:member(3)","d":"/**\n * Emitted when the state of the audio player changes\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!AudioPlayer#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'stateChange'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"oldState","c":"@discordjs/voice!~oldState"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":", "},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":173,"co":2,"op":false,"rtr":{"st":19,"en":20},"r":"Public","oi":3,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":18},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!AudioPlayer#on:member(4)","d":"/**\n * Emitted when the audio player is subscribed to a voice connection\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!AudioPlayer#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'subscribe' | 'unsubscribe'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"subscription","c":"@discordjs/voice!~subscription"},{"k":"Content","t":": "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":179,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":4,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!AudioPlayer#on:member(5)","d":"/**\n * Emitted when the status of state changes to a specific status\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!AudioPlayer#on"},{"k":"Content","t":"<"},{"k":"Reference","t":"Event"},{"k":"Content","t":" extends "},{"k":"Reference","t":"AudioPlayerStatus","c":"@discordjs/voice!AudioPlayerStatus:enum"},{"k":"Content","t":">("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Reference","t":"Event"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"oldState","c":"@discordjs/voice!~oldState"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":", "},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":" & {    "},{"k":"Reference","t":"status","c":"@discordjs/voice!~__type#status"},{"k":"Content","t":": "},{"k":"Reference","t":"Event"},{"k":"Content","t":";  }) => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":185,"co":2,"op":false,"rtr":{"st":27,"en":28},"r":"Public","oi":5,"ps":[{"pn":"event","ptr":{"st":8,"en":9},"op":false,"rs":false},{"pn":"listener","ptr":{"st":12,"en":26},"op":false,"rs":false}],"tps":[{"tp":"Event","ctr":{"st":4,"en":5},"dtr":{"st":0,"en":0}}],"n":"on"}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Interface","c":"@discordjs/voice!AudioPlayerBufferingState:interface","d":"/**\n * The state that an AudioPlayer is in when it is waiting for a resource to become readable. Once this happens, the AudioPlayer will enter the Playing state. If the resource ends/errors before this, then it will re-enter the Idle state.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioPlayerBufferingState","c":"@discordjs/voice!AudioPlayerBufferingState:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":85,"co":1,"r":"Public","n":"AudioPlayerBufferingState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerBufferingState#onFailureCallback:member","d":"","ex":[{"k":"Reference","t":"onFailureCallback","c":"@discordjs/voice!AudioPlayerBufferingState#onFailureCallback"},{"k":"Content","t":": "},{"k":"Content","t":"() => "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":86,"co":2,"ro":false,"op":false,"r":"Public","n":"onFailureCallback","prtr":{"st":2,"en":4}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerBufferingState#onReadableCallback:member","d":"","ex":[{"k":"Reference","t":"onReadableCallback","c":"@discordjs/voice!AudioPlayerBufferingState#onReadableCallback"},{"k":"Content","t":": "},{"k":"Content","t":"() => "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":87,"co":2,"ro":false,"op":false,"r":"Public","n":"onReadableCallback","prtr":{"st":2,"en":4}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerBufferingState#onStreamError:member","d":"","ex":[{"k":"Reference","t":"onStreamError","c":"@discordjs/voice!AudioPlayerBufferingState#onStreamError"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":88,"co":2,"ro":false,"op":false,"r":"Public","n":"onStreamError","prtr":{"st":2,"en":8}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerBufferingState#resource:member","d":"/**\n * The resource that the AudioPlayer is waiting for\n */\n","ex":[{"k":"Reference","t":"resource","c":"@discordjs/voice!AudioPlayerBufferingState#resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":";"}],"l":92,"co":2,"ro":false,"op":false,"r":"Public","n":"resource","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerBufferingState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!AudioPlayerBufferingState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerStatus.Buffering","c":"@discordjs/voice!AudioPlayerStatus.Buffering:member"},{"k":"Content","t":";"}],"l":93,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Class","c":"@discordjs/voice!AudioPlayerError:class","d":"/**\n * An error emitted by an AudioPlayer. Contains an attached resource to aid with debugging and identifying where the error came from.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"AudioPlayerError","c":"@discordjs/voice!AudioPlayerError:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayerError.ts","l":7,"co":1,"r":"Public","ab":false,"n":"AudioPlayerError","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!AudioPlayerError:constructor(1)","d":"/**\n * Constructs a new instance of the `AudioPlayerError` class\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":", "},{"k":"Reference","t":"resource","c":"@discordjs/voice!~resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":");"}],"l":11,"co":42,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"error","ptr":{"st":3,"en":4},"op":false,"rs":false},{"pn":"resource","ptr":{"st":7,"en":8},"op":false,"rs":false}]},{"k":"Property","c":"@discordjs/voice!AudioPlayerError#resource:member","d":"/**\n * The resource associated with the audio player at the time the error was thrown.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"resource","c":"@discordjs/voice!AudioPlayerError#resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":";"}],"l":11,"co":2,"ro":true,"op":false,"r":"Public","n":"resource","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!AudioPlayerIdleState:interface","d":"/**\n * The state that an AudioPlayer is in when it has no resource to play. This is the starting state.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioPlayerIdleState","c":"@discordjs/voice!AudioPlayerIdleState:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":76,"co":1,"r":"Public","n":"AudioPlayerIdleState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerIdleState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!AudioPlayerIdleState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerStatus.Idle","c":"@discordjs/voice!AudioPlayerStatus.Idle:member"},{"k":"Content","t":";"}],"l":77,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!AudioPlayerPausedState:interface","d":"/**\n * The state that an AudioPlayer is in when it has either been explicitly paused by the user, or done automatically by the AudioPlayer itself if there are no available subscribers.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioPlayerPausedState","c":"@discordjs/voice!AudioPlayerPausedState:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":125,"co":1,"r":"Public","n":"AudioPlayerPausedState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPausedState#onStreamError:member","d":"","ex":[{"k":"Reference","t":"onStreamError","c":"@discordjs/voice!AudioPlayerPausedState#onStreamError"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":126,"co":2,"ro":false,"op":false,"r":"Public","n":"onStreamError","prtr":{"st":2,"en":8}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPausedState#playbackDuration:member","d":"/**\n * The playback duration in milliseconds of the current audio resource. This includes filler silence packets that have been played when the resource was buffering.\n */\n","ex":[{"k":"Reference","t":"playbackDuration","c":"@discordjs/voice!AudioPlayerPausedState#playbackDuration"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":131,"co":2,"ro":false,"op":false,"r":"Public","n":"playbackDuration","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPausedState#resource:member","d":"/**\n * The current resource of the audio player.\n */\n","ex":[{"k":"Reference","t":"resource","c":"@discordjs/voice!AudioPlayerPausedState#resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":";"}],"l":136,"co":2,"ro":false,"op":false,"r":"Public","n":"resource","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPausedState#silencePacketsRemaining:member","d":"/**\n * How many silence packets still need to be played to avoid audio interpolation due to the stream suddenly pausing.\n */\n","ex":[{"k":"Reference","t":"silencePacketsRemaining","c":"@discordjs/voice!AudioPlayerPausedState#silencePacketsRemaining"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":141,"co":2,"ro":false,"op":false,"r":"Public","n":"silencePacketsRemaining","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPausedState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!AudioPlayerPausedState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerStatus.AutoPaused","c":"@discordjs/voice!AudioPlayerStatus.AutoPaused:member"},{"k":"Content","t":" | "},{"k":"Reference","t":"AudioPlayerStatus.Paused","c":"@discordjs/voice!AudioPlayerStatus.Paused:member"},{"k":"Content","t":";"}],"l":143,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!AudioPlayerPlayingState:interface","d":"/**\n * The state that an AudioPlayer is in when it is actively playing an AudioResource. When playback ends, it will enter the Idle state.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioPlayerPlayingState","c":"@discordjs/voice!AudioPlayerPlayingState:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":100,"co":1,"r":"Public","n":"AudioPlayerPlayingState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPlayingState#missedFrames:member","d":"/**\n * The number of consecutive times that the audio resource has been unable to provide an Opus frame.\n */\n","ex":[{"k":"Reference","t":"missedFrames","c":"@discordjs/voice!AudioPlayerPlayingState#missedFrames"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":104,"co":2,"ro":false,"op":false,"r":"Public","n":"missedFrames","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPlayingState#onStreamError:member","d":"","ex":[{"k":"Reference","t":"onStreamError","c":"@discordjs/voice!AudioPlayerPlayingState#onStreamError"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":105,"co":2,"ro":false,"op":false,"r":"Public","n":"onStreamError","prtr":{"st":2,"en":8}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPlayingState#playbackDuration:member","d":"/**\n * The playback duration in milliseconds of the current audio resource. This includes filler silence packets that have been played when the resource was buffering.\n */\n","ex":[{"k":"Reference","t":"playbackDuration","c":"@discordjs/voice!AudioPlayerPlayingState#playbackDuration"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":111,"co":2,"ro":false,"op":false,"r":"Public","n":"playbackDuration","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPlayingState#resource:member","d":"/**\n * The resource that is being played.\n */\n","ex":[{"k":"Reference","t":"resource","c":"@discordjs/voice!AudioPlayerPlayingState#resource"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":";"}],"l":116,"co":2,"ro":false,"op":false,"r":"Public","n":"resource","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!AudioPlayerPlayingState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!AudioPlayerPlayingState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerStatus.Playing","c":"@discordjs/voice!AudioPlayerStatus.Playing:member"},{"k":"Content","t":";"}],"l":118,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"TypeAlias","c":"@discordjs/voice!AudioPlayerState:type","d":"/**\n * The various states that the player can be in.\n */\n","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"AudioPlayerState","c":"@discordjs/voice!AudioPlayerState:type"},{"k":"Content","t":" = "},{"k":"Reference","t":"AudioPlayerBufferingState","c":"@discordjs/voice!AudioPlayerBufferingState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"AudioPlayerIdleState","c":"@discordjs/voice!AudioPlayerIdleState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"AudioPlayerPausedState","c":"@discordjs/voice!AudioPlayerPausedState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"AudioPlayerPlayingState","c":"@discordjs/voice!AudioPlayerPlayingState:interface"},{"k":"Content","t":";"}],"pat":"src/audio/AudioPlayer.ts","l":149,"co":1,"r":"Public","n":"AudioPlayerState","ttr":{"st":3,"en":10}},{"k":"Enum","c":"@discordjs/voice!AudioPlayerStatus:enum","d":"","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"AudioPlayerStatus","c":"@discordjs/voice!AudioPlayerStatus:enum"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":35,"co":1,"r":"Public","n":"AudioPlayerStatus","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!AudioPlayerStatus.AutoPaused:member","d":"/**\n * When the player has paused itself. Only possible with the \"pause\" no subscriber behavior.\n */\n","ex":[{"k":"Reference","t":"AutoPaused","c":"@discordjs/voice!AudioPlayerStatus.AutoPaused:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"autopaused\""}],"l":39,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"AutoPaused"},{"k":"EnumMember","c":"@discordjs/voice!AudioPlayerStatus.Buffering:member","d":"/**\n * When the player is waiting for an audio resource to become readable before transitioning to Playing.\n */\n","ex":[{"k":"Reference","t":"Buffering","c":"@discordjs/voice!AudioPlayerStatus.Buffering:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"buffering\""}],"l":44,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Buffering"},{"k":"EnumMember","c":"@discordjs/voice!AudioPlayerStatus.Idle:member","d":"/**\n * When there is currently no resource for the player to be playing.\n */\n","ex":[{"k":"Reference","t":"Idle","c":"@discordjs/voice!AudioPlayerStatus.Idle:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"idle\""}],"l":49,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Idle"},{"k":"EnumMember","c":"@discordjs/voice!AudioPlayerStatus.Paused:member","d":"/**\n * When the player has been manually paused.\n */\n","ex":[{"k":"Reference","t":"Paused","c":"@discordjs/voice!AudioPlayerStatus.Paused:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"paused\""}],"l":54,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Paused"},{"k":"EnumMember","c":"@discordjs/voice!AudioPlayerStatus.Playing:member","d":"/**\n * When the player is actively playing an audio resource.\n */\n","ex":[{"k":"Reference","t":"Playing","c":"@discordjs/voice!AudioPlayerStatus.Playing:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"playing\""}],"l":59,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Playing"}]},{"k":"Class","c":"@discordjs/voice!AudioReceiveStream:class","d":"/**\n * A readable stream of Opus packets received from a specific entity in a Discord voice connection.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"AudioReceiveStream","c":"@discordjs/voice!AudioReceiveStream:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":" "}],"pat":"src/receive/AudioReceiveStream.ts","l":50,"co":1,"r":"Public","ab":false,"n":"AudioReceiveStream","pmo":false,"ms":[{"k":"Method","c":"@discordjs/voice!AudioReceiveStream#_read:member(1)","d":"","ex":[{"k":"Reference","t":"_read","c":"@discordjs/voice!AudioReceiveStream#_read"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":88,"co":18,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"_read"},{"k":"Constructor","c":"@discordjs/voice!AudioReceiveStream:constructor(1)","d":"/**\n * Constructs a new instance of the `AudioReceiveStream` class\n */\n","ex":[{"k":"Content","t":"constructor({ "},{"k":"Reference","t":"end","c":"@discordjs/voice!~end"},{"k":"Content","t":", ..."},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":" }: "},{"k":"Reference","t":"AudioReceiveStreamOptions","c":"@discordjs/voice!AudioReceiveStreamOptions:interface"},{"k":"Content","t":");"}],"l":56,"co":38,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"{ end, ...options }","ptr":{"st":5,"en":6},"op":false,"rs":false}]},{"k":"Property","c":"@discordjs/voice!AudioReceiveStream#end:member","d":"/**\n * The end behavior of the receive stream.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"end","c":"@discordjs/voice!AudioReceiveStream#end"},{"k":"Content","t":": "},{"k":"Reference","t":"EndBehavior","c":"@discordjs/voice!EndBehavior:type"},{"k":"Content","t":";"}],"l":54,"co":2,"ro":true,"op":false,"r":"Public","n":"end","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!AudioReceiveStream#push:member(1)","d":"","ex":[{"k":"Reference","t":"push","c":"@discordjs/voice!AudioReceiveStream#push"},{"k":"Content","t":"("},{"k":"Reference","t":"buffer","c":"@discordjs/voice!~buffer"},{"k":"Content","t":": "},{"k":"Reference","t":"Buffer","c":"!\"\\\"buffer\\\"\".__global.Buffer:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"null"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":67,"co":18,"sta":false,"rtr":{"st":8,"en":9},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"buffer","ptr":{"st":4,"en":7},"op":false,"rs":false}],"op":false,"ab":false,"n":"push"}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!AudioReceiveStreamOptions:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"AudioReceiveStreamOptions","c":"@discordjs/voice!AudioReceiveStreamOptions:interface"},{"k":"Content","t":" extends "},{"k":"Reference","t":"ReadableOptions","c":"!\"\\\"stream\\\"\".internal.ReadableOptions:interface"},{"k":"Content","t":" "}],"pat":"src/receive/AudioReceiveStream.ts","l":34,"co":1,"r":"Public","n":"AudioReceiveStreamOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!AudioReceiveStreamOptions#end:member","d":"","ex":[{"k":"Reference","t":"end","c":"@discordjs/voice!AudioReceiveStreamOptions#end"},{"k":"Content","t":": "},{"k":"Reference","t":"EndBehavior","c":"@discordjs/voice!EndBehavior:type"},{"k":"Content","t":";"}],"l":35,"co":2,"ro":false,"op":false,"r":"Public","n":"end","prtr":{"st":2,"en":3}}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Class","c":"@discordjs/voice!AudioResource:class","d":"/**\n * Represents an audio resource that can be played by an audio player.\n *\n * @typeParam Metadata - the type for the metadata (if any) of the audio resource\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":" = "},{"k":"Reference","t":"unknown"},{"k":"Content","t":"> "}],"pat":"src/audio/AudioResource.ts","l":44,"co":1,"r":"Public","tps":[{"tp":"Metadata","ctr":{"st":0,"en":0},"dtr":{"st":5,"en":6}}],"ab":false,"n":"AudioResource","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!AudioResource:constructor(1)","d":"/**\n * Constructs a new instance of the `AudioResource` class\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"edges","c":"@discordjs/voice!~edges"},{"k":"Content","t":": "},{"k":"Content","t":"readonly "},{"k":"Reference","t":"Edge","c":"@discordjs/voice!~Edge:interface"},{"k":"Content","t":"[]"},{"k":"Content","t":", "},{"k":"Reference","t":"streams","c":"@discordjs/voice!~streams"},{"k":"Content","t":": "},{"k":"Content","t":"readonly "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":"[]"},{"k":"Content","t":", "},{"k":"Reference","t":"metadata","c":"@discordjs/voice!~metadata"},{"k":"Content","t":": "},{"k":"Reference","t":"Metadata"},{"k":"Content","t":", "},{"k":"Reference","t":"silencePaddingFrames","c":"@discordjs/voice!~silencePaddingFrames"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":");"}],"l":97,"co":31,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"edges","ptr":{"st":3,"en":6},"op":false,"rs":false},{"pn":"streams","ptr":{"st":9,"en":12},"op":false,"rs":false},{"pn":"metadata","ptr":{"st":15,"en":16},"op":false,"rs":false},{"pn":"silencePaddingFrames","ptr":{"st":19,"en":20},"op":false,"rs":false}]},{"k":"Property","c":"@discordjs/voice!AudioResource#audioPlayer:member","d":"/**\n * The audio player that the resource is subscribed to, if any.\n */\n","ex":[{"k":"Reference","t":"audioPlayer","c":"@discordjs/voice!AudioResource#audioPlayer"},{"k":"Content","t":"?: "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":77,"co":9,"ro":false,"op":true,"r":"Public","n":"audioPlayer","prtr":{"st":2,"en":5},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#edges:member","d":"/**\n * The pipeline used to convert the input stream into a playable format. For example, this may contain an FFmpeg component for arbitrary inputs, and it may contain a VolumeTransformer component for resources with inline volume transformation enabled.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"edges","c":"@discordjs/voice!AudioResource#edges"},{"k":"Content","t":": "},{"k":"Content","t":"readonly "},{"k":"Reference","t":"Edge","c":"@discordjs/voice!~Edge:interface"},{"k":"Content","t":"[]"},{"k":"Content","t":";"}],"l":55,"co":2,"ro":true,"op":false,"r":"Public","n":"edges","prtr":{"st":3,"en":6},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#encoder:member","d":"/**\n * If using an Opus encoder to create this audio resource, then this will be a prism-media opus.Encoder. You can use this to control settings such as bitrate, FEC, PLP.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"encoder","c":"@discordjs/voice!AudioResource#encoder"},{"k":"Content","t":"?: "},{"k":"Reference","t":"prism.opus.Encoder","c":"!prism.opus.Encoder:type"},{"k":"Content","t":";"}],"l":72,"co":2,"ro":true,"op":true,"r":"Public","n":"encoder","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#ended:member","d":"/**\n * Whether this resource has ended or not.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"ended","c":"@discordjs/voice!AudioResource#ended"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":139,"co":2,"ro":true,"op":false,"r":"Public","n":"ended","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#metadata:member","d":"/**\n * Optional metadata that can be used to identify the resource.\n */\n","ex":[{"k":"Reference","t":"metadata","c":"@discordjs/voice!AudioResource#metadata"},{"k":"Content","t":": "},{"k":"Reference","t":"Metadata"},{"k":"Content","t":";"}],"l":60,"co":9,"ro":false,"op":false,"r":"Public","n":"metadata","prtr":{"st":2,"en":3},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#playbackDuration:member","d":"/**\n * The playback duration of this audio resource, given in milliseconds.\n */\n","ex":[{"k":"Reference","t":"playbackDuration","c":"@discordjs/voice!AudioResource#playbackDuration"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":82,"co":9,"ro":false,"op":false,"r":"Public","n":"playbackDuration","prtr":{"st":2,"en":3},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#playStream:member","d":"/**\n * An object-mode Readable stream that emits Opus packets. This is what is played by audio players.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"playStream","c":"@discordjs/voice!AudioResource#playStream"},{"k":"Content","t":": "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":";"}],"l":48,"co":2,"ro":true,"op":false,"r":"Public","n":"playStream","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#readable:member","d":"/**\n * Whether this resource is readable. If the underlying resource is no longer readable, this will still return true while there are silence padding frames left to play.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"readable","c":"@discordjs/voice!AudioResource#readable"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":125,"co":2,"ro":true,"op":false,"r":"Public","n":"readable","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#silencePaddingFrames:member","d":"/**\n * The number of silence frames to append to the end of the resource's audio stream, to prevent interpolation glitches.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"silencePaddingFrames","c":"@discordjs/voice!AudioResource#silencePaddingFrames"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":92,"co":2,"ro":true,"op":false,"r":"Public","n":"silencePaddingFrames","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#silenceRemaining:member","d":"/**\n * The number of remaining silence frames to play. If -1, the frames have not yet started playing.\n */\n","ex":[{"k":"Reference","t":"silenceRemaining","c":"@discordjs/voice!AudioResource#silenceRemaining"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":97,"co":9,"ro":false,"op":false,"r":"Public","n":"silenceRemaining","prtr":{"st":2,"en":3},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#started:member","d":"/**\n * Whether or not the stream for this resource has started (data has become readable)\n */\n","ex":[{"k":"Reference","t":"started","c":"@discordjs/voice!AudioResource#started"},{"k":"Content","t":": "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":87,"co":9,"ro":false,"op":false,"r":"Public","n":"started","prtr":{"st":2,"en":3},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!AudioResource#volume:member","d":"/**\n * If the resource was created with inline volume transformation enabled, then this will be a prism-media VolumeTransformer. You can use this to alter the volume of the stream.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"volume","c":"@discordjs/voice!AudioResource#volume"},{"k":"Content","t":"?: "},{"k":"Reference","t":"prism.VolumeTransformer","c":"!prism.VolumeTransformer:type"},{"k":"Content","t":";"}],"l":66,"co":2,"ro":true,"op":true,"r":"Public","n":"volume","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false}],"itrs":[]},{"k":"Function","c":"@discordjs/voice!createAudioPlayer:function(1)","d":"/**\n * Creates a new AudioPlayer to be used.\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"createAudioPlayer","c":"@discordjs/voice!createAudioPlayer"},{"k":"Content","t":"("},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":"?: "},{"k":"Reference","t":"CreateAudioPlayerOptions","c":"@discordjs/voice!CreateAudioPlayerOptions:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":";"}],"pat":"src/audio/AudioPlayer.ts","l":648,"co":1,"rtr":{"st":7,"en":8},"r":"Public","oi":1,"ps":[{"pn":"options","ptr":{"st":5,"en":6},"op":true,"rs":false}],"n":"createAudioPlayer"},{"k":"Interface","c":"@discordjs/voice!CreateAudioPlayerOptions:interface","d":"/**\n * Options that can be passed when creating an audio player, used to specify its behavior.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"CreateAudioPlayerOptions","c":"@discordjs/voice!CreateAudioPlayerOptions:interface"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":65,"co":1,"r":"Public","n":"CreateAudioPlayerOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioPlayerOptions#behaviors:member","d":"","ex":[{"k":"Reference","t":"behaviors","c":"@discordjs/voice!CreateAudioPlayerOptions#behaviors"},{"k":"Content","t":"?: "},{"k":"Content","t":"{    "},{"k":"Reference","t":"maxMissedFrames","c":"@discordjs/voice!~__type#maxMissedFrames"},{"k":"Content","t":"?: "},{"k":"Reference","t":"number"},{"k":"Content","t":";    "},{"k":"Reference","t":"noSubscriber","c":"@discordjs/voice!~__type#noSubscriber"},{"k":"Content","t":"?: "},{"k":"Reference","t":"NoSubscriberBehavior","c":"@discordjs/voice!NoSubscriberBehavior:enum"},{"k":"Content","t":";  }"},{"k":"Content","t":";"}],"l":66,"co":2,"ro":false,"op":true,"r":"Public","n":"behaviors","prtr":{"st":2,"en":11}},{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioPlayerOptions#debug:member","d":"","ex":[{"k":"Reference","t":"debug","c":"@discordjs/voice!CreateAudioPlayerOptions#debug"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":70,"co":2,"ro":false,"op":true,"r":"Public","n":"debug","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Function","c":"@discordjs/voice!createAudioResource:function(1)","d":"/**\n * Creates an audio resource that can be played by audio players.\n *\n * @remarks\n *\n * If the input is given as a string, then the inputType option will be overridden and FFmpeg will be used.\n *\n * If the input is not in the correct format, then a pipeline of transcoders and transformers will be created to ensure that the resultant stream is in the correct format for playback. This could involve using FFmpeg, Opus transcoders, and Ogg/WebM demuxers.\n *\n * @param input - The resource to play\n *\n * @param options - Configurable options for creating the resource\n *\n * @typeParam Metadata - the type for the metadata (if any) of the audio resource\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"createAudioResource","c":"@discordjs/voice!createAudioResource"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">("},{"k":"Reference","t":"input","c":"@discordjs/voice!~input"},{"k":"Content","t":": "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":": "},{"k":"Reference","t":"CreateAudioResourceOptions","c":"@discordjs/voice!CreateAudioResourceOptions:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":"> & "},{"k":"Reference","t":"Pick","c":"!Pick:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":" extends "},{"k":"Reference","t":"null"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":" ? "},{"k":"Reference","t":"CreateAudioResourceOptions","c":"@discordjs/voice!CreateAudioResourceOptions:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":"> : "},{"k":"Reference","t":"Required","c":"!Required:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"CreateAudioResourceOptions","c":"@discordjs/voice!CreateAudioResourceOptions:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">>, 'metadata'>"},{"k":"Content","t":"): "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":" extends "},{"k":"Reference","t":"null"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":" ? "},{"k":"Reference","t":"null"},{"k":"Content","t":" : "},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/audio/AudioResource.ts","l":216,"co":1,"rtr":{"st":36,"en":48},"r":"Public","oi":1,"ps":[{"pn":"input","ptr":{"st":7,"en":10},"op":false,"rs":false},{"pn":"options","ptr":{"st":13,"en":35},"op":false,"rs":false}],"tps":[{"tp":"Metadata","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"n":"createAudioResource"},{"k":"Function","c":"@discordjs/voice!createAudioResource:function(2)","d":"/**\n * Creates an audio resource that can be played by audio players.\n *\n * @remarks\n *\n * If the input is given as a string, then the inputType option will be overridden and FFmpeg will be used.\n *\n * If the input is not in the correct format, then a pipeline of transcoders and transformers will be created to ensure that the resultant stream is in the correct format for playback. This could involve using FFmpeg, Opus transcoders, and Ogg/WebM demuxers.\n *\n * @param input - The resource to play\n *\n * @param options - Configurable options for creating the resource\n *\n * @typeParam Metadata - the type for the metadata (if any) of the audio resource\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"createAudioResource","c":"@discordjs/voice!createAudioResource"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":" extends "},{"k":"Reference","t":"null"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":">("},{"k":"Reference","t":"input","c":"@discordjs/voice!~input"},{"k":"Content","t":": "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":"?: "},{"k":"Reference","t":"Omit","c":"!Omit:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"CreateAudioResourceOptions","c":"@discordjs/voice!CreateAudioResourceOptions:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":">, 'metadata'>"},{"k":"Content","t":"): "},{"k":"Reference","t":"AudioResource","c":"@discordjs/voice!AudioResource:class"},{"k":"Content","t":"<"},{"k":"Reference","t":"null"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/audio/AudioResource.ts","l":240,"co":1,"rtr":{"st":24,"en":28},"r":"Public","oi":2,"ps":[{"pn":"input","ptr":{"st":11,"en":14},"op":false,"rs":false},{"pn":"options","ptr":{"st":17,"en":23},"op":true,"rs":false}],"tps":[{"tp":"Metadata","ctr":{"st":5,"en":8},"dtr":{"st":0,"en":0}}],"n":"createAudioResource"},{"k":"Interface","c":"@discordjs/voice!CreateAudioResourceOptions:interface","d":"/**\n * Options that are set when creating a new audio resource.\n *\n * @typeParam Metadata - the type for the metadata (if any) of the audio resource\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"CreateAudioResourceOptions","c":"@discordjs/voice!CreateAudioResourceOptions:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Metadata"},{"k":"Content","t":"> "}],"pat":"src/audio/AudioResource.ts","l":13,"co":1,"r":"Public","tps":[{"tp":"Metadata","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"n":"CreateAudioResourceOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioResourceOptions#inlineVolume:member","d":"/**\n * Whether or not inline volume should be enabled. If enabled, you will be able to change the volume of the stream on-the-fly. However, this also increases the performance cost of playback. Defaults to `false`.\n */\n","ex":[{"k":"Reference","t":"inlineVolume","c":"@discordjs/voice!CreateAudioResourceOptions#inlineVolume"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":18,"co":2,"ro":false,"op":true,"r":"Public","n":"inlineVolume","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioResourceOptions#inputType:member","d":"/**\n * The type of the input stream. Defaults to `StreamType.Arbitrary`.\n */\n","ex":[{"k":"Reference","t":"inputType","c":"@discordjs/voice!CreateAudioResourceOptions#inputType"},{"k":"Content","t":"?: "},{"k":"Reference","t":"StreamType","c":"@discordjs/voice!StreamType:enum"},{"k":"Content","t":";"}],"l":23,"co":2,"ro":false,"op":true,"r":"Public","n":"inputType","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioResourceOptions#metadata:member","d":"/**\n * Optional metadata that can be attached to the resource (e.g. track title, random id). This is useful for identification purposes when the resource is passed around in events. See {@link AudioResource.metadata}\n */\n","ex":[{"k":"Reference","t":"metadata","c":"@discordjs/voice!CreateAudioResourceOptions#metadata"},{"k":"Content","t":"?: "},{"k":"Reference","t":"Metadata"},{"k":"Content","t":";"}],"l":30,"co":2,"ro":false,"op":true,"r":"Public","n":"metadata","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!CreateAudioResourceOptions#silencePaddingFrames:member","d":"/**\n * The number of silence frames to append to the end of the resource's audio stream, to prevent interpolation glitches. Defaults to 5.\n */\n","ex":[{"k":"Reference","t":"silencePaddingFrames","c":"@discordjs/voice!CreateAudioResourceOptions#silencePaddingFrames"},{"k":"Content","t":"?: "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":36,"co":2,"ro":false,"op":true,"r":"Public","n":"silencePaddingFrames","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Function","c":"@discordjs/voice!createDefaultAudioReceiveStreamOptions:function(1)","d":"","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"createDefaultAudioReceiveStreamOptions","c":"@discordjs/voice!createDefaultAudioReceiveStreamOptions"},{"k":"Content","t":"(): "},{"k":"Reference","t":"AudioReceiveStreamOptions","c":"@discordjs/voice!AudioReceiveStreamOptions:interface"},{"k":"Content","t":";"}],"pat":"src/receive/AudioReceiveStream.ts","l":38,"co":1,"rtr":{"st":3,"en":4},"r":"Public","oi":1,"ps":[],"n":"createDefaultAudioReceiveStreamOptions"},{"k":"Interface","c":"@discordjs/voice!CreateVoiceConnectionOptions:interface","d":"/**\n * The options that can be given when creating a voice connection.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"CreateVoiceConnectionOptions","c":"@discordjs/voice!CreateVoiceConnectionOptions:interface"},{"k":"Content","t":" "}],"pat":"src/joinVoiceChannel.ts","l":8,"co":1,"r":"Public","n":"CreateVoiceConnectionOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!CreateVoiceConnectionOptions#adapterCreator:member","d":"","ex":[{"k":"Reference","t":"adapterCreator","c":"@discordjs/voice!CreateVoiceConnectionOptions#adapterCreator"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterCreator","c":"@discordjs/voice!DiscordGatewayAdapterCreator:type"},{"k":"Content","t":";"}],"l":9,"co":2,"ro":false,"op":false,"r":"Public","n":"adapterCreator","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!CreateVoiceConnectionOptions#debug:member","d":"/**\n * If true, debug messages will be enabled for the voice connection and its related components. Defaults to false.\n */\n","ex":[{"k":"Reference","t":"debug","c":"@discordjs/voice!CreateVoiceConnectionOptions#debug"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":15,"co":2,"ro":false,"op":true,"r":"Public","n":"debug","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"Function","c":"@discordjs/voice!demuxProbe:function(1)","d":"/**\n * Attempt to probe a readable stream to figure out whether it can be demuxed using an Ogg or WebM Opus demuxer.\n *\n * @param stream - The readable stream to probe\n *\n * @param probeSize - The number of bytes to attempt to read before giving up on the probe\n *\n * @param validator - The Opus Head validator function\n *\n * @experimental\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"demuxProbe","c":"@discordjs/voice!demuxProbe"},{"k":"Content","t":"("},{"k":"Reference","t":"stream","c":"@discordjs/voice!~stream"},{"k":"Content","t":": "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":", "},{"k":"Reference","t":"probeSize","c":"@discordjs/voice!~probeSize"},{"k":"Content","t":"?: "},{"k":"Reference","t":"number"},{"k":"Content","t":", "},{"k":"Reference","t":"validator","c":"@discordjs/voice!~validator"},{"k":"Content","t":"?: "},{"k":"Reference","t":"typeof"},{"k":"Content","t":" "},{"k":"Reference","t":"validateDiscordOpusHead","c":"@discordjs/voice!validateDiscordOpusHead:function"},{"k":"Content","t":"): "},{"k":"Reference","t":"Promise","c":"!Promise:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"ProbeInfo","c":"@discordjs/voice!ProbeInfo:interface"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/util/demuxProbe.ts","l":44,"co":1,"rtr":{"st":17,"en":21},"r":"Public","oi":1,"ps":[{"pn":"stream","ptr":{"st":5,"en":6},"op":false,"rs":false},{"pn":"probeSize","ptr":{"st":9,"en":10},"op":true,"rs":false},{"pn":"validator","ptr":{"st":13,"en":16},"op":true,"rs":false}],"n":"demuxProbe"},{"k":"TypeAlias","c":"@discordjs/voice!DiscordGatewayAdapterCreator:type","d":"/**\n * A function used to build adapters. It accepts a methods parameter that contains functions that can be called by the implementer when new data is received on its gateway connection. In return, the implementer will return some methods that the library can call - e.g. to send messages on the gateway, or to signal that the adapter can be removed.\n */\n","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"DiscordGatewayAdapterCreator","c":"@discordjs/voice!DiscordGatewayAdapterCreator:type"},{"k":"Content","t":" = "},{"k":"Content","t":"("},{"k":"Reference","t":"methods","c":"@discordjs/voice!~methods"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterLibraryMethods","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":";"}],"pat":"src/util/adapter.ts","l":50,"co":1,"r":"Public","n":"DiscordGatewayAdapterCreator","ttr":{"st":3,"en":9}},{"k":"Interface","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface","d":"/**\n * Methods that are provided by the implementer of a Discord gateway DiscordGatewayAdapter.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":" "}],"pat":"src/util/adapter.ts","l":29,"co":1,"r":"Public","n":"DiscordGatewayAdapterImplementerMethods","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods#destroy:member(1)","d":"/**\n * This will be called by \\@discordjs/voice when the adapter can safely be destroyed as it will no longer be used.\n */\n","ex":[{"k":"Reference","t":"destroy","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods#destroy"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":34,"co":2,"op":false,"rtr":{"st":2,"en":3},"r":"Public","oi":1,"ps":[],"n":"destroy"},{"k":"MethodSignature","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods#sendPayload:member(1)","d":"/**\n * Implement this method such that the given payload is sent to the main Discord gateway connection.\n *\n * @param payload - The payload to send to the main Discord gateway connection\n *\n * @returns `false` if the payload definitely failed to send - in this case, the voice connection disconnects\n */\n","ex":[{"k":"Reference","t":"sendPayload","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods#sendPayload"},{"k":"Content","t":"("},{"k":"Reference","t":"payload","c":"@discordjs/voice!~payload"},{"k":"Content","t":": "},{"k":"Reference","t":"any"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":41,"co":2,"op":false,"rtr":{"st":6,"en":7},"r":"Public","oi":1,"ps":[{"pn":"payload","ptr":{"st":4,"en":5},"op":false,"rs":false}],"n":"sendPayload"}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods:interface","d":"/**\n * Methods that are provided by the \\@discordjs/voice library to implementations of Discord gateway DiscordGatewayAdapters.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"DiscordGatewayAdapterLibraryMethods","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods:interface"},{"k":"Content","t":" "}],"pat":"src/util/adapter.ts","l":7,"co":1,"r":"Public","n":"DiscordGatewayAdapterLibraryMethods","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#destroy:member(1)","d":"/**\n * Call this when the adapter can no longer be used (e.g. due to a disconnect from the main gateway)\n */\n","ex":[{"k":"Reference","t":"destroy","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#destroy"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":11,"co":2,"op":false,"rtr":{"st":2,"en":3},"r":"Public","oi":1,"ps":[],"n":"destroy"},{"k":"MethodSignature","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceServerUpdate:member(1)","d":"/**\n * Call this when you receive a VOICE_SERVER_UPDATE payload that is relevant to the adapter.\n *\n * @param data - The inner data of the VOICE_SERVER_UPDATE payload\n */\n","ex":[{"k":"Reference","t":"onVoiceServerUpdate","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceServerUpdate"},{"k":"Content","t":"("},{"k":"Reference","t":"data","c":"@discordjs/voice!~data"},{"k":"Content","t":": "},{"k":"Reference","t":"GatewayVoiceServerUpdateDispatchData","c":"discord-api-types!GatewayVoiceServerUpdateDispatchData:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":17,"co":2,"op":false,"rtr":{"st":6,"en":7},"r":"Public","oi":1,"ps":[{"pn":"data","ptr":{"st":4,"en":5},"op":false,"rs":false}],"n":"onVoiceServerUpdate"},{"k":"MethodSignature","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceStateUpdate:member(1)","d":"/**\n * Call this when you receive a VOICE_STATE_UPDATE payload that is relevant to the adapter.\n *\n * @param data - The inner data of the VOICE_STATE_UPDATE payload\n */\n","ex":[{"k":"Reference","t":"onVoiceStateUpdate","c":"@discordjs/voice!DiscordGatewayAdapterLibraryMethods#onVoiceStateUpdate"},{"k":"Content","t":"("},{"k":"Reference","t":"data","c":"@discordjs/voice!~data"},{"k":"Content","t":": "},{"k":"Reference","t":"GatewayVoiceStateUpdateDispatchData","c":"discord-api-types!GatewayVoiceStateUpdateDispatchData:type"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":23,"co":2,"op":false,"rtr":{"st":6,"en":7},"r":"Public","oi":1,"ps":[{"pn":"data","ptr":{"st":4,"en":5},"op":false,"rs":false}],"n":"onVoiceStateUpdate"}],"etrs":[]},{"k":"TypeAlias","c":"@discordjs/voice!EndBehavior:type","d":"","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"EndBehavior","c":"@discordjs/voice!EndBehavior:type"},{"k":"Content","t":" = "},{"k":"Content","t":"{  "},{"k":"Reference","t":"behavior","c":"@discordjs/voice!~__type#behavior"},{"k":"Content","t":": "},{"k":"Reference","t":"EndBehaviorType.AfterInactivity","c":"@discordjs/voice!EndBehaviorType.AfterInactivity:member"},{"k":"Content","t":" | "},{"k":"Reference","t":"EndBehaviorType.AfterSilence","c":"@discordjs/voice!EndBehaviorType.AfterSilence:member"},{"k":"Content","t":";  "},{"k":"Reference","t":"duration","c":"@discordjs/voice!~__type#duration"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";} | {  "},{"k":"Reference","t":"behavior","c":"@discordjs/voice!~__type#behavior"},{"k":"Content","t":": "},{"k":"Reference","t":"EndBehaviorType.Manual","c":"@discordjs/voice!EndBehaviorType.Manual:member"},{"k":"Content","t":";}"},{"k":"Content","t":";"}],"pat":"src/receive/AudioReceiveStream.ts","l":25,"co":1,"r":"Public","n":"EndBehavior","ttr":{"st":3,"en":18}},{"k":"Enum","c":"@discordjs/voice!EndBehaviorType:enum","d":"/**\n * The different behaviors an audio receive stream can have for deciding when to end.\n */\n","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"EndBehaviorType","c":"@discordjs/voice!EndBehaviorType:enum"},{"k":"Content","t":" "}],"pat":"src/receive/AudioReceiveStream.ts","l":8,"co":1,"r":"Public","n":"EndBehaviorType","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!EndBehaviorType.AfterInactivity:member","d":"/**\n * The stream will end after a given time period of no audio packets.\n */\n","ex":[{"k":"Reference","t":"AfterInactivity","c":"@discordjs/voice!EndBehaviorType.AfterInactivity:member"},{"k":"Content","t":" = "},{"k":"Content","t":"2"}],"l":22,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"AfterInactivity"},{"k":"EnumMember","c":"@discordjs/voice!EndBehaviorType.AfterSilence:member","d":"/**\n * The stream will end after a given time period of silence/no audio packets.\n */\n","ex":[{"k":"Reference","t":"AfterSilence","c":"@discordjs/voice!EndBehaviorType.AfterSilence:member"},{"k":"Content","t":" = "},{"k":"Content","t":"1"}],"l":17,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"AfterSilence"},{"k":"EnumMember","c":"@discordjs/voice!EndBehaviorType.Manual:member","d":"/**\n * The stream will only end when manually destroyed.\n */\n","ex":[{"k":"Reference","t":"Manual","c":"@discordjs/voice!EndBehaviorType.Manual:member"},{"k":"Content","t":" = "},{"k":"Content","t":"0"}],"l":12,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Manual"}]},{"k":"Function","c":"@discordjs/voice!entersState:function(1)","d":"/**\n * Allows a voice connection a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The voice connection that we want to observe the state change for\n *\n * @param status - The status that the voice connection should be in\n *\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"entersState","c":"@discordjs/voice!entersState"},{"k":"Content","t":"("},{"k":"Reference","t":"target","c":"@discordjs/voice!~target"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":", "},{"k":"Reference","t":"status","c":"@discordjs/voice!~status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus","c":"@discordjs/voice!VoiceConnectionStatus:enum"},{"k":"Content","t":", "},{"k":"Reference","t":"timeoutOrSignal","c":"@discordjs/voice!~timeoutOrSignal"},{"k":"Content","t":": "},{"k":"Reference","t":"AbortSignal","c":"@types/node!__global.AbortSignal:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"number"},{"k":"Content","t":"): "},{"k":"Reference","t":"Promise","c":"!Promise:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/util/entersState.ts","l":13,"co":1,"rtr":{"st":17,"en":21},"r":"Public","oi":1,"ps":[{"pn":"target","ptr":{"st":5,"en":6},"op":false,"rs":false},{"pn":"status","ptr":{"st":9,"en":10},"op":false,"rs":false},{"pn":"timeoutOrSignal","ptr":{"st":13,"en":16},"op":false,"rs":false}],"n":"entersState"},{"k":"Function","c":"@discordjs/voice!entersState:function(2)","d":"/**\n * Allows an audio player a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The audio player that we want to observe the state change for\n *\n * @param status - The status that the audio player should be in\n *\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"entersState","c":"@discordjs/voice!entersState"},{"k":"Content","t":"("},{"k":"Reference","t":"target","c":"@discordjs/voice!~target"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":", "},{"k":"Reference","t":"status","c":"@discordjs/voice!~status"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayerStatus","c":"@discordjs/voice!AudioPlayerStatus:enum"},{"k":"Content","t":", "},{"k":"Reference","t":"timeoutOrSignal","c":"@discordjs/voice!~timeoutOrSignal"},{"k":"Content","t":": "},{"k":"Reference","t":"AbortSignal","c":"@types/node!__global.AbortSignal:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"number"},{"k":"Content","t":"): "},{"k":"Reference","t":"Promise","c":"!Promise:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/util/entersState.ts","l":26,"co":1,"rtr":{"st":17,"en":21},"r":"Public","oi":2,"ps":[{"pn":"target","ptr":{"st":5,"en":6},"op":false,"rs":false},{"pn":"status","ptr":{"st":9,"en":10},"op":false,"rs":false},{"pn":"timeoutOrSignal","ptr":{"st":13,"en":16},"op":false,"rs":false}],"n":"entersState"},{"k":"Function","c":"@discordjs/voice!generateDependencyReport:function(1)","d":"/**\n * Generates a report of the dependencies used by the \\@discordjs/voice module. Useful for debugging.\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"generateDependencyReport","c":"@discordjs/voice!generateDependencyReport"},{"k":"Content","t":"(): "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"pat":"src/util/generateDependencyReport.ts","l":51,"co":1,"rtr":{"st":3,"en":4},"r":"Public","oi":1,"ps":[],"n":"generateDependencyReport"},{"k":"Function","c":"@discordjs/voice!getGroups:function(1)","d":"/**\n * Retrieves the map of group names to maps of voice connections. By default, all voice connections are created under the 'default' group.\n *\n * @returns The group map\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"getGroups","c":"@discordjs/voice!getGroups"},{"k":"Content","t":"(): "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":">>"},{"k":"Content","t":";"}],"pat":"src/DataStore.ts","l":50,"co":1,"rtr":{"st":3,"en":13},"r":"Public","oi":1,"ps":[],"n":"getGroups"},{"k":"Function","c":"@discordjs/voice!getVoiceConnection:function(1)","d":"/**\n * Finds a voice connection with the given guild id and group. Defaults to the 'default' group.\n *\n * @param guildId - The guild id of the voice connection\n *\n * @param group - the group that the voice connection was registered with\n *\n * @returns The voice connection, if it exists\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"getVoiceConnection","c":"@discordjs/voice!getVoiceConnection"},{"k":"Content","t":"("},{"k":"Reference","t":"guildId","c":"@discordjs/voice!~guildId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"group","c":"@discordjs/voice!~group"},{"k":"Content","t":"?: "},{"k":"Reference","t":"string"},{"k":"Content","t":"): "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"pat":"src/DataStore.ts","l":87,"co":1,"rtr":{"st":11,"en":14},"r":"Public","oi":1,"ps":[{"pn":"guildId","ptr":{"st":5,"en":6},"op":false,"rs":false},{"pn":"group","ptr":{"st":9,"en":10},"op":true,"rs":false}],"n":"getVoiceConnection"},{"k":"Function","c":"@discordjs/voice!getVoiceConnections:function(1)","d":"/**\n * Retrieves all the voice connections under the 'default' group.\n *\n * @param group - The group to look up\n *\n * @returns The map of voice connections\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"getVoiceConnections","c":"@discordjs/voice!getVoiceConnections"},{"k":"Content","t":"("},{"k":"Reference","t":"group","c":"@discordjs/voice!~group"},{"k":"Content","t":"?: "},{"k":"Content","t":"'default'"},{"k":"Content","t":"): "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/DataStore.ts","l":60,"co":1,"rtr":{"st":7,"en":13},"r":"Public","oi":1,"ps":[{"pn":"group","ptr":{"st":5,"en":6},"op":true,"rs":false}],"n":"getVoiceConnections"},{"k":"Function","c":"@discordjs/voice!getVoiceConnections:function(2)","d":"/**\n * Retrieves all the voice connections under the given group name.\n *\n * @param group - The group to look up\n *\n * @returns The map of voice connections\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"getVoiceConnections","c":"@discordjs/voice!getVoiceConnections"},{"k":"Content","t":"("},{"k":"Reference","t":"group","c":"@discordjs/voice!~group"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":"): "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":"> | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"pat":"src/DataStore.ts","l":68,"co":1,"rtr":{"st":7,"en":14},"r":"Public","oi":2,"ps":[{"pn":"group","ptr":{"st":5,"en":6},"op":false,"rs":false}],"n":"getVoiceConnections"},{"k":"Interface","c":"@discordjs/voice!JoinConfig:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"JoinConfig","c":"@discordjs/voice!JoinConfig:interface"},{"k":"Content","t":" "}],"pat":"src/DataStore.ts","l":5,"co":1,"r":"Public","n":"JoinConfig","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!JoinConfig#channelId:member","d":"","ex":[{"k":"Reference","t":"channelId","c":"@discordjs/voice!JoinConfig#channelId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":" | "},{"k":"Reference","t":"null"},{"k":"Content","t":";"}],"l":6,"co":2,"ro":false,"op":false,"r":"Public","n":"channelId","prtr":{"st":2,"en":5}},{"k":"PropertySignature","c":"@discordjs/voice!JoinConfig#group:member","d":"","ex":[{"k":"Reference","t":"group","c":"@discordjs/voice!JoinConfig#group"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":7,"co":2,"ro":false,"op":false,"r":"Public","n":"group","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinConfig#guildId:member","d":"","ex":[{"k":"Reference","t":"guildId","c":"@discordjs/voice!JoinConfig#guildId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":8,"co":2,"ro":false,"op":false,"r":"Public","n":"guildId","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinConfig#selfDeaf:member","d":"","ex":[{"k":"Reference","t":"selfDeaf","c":"@discordjs/voice!JoinConfig#selfDeaf"},{"k":"Content","t":": "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":9,"co":2,"ro":false,"op":false,"r":"Public","n":"selfDeaf","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinConfig#selfMute:member","d":"","ex":[{"k":"Reference","t":"selfMute","c":"@discordjs/voice!JoinConfig#selfMute"},{"k":"Content","t":": "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":10,"co":2,"ro":false,"op":false,"r":"Public","n":"selfMute","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Function","c":"@discordjs/voice!joinVoiceChannel:function(1)","d":"/**\n * Creates a VoiceConnection to a Discord voice channel.\n *\n * @param options - the options for joining the voice channel\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"joinVoiceChannel","c":"@discordjs/voice!joinVoiceChannel"},{"k":"Content","t":"("},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":": "},{"k":"Reference","t":"CreateVoiceConnectionOptions","c":"@discordjs/voice!CreateVoiceConnectionOptions:interface"},{"k":"Content","t":" & "},{"k":"Reference","t":"JoinVoiceChannelOptions","c":"@discordjs/voice!JoinVoiceChannelOptions:interface"},{"k":"Content","t":"): "},{"k":"Content","t":"import(\"./VoiceConnection\")."},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":";"}],"pat":"src/joinVoiceChannel.ts","l":53,"co":1,"rtr":{"st":9,"en":11},"r":"Public","oi":1,"ps":[{"pn":"options","ptr":{"st":5,"en":8},"op":false,"rs":false}],"n":"joinVoiceChannel"},{"k":"Interface","c":"@discordjs/voice!JoinVoiceChannelOptions:interface","d":"/**\n * The options that can be given when joining a voice channel.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"JoinVoiceChannelOptions","c":"@discordjs/voice!JoinVoiceChannelOptions:interface"},{"k":"Content","t":" "}],"pat":"src/joinVoiceChannel.ts","l":21,"co":1,"r":"Public","n":"JoinVoiceChannelOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!JoinVoiceChannelOptions#channelId:member","d":"/**\n * The id of the Discord voice channel to join.\n */\n","ex":[{"k":"Reference","t":"channelId","c":"@discordjs/voice!JoinVoiceChannelOptions#channelId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":25,"co":2,"ro":false,"op":false,"r":"Public","n":"channelId","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinVoiceChannelOptions#group:member","d":"/**\n * An optional group identifier for the voice connection.\n */\n","ex":[{"k":"Reference","t":"group","c":"@discordjs/voice!JoinVoiceChannelOptions#group"},{"k":"Content","t":"?: "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":30,"co":2,"ro":false,"op":true,"r":"Public","n":"group","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinVoiceChannelOptions#guildId:member","d":"/**\n * The id of the guild that the voice channel belongs to.\n */\n","ex":[{"k":"Reference","t":"guildId","c":"@discordjs/voice!JoinVoiceChannelOptions#guildId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":35,"co":2,"ro":false,"op":false,"r":"Public","n":"guildId","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinVoiceChannelOptions#selfDeaf:member","d":"/**\n * Whether to join the channel deafened (defaults to true)\n */\n","ex":[{"k":"Reference","t":"selfDeaf","c":"@discordjs/voice!JoinVoiceChannelOptions#selfDeaf"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":40,"co":2,"ro":false,"op":true,"r":"Public","n":"selfDeaf","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!JoinVoiceChannelOptions#selfMute:member","d":"/**\n * Whether to join the channel muted (defaults to true)\n */\n","ex":[{"k":"Reference","t":"selfMute","c":"@discordjs/voice!JoinVoiceChannelOptions#selfMute"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":45,"co":2,"ro":false,"op":true,"r":"Public","n":"selfMute","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Enum","c":"@discordjs/voice!NoSubscriberBehavior:enum","d":"/**\n * Describes the behavior of the player when an audio packet is played but there are no available voice connections to play to.\n */\n","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"NoSubscriberBehavior","c":"@discordjs/voice!NoSubscriberBehavior:enum"},{"k":"Content","t":" "}],"pat":"src/audio/AudioPlayer.ts","l":18,"co":1,"r":"Public","n":"NoSubscriberBehavior","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!NoSubscriberBehavior.Pause:member","d":"/**\n * Pauses playing the stream until a voice connection becomes available.\n */\n","ex":[{"k":"Reference","t":"Pause","c":"@discordjs/voice!NoSubscriberBehavior.Pause:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"pause\""}],"l":22,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Pause"},{"k":"EnumMember","c":"@discordjs/voice!NoSubscriberBehavior.Play:member","d":"/**\n * Continues to play through the resource regardless.\n */\n","ex":[{"k":"Reference","t":"Play","c":"@discordjs/voice!NoSubscriberBehavior.Play:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"play\""}],"l":27,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Play"},{"k":"EnumMember","c":"@discordjs/voice!NoSubscriberBehavior.Stop:member","d":"/**\n * The player stops and enters the Idle state.\n */\n","ex":[{"k":"Reference","t":"Stop","c":"@discordjs/voice!NoSubscriberBehavior.Stop:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"stop\""}],"l":32,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Stop"}]},{"k":"Class","c":"@discordjs/voice!PlayerSubscription:class","d":"/**\n * Represents a subscription of a voice connection to an audio player, allowing the audio player to play audio on the voice connection.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" "}],"pat":"src/audio/PlayerSubscription.ts","l":9,"co":1,"r":"Public","ab":false,"n":"PlayerSubscription","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!PlayerSubscription:constructor(1)","d":"/**\n * Constructs a new instance of the `PlayerSubscription` class\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"connection","c":"@discordjs/voice!~connection"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":", "},{"k":"Reference","t":"player","c":"@discordjs/voice!~player"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":");"}],"l":18,"co":38,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"connection","ptr":{"st":3,"en":4},"op":false,"rs":false},{"pn":"player","ptr":{"st":7,"en":8},"op":false,"rs":false}]},{"k":"Property","c":"@discordjs/voice!PlayerSubscription#connection:member","d":"/**\n * The voice connection of this subscription.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"connection","c":"@discordjs/voice!PlayerSubscription#connection"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":";"}],"l":13,"co":2,"ro":true,"op":false,"r":"Public","n":"connection","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!PlayerSubscription#player:member","d":"/**\n * The audio player of this subscription.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"player","c":"@discordjs/voice!PlayerSubscription#player"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":";"}],"l":18,"co":2,"ro":true,"op":false,"r":"Public","n":"player","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!PlayerSubscription#unsubscribe:member(1)","d":"/**\n * Unsubscribes the connection from the audio player, meaning that the audio player cannot stream audio to it until a new subscription is made.\n */\n","ex":[{"k":"Reference","t":"unsubscribe","c":"@discordjs/voice!PlayerSubscription#unsubscribe"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":29,"co":9,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"unsubscribe"}],"itrs":[]},{"k":"Interface","c":"@discordjs/voice!ProbeInfo:interface","d":"/**\n * The resulting information after probing an audio stream\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"ProbeInfo","c":"@discordjs/voice!ProbeInfo:interface"},{"k":"Content","t":" "}],"pat":"src/util/demuxProbe.ts","l":23,"co":1,"r":"Public","n":"ProbeInfo","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!ProbeInfo#stream:member","d":"/**\n * The readable audio stream to use. You should use this rather than the input stream, as the probing function can sometimes read the input stream to its end and cause the stream to close.\n */\n","ex":[{"k":"Reference","t":"stream","c":"@discordjs/voice!ProbeInfo#stream"},{"k":"Content","t":": "},{"k":"Reference","t":"Readable","c":"!\"\\\"stream\\\"\".internal.Readable:class"},{"k":"Content","t":";"}],"l":28,"co":2,"ro":false,"op":false,"r":"Public","n":"stream","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!ProbeInfo#type:member","d":"/**\n * The recommended stream type for this audio stream.\n */\n","ex":[{"k":"Reference","t":"type","c":"@discordjs/voice!ProbeInfo#type"},{"k":"Content","t":": "},{"k":"Reference","t":"StreamType","c":"@discordjs/voice!StreamType:enum"},{"k":"Content","t":";"}],"l":33,"co":2,"ro":false,"op":false,"r":"Public","n":"type","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Class","c":"@discordjs/voice!SpeakingMap:class","d":"/**\n * Tracks the speaking states of users in a voice channel.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"SpeakingMap","c":"@discordjs/voice!SpeakingMap:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/receive/SpeakingMap.ts","l":23,"co":1,"r":"Public","ab":false,"n":"SpeakingMap","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!SpeakingMap:constructor(1)","d":"/**\n * Constructs a new instance of the `SpeakingMap` class\n */\n","ex":[{"k":"Content","t":"constructor();"}],"l":34,"co":65,"r":"Public","pr":false,"oi":1,"ps":[]},{"k":"Property","c":"@discordjs/voice!SpeakingMap.DELAY:member","d":"/**\n * The delay after a packet is received from a user until they're marked as not speaking anymore.\n */\n","ex":[{"k":"Content","t":"static readonly "},{"k":"Reference","t":"DELAY","c":"@discordjs/voice!SpeakingMap.DELAY"},{"k":"Content","t":" = "},{"k":"Content","t":"100"},{"k":"Content","t":";"}],"l":27,"co":2,"ro":true,"op":false,"r":"Public","n":"DELAY","prtr":{"st":0,"en":0},"itr":{"st":3,"en":4},"sta":true,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!SpeakingMap#onPacket:member(1)","d":"","ex":[{"k":"Reference","t":"onPacket","c":"@discordjs/voice!SpeakingMap#onPacket"},{"k":"Content","t":"("},{"k":"Reference","t":"userId","c":"@discordjs/voice!~userId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":42,"co":9,"sta":false,"rtr":{"st":6,"en":7},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"userId","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"onPacket"},{"k":"Property","c":"@discordjs/voice!SpeakingMap#users:member","d":"/**\n * The currently speaking users, mapped to the milliseconds since UNIX epoch at which they started speaking.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"users","c":"@discordjs/voice!SpeakingMap#users"},{"k":"Content","t":": "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"number"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"l":32,"co":2,"ro":true,"op":false,"r":"Public","n":"users","prtr":{"st":3,"en":9},"sta":false,"pr":false,"ab":false}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!SpeakingMap:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"SpeakingMap","c":"@discordjs/voice!SpeakingMap:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/receive/SpeakingMap.ts","l":4,"co":1,"r":"Public","n":"SpeakingMap","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!SpeakingMap#on:member(1)","d":"/**\n * Emitted when a user starts speaking.\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!SpeakingMap#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'start'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"userId","c":"@discordjs/voice!~userId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":10,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":1,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!SpeakingMap#on:member(2)","d":"/**\n * Emitted when a user ends speaking.\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!SpeakingMap#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'end'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"userId","c":"@discordjs/voice!~userId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":17,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":2,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Class","c":"@discordjs/voice!SSRCMap:class","d":"/**\n * Maps audio SSRCs to data of users in voice connections.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"SSRCMap","c":"@discordjs/voice!SSRCMap:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/receive/SSRCMap.ts","l":33,"co":1,"r":"Public","ab":false,"n":"SSRCMap","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!SSRCMap:constructor(1)","d":"/**\n * Constructs a new instance of the `SSRCMap` class\n */\n","ex":[{"k":"Content","t":"constructor();"}],"l":37,"co":51,"r":"Public","pr":false,"oi":1,"ps":[]},{"k":"Method","c":"@discordjs/voice!SSRCMap#delete:member(1)","d":"/**\n * Deletes the stored voice data about a user.\n *\n * @param target - The target of the delete operation, either their audio SSRC or user id\n *\n * @returns The data that was deleted, if any\n */\n","ex":[{"k":"Reference","t":"delete","c":"@discordjs/voice!SSRCMap#delete"},{"k":"Content","t":"("},{"k":"Reference","t":"target","c":"@discordjs/voice!~target"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":" | "},{"k":"Reference","t":"string"},{"k":"Content","t":"): "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":87,"co":9,"sta":false,"rtr":{"st":8,"en":11},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"target","ptr":{"st":4,"en":7},"op":false,"rs":false}],"op":false,"ab":false,"n":"delete"},{"k":"Method","c":"@discordjs/voice!SSRCMap#get:member(1)","d":"/**\n * Gets the stored voice data of a user.\n *\n * @param target - The target, either their user id or audio SSRC\n */\n","ex":[{"k":"Reference","t":"get","c":"@discordjs/voice!SSRCMap#get"},{"k":"Content","t":"("},{"k":"Reference","t":"target","c":"@discordjs/voice!~target"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":" | "},{"k":"Reference","t":"string"},{"k":"Content","t":"): "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":67,"co":9,"sta":false,"rtr":{"st":8,"en":11},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"target","ptr":{"st":4,"en":7},"op":false,"rs":false}],"op":false,"ab":false,"n":"get"},{"k":"Method","c":"@discordjs/voice!SSRCMap#update:member(1)","d":"/**\n * Updates the map with new user data\n *\n * @param data - The data to update with\n */\n","ex":[{"k":"Reference","t":"update","c":"@discordjs/voice!SSRCMap#update"},{"k":"Content","t":"("},{"k":"Reference","t":"data","c":"@discordjs/voice!~data"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":49,"co":9,"sta":false,"rtr":{"st":6,"en":7},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"data","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"update"}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!SSRCMap:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"SSRCMap","c":"@discordjs/voice!SSRCMap:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/receive/SSRCMap.ts","l":24,"co":1,"r":"Public","n":"SSRCMap","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!SSRCMap#on:member(1)","d":"","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!SSRCMap#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'create'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"newData","c":"@discordjs/voice!~newData"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":25,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":1,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!SSRCMap#on:member(2)","d":"","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!SSRCMap#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'update'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"oldData","c":"@discordjs/voice!~oldData"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":", "},{"k":"Reference","t":"newData","c":"@discordjs/voice!~newData"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":26,"co":2,"op":false,"rtr":{"st":21,"en":22},"r":"Public","oi":2,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":20},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!SSRCMap#on:member(3)","d":"","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!SSRCMap#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'delete'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"deletedData","c":"@discordjs/voice!~deletedData"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":27,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":3,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Enum","c":"@discordjs/voice!StreamType:enum","d":"/**\n * The different types of stream that can exist within the pipeline.\n */\n","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"StreamType","c":"@discordjs/voice!StreamType:enum"},{"k":"Content","t":" "}],"pat":"src/audio/TransformerGraph.ts","l":28,"co":1,"r":"Public","n":"StreamType","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!StreamType.Arbitrary:member","d":"/**\n * The type of the stream at this point is unknown.\n */\n","ex":[{"k":"Reference","t":"Arbitrary","c":"@discordjs/voice!StreamType.Arbitrary:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"arbitrary\""}],"l":32,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Arbitrary"},{"k":"EnumMember","c":"@discordjs/voice!StreamType.OggOpus:member","d":"/**\n * The stream at this point is Opus audio encoded in an Ogg wrapper.\n */\n","ex":[{"k":"Reference","t":"OggOpus","c":"@discordjs/voice!StreamType.OggOpus:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"ogg/opus\""}],"l":36,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"OggOpus"},{"k":"EnumMember","c":"@discordjs/voice!StreamType.Opus:member","d":"/**\n * The stream at this point is Opus audio, and the stream is in object-mode. This is ready to play.\n */\n","ex":[{"k":"Reference","t":"Opus","c":"@discordjs/voice!StreamType.Opus:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"opus\""}],"l":40,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Opus"},{"k":"EnumMember","c":"@discordjs/voice!StreamType.Raw:member","d":"/**\n * The stream at this point is s16le PCM.\n */\n","ex":[{"k":"Reference","t":"Raw","c":"@discordjs/voice!StreamType.Raw:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"raw\""}],"l":44,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Raw"},{"k":"EnumMember","c":"@discordjs/voice!StreamType.WebmOpus:member","d":"/**\n * The stream at this point is Opus audio encoded in a WebM wrapper.\n */\n","ex":[{"k":"Reference","t":"WebmOpus","c":"@discordjs/voice!StreamType.WebmOpus:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"webm/opus\""}],"l":48,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"WebmOpus"}]},{"k":"Function","c":"@discordjs/voice!validateDiscordOpusHead:function(1)","d":"/**\n * Takes an Opus Head, and verifies whether the associated Opus audio is suitable to play in a Discord voice channel.\n *\n * @param opusHead - The Opus Head to validate\n *\n * @returns `true` if suitable to play in a Discord voice channel, otherwise `false`\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"validateDiscordOpusHead","c":"@discordjs/voice!validateDiscordOpusHead"},{"k":"Content","t":"("},{"k":"Reference","t":"opusHead","c":"@discordjs/voice!~opusHead"},{"k":"Content","t":": "},{"k":"Reference","t":"Buffer","c":"!\"\\\"buffer\\\"\".__global.Buffer:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"pat":"src/util/demuxProbe.ts","l":14,"co":1,"rtr":{"st":7,"en":8},"r":"Public","oi":1,"ps":[{"pn":"opusHead","ptr":{"st":5,"en":6},"op":false,"rs":false}],"n":"validateDiscordOpusHead"},{"k":"Variable","c":"@discordjs/voice!version:var","d":"/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/voice#readme | @discordjs/voice} version that you are currently using.\n */\n","ex":[{"k":"Reference","t":"version","c":"@discordjs/voice!version"},{"k":"Content","t":": "},{"k":"Reference","t":"string"}],"pat":"src/index.ts","l":28,"co":14,"ro":true,"r":"Public","n":"version","vtr":{"st":2,"en":3}},{"k":"Class","c":"@discordjs/voice!VoiceConnection:class","d":"/**\n * A connection to the voice server of a Guild, can be used to play audio in voice channels.\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":199,"co":1,"r":"Public","ab":false,"n":"VoiceConnection","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!VoiceConnection:constructor(1)","d":"/**\n * Creates a new voice connection.\n *\n * @param joinConfig - The data required to establish the voice connection\n *\n * @param options - The options used to create this voice connection\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"joinConfig","c":"@discordjs/voice!~joinConfig"},{"k":"Content","t":": "},{"k":"Reference","t":"JoinConfig","c":"@discordjs/voice!JoinConfig:interface"},{"k":"Content","t":", "},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":": "},{"k":"Reference","t":"CreateVoiceConnectionOptions","c":"@discordjs/voice!CreateVoiceConnectionOptions:interface"},{"k":"Content","t":");"}],"l":244,"co":2,"r":"Public","pr":false,"oi":1,"ps":[{"pn":"joinConfig","ptr":{"st":3,"en":4},"op":false,"rs":false},{"pn":"options","ptr":{"st":7,"en":8},"op":false,"rs":false}]},{"k":"Method","c":"@discordjs/voice!VoiceConnection#configureNetworking:member(1)","d":"/**\n * Attempts to configure a networking instance for this voice connection using the received packets. Both packets are required, and any existing networking instance will be destroyed.\n *\n * @remarks\n *\n * This is called when the voice server of the connection changes, e.g. if the bot is moved into a different channel in the same guild but has a different voice server. In this instance, the connection needs to be re-established to the new voice server.\n *\n * The connection will transition to the Connecting state when this is called.\n */\n","ex":[{"k":"Reference","t":"configureNetworking","c":"@discordjs/voice!VoiceConnection#configureNetworking"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":404,"co":9,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"configureNetworking"},{"k":"Method","c":"@discordjs/voice!VoiceConnection#destroy:member(1)","d":"/**\n * Destroys the VoiceConnection, preventing it from connecting to voice again. This method should be called when you no longer require the VoiceConnection to prevent memory leaks.\n *\n * @param adapterAvailable - Whether the adapter can be used\n */\n","ex":[{"k":"Reference","t":"destroy","c":"@discordjs/voice!VoiceConnection#destroy"},{"k":"Content","t":"("},{"k":"Reference","t":"adapterAvailable","c":"@discordjs/voice!~adapterAvailable"},{"k":"Content","t":"?: "},{"k":"Reference","t":"boolean"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":551,"co":9,"sta":false,"rtr":{"st":6,"en":7},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"adapterAvailable","ptr":{"st":4,"en":5},"op":true,"rs":false}],"op":false,"ab":false,"n":"destroy"},{"k":"Method","c":"@discordjs/voice!VoiceConnection#disconnect:member(1)","d":"/**\n * Disconnects the VoiceConnection, allowing the possibility of rejoining later on.\n *\n * @returns `true` if the connection was successfully disconnected\n */\n","ex":[{"k":"Reference","t":"disconnect","c":"@discordjs/voice!VoiceConnection#disconnect"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":574,"co":9,"sta":false,"rtr":{"st":2,"en":3},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"disconnect"},{"k":"Method","c":"@discordjs/voice!VoiceConnection#dispatchAudio:member(1)","d":"/**\n * Dispatches the previously prepared audio packet (if any)\n */\n","ex":[{"k":"Reference","t":"dispatchAudio","c":"@discordjs/voice!VoiceConnection#dispatchAudio"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":526,"co":9,"sta":false,"rtr":{"st":2,"en":5},"r":"Public","pr":false,"oi":1,"ps":[],"op":false,"ab":false,"n":"dispatchAudio"},{"k":"Method","c":"@discordjs/voice!VoiceConnection#onSubscriptionRemoved:member(1)","d":"/**\n * Called when a subscription of this voice connection to an audio player is removed.\n *\n * @param subscription - The removed subscription\n */\n","ex":[{"k":"Content","t":"protected "},{"k":"Reference","t":"onSubscriptionRemoved","c":"@discordjs/voice!VoiceConnection#onSubscriptionRemoved"},{"k":"Content","t":"("},{"k":"Reference","t":"subscription","c":"@discordjs/voice!~subscription"},{"k":"Content","t":": "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":"): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":702,"co":2,"sta":false,"rtr":{"st":7,"en":8},"r":"Public","pr":true,"oi":1,"ps":[{"pn":"subscription","ptr":{"st":5,"en":6},"op":false,"rs":false}],"op":false,"ab":false,"n":"onSubscriptionRemoved"},{"k":"Property","c":"@discordjs/voice!VoiceConnection#ping:member","d":"/**\n * The latest ping (in milliseconds) for the WebSocket connection and audio playback for this voice connection, if this data is available.\n *\n * @remarks\n *\n * For this data to be available, the VoiceConnection must be in the Ready state, and its underlying WebSocket connection and UDP socket must have had at least one ping-pong exchange.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"ping","c":"@discordjs/voice!VoiceConnection#ping"},{"k":"Content","t":"(): "},{"k":"Content","t":"{    "},{"k":"Reference","t":"ws","c":"@discordjs/voice!~__type#ws"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";    "},{"k":"Reference","t":"udp","c":"@discordjs/voice!~__type#udp"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";  }"},{"k":"Content","t":";"}],"l":680,"co":2,"ro":true,"op":false,"r":"Public","n":"ping","prtr":{"st":3,"en":16},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!VoiceConnection#playOpusPacket:member(1)","d":"/**\n * Prepares an audio packet and dispatches it immediately.\n *\n * @param buffer - The Opus packet to play\n */\n","ex":[{"k":"Reference","t":"playOpusPacket","c":"@discordjs/voice!VoiceConnection#playOpusPacket"},{"k":"Content","t":"("},{"k":"Reference","t":"buffer","c":"@discordjs/voice!~buffer"},{"k":"Content","t":": "},{"k":"Reference","t":"Buffer","c":"!\"\\\"buffer\\\"\".__global.Buffer:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":537,"co":9,"sta":false,"rtr":{"st":6,"en":9},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"buffer","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"playOpusPacket"},{"k":"Method","c":"@discordjs/voice!VoiceConnection#prepareAudioPacket:member(1)","d":"/**\n * Prepares an audio packet for dispatch.\n *\n * @param buffer - The Opus packet to prepare\n */\n","ex":[{"k":"Reference","t":"prepareAudioPacket","c":"@discordjs/voice!VoiceConnection#prepareAudioPacket"},{"k":"Content","t":"("},{"k":"Reference","t":"buffer","c":"@discordjs/voice!~buffer"},{"k":"Content","t":": "},{"k":"Reference","t":"Buffer","c":"!\"\\\"buffer\\\"\".__global.Buffer:interface"},{"k":"Content","t":"): "},{"k":"Reference","t":"Buffer","c":"!\"\\\"buffer\\\"\".__global.Buffer:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":517,"co":9,"sta":false,"rtr":{"st":6,"en":9},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"buffer","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"prepareAudioPacket"},{"k":"Property","c":"@discordjs/voice!VoiceConnection#receiver:member","d":"/**\n * The receiver of this voice connection. You should join the voice channel with `selfDeaf` set to false for this feature to work properly.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"receiver","c":"@discordjs/voice!VoiceConnection#receiver"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceReceiver","c":"@discordjs/voice!VoiceReceiver:class"},{"k":"Content","t":";"}],"l":231,"co":2,"ro":true,"op":false,"r":"Public","n":"receiver","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!VoiceConnection#rejoin:member(1)","d":"/**\n * Attempts to rejoin (better explanation soon:tm:)\n *\n * @remarks\n *\n * Calling this method successfully will automatically increment the `rejoinAttempts` counter, which you can use to inform whether or not you'd like to keep attempting to reconnect your voice connection.\n *\n * A state transition from Disconnected to Signalling will be observed when this is called.\n */\n","ex":[{"k":"Reference","t":"rejoin","c":"@discordjs/voice!VoiceConnection#rejoin"},{"k":"Content","t":"("},{"k":"Reference","t":"joinConfig","c":"@discordjs/voice!~joinConfig"},{"k":"Content","t":"?: "},{"k":"Reference","t":"Omit","c":"!Omit:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"JoinConfig","c":"@discordjs/voice!JoinConfig:interface"},{"k":"Content","t":", 'group' | 'guildId'>"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":611,"co":9,"sta":false,"rtr":{"st":9,"en":10},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"joinConfig","ptr":{"st":4,"en":8},"op":true,"rs":false}],"op":false,"ab":false,"n":"rejoin"},{"k":"Property","c":"@discordjs/voice!VoiceConnection#rejoinAttempts:member","d":"/**\n * The number of consecutive rejoin attempts. Initially 0, and increments for each rejoin. When a connection is successfully established, it resets to 0.\n */\n","ex":[{"k":"Reference","t":"rejoinAttempts","c":"@discordjs/voice!VoiceConnection#rejoinAttempts"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":204,"co":9,"ro":false,"op":false,"r":"Public","n":"rejoinAttempts","prtr":{"st":2,"en":3},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!VoiceConnection#setSpeaking:member(1)","d":"/**\n * Updates the speaking status of the voice connection. This is used when audio players are done playing audio, and need to signal that the connection is no longer playing audio.\n *\n * @param enabled - Whether or not to show as speaking\n */\n","ex":[{"k":"Reference","t":"setSpeaking","c":"@discordjs/voice!VoiceConnection#setSpeaking"},{"k":"Content","t":"("},{"k":"Reference","t":"enabled","c":"@discordjs/voice!~enabled"},{"k":"Content","t":": "},{"k":"Reference","t":"boolean"},{"k":"Content","t":"): "},{"k":"Content","t":"false | "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"l":646,"co":9,"sta":false,"rtr":{"st":6,"en":8},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"enabled","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"setSpeaking"},{"k":"Property","c":"@discordjs/voice!VoiceConnection#state:member","d":"/**\n * The current state of the voice connection.\n */\n","ex":[{"k":"Content","t":"get "},{"k":"Reference","t":"state","c":"@discordjs/voice!VoiceConnection#state"},{"k":"Content","t":"(): "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":";\n\nset "},{"k":"Reference","t":"state","c":"@discordjs/voice!VoiceConnection#state"},{"k":"Content","t":"("},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":");"}],"l":276,"co":2,"ro":false,"op":false,"r":"Public","n":"state","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!VoiceConnection#subscribe:member(1)","d":"/**\n * Subscribes to an audio player, allowing the player to play audio on this voice connection.\n *\n * @param player - The audio player to subscribe to\n *\n * @returns The created subscription\n */\n","ex":[{"k":"Reference","t":"subscribe","c":"@discordjs/voice!VoiceConnection#subscribe"},{"k":"Content","t":"("},{"k":"Reference","t":"player","c":"@discordjs/voice!~player"},{"k":"Content","t":": "},{"k":"Reference","t":"AudioPlayer","c":"@discordjs/voice!AudioPlayer:class"},{"k":"Content","t":"): "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":658,"co":9,"sta":false,"rtr":{"st":6,"en":9},"r":"Public","pr":false,"oi":1,"ps":[{"pn":"player","ptr":{"st":4,"en":5},"op":false,"rs":false}],"op":false,"ab":false,"n":"subscribe"}],"etr":{"st":3,"en":4,"tps":[]},"itrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceConnection:interface","d":"","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":" extends "},{"k":"Reference","t":"EventEmitter","c":"@discordjs/voice!~EventEmitter"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":166,"co":1,"r":"Public","n":"VoiceConnection","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/voice!VoiceConnection#on:member(1)","d":"/**\n * Emitted when there is an error emitted from the voice connection\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!VoiceConnection#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'error'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"error","c":"@discordjs/voice!~error"},{"k":"Content","t":": "},{"k":"Reference","t":"Error","c":"!Error:interface"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":172,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":1,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!VoiceConnection#on:member(2)","d":"/**\n * Emitted debugging information about the voice connection\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!VoiceConnection#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'debug'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"message","c":"@discordjs/voice!~message"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":178,"co":2,"op":false,"rtr":{"st":15,"en":16},"r":"Public","oi":2,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":14},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!VoiceConnection#on:member(3)","d":"/**\n * Emitted when the state of the voice connection changes\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!VoiceConnection#on"},{"k":"Content","t":"("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Content","t":"'stateChange'"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"oldState","c":"@discordjs/voice!~oldState"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":", "},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":") => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":184,"co":2,"op":false,"rtr":{"st":19,"en":20},"r":"Public","oi":3,"ps":[{"pn":"event","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"listener","ptr":{"st":8,"en":18},"op":false,"rs":false}],"n":"on"},{"k":"MethodSignature","c":"@discordjs/voice!VoiceConnection#on:member(4)","d":"/**\n * Emitted when the state of the voice connection changes to a specific status\n *\n * @eventProperty\n */\n","ex":[{"k":"Reference","t":"on","c":"@discordjs/voice!VoiceConnection#on"},{"k":"Content","t":"<"},{"k":"Reference","t":"Event"},{"k":"Content","t":" extends "},{"k":"Reference","t":"VoiceConnectionStatus","c":"@discordjs/voice!VoiceConnectionStatus:enum"},{"k":"Content","t":">("},{"k":"Reference","t":"event","c":"@discordjs/voice!~event"},{"k":"Content","t":": "},{"k":"Reference","t":"Event"},{"k":"Content","t":", "},{"k":"Reference","t":"listener","c":"@discordjs/voice!~listener"},{"k":"Content","t":": "},{"k":"Content","t":"("},{"k":"Reference","t":"oldState","c":"@discordjs/voice!~oldState"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":", "},{"k":"Reference","t":"newState","c":"@discordjs/voice!~newState"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":" & {    "},{"k":"Reference","t":"status","c":"@discordjs/voice!~__type#status"},{"k":"Content","t":": "},{"k":"Reference","t":"Event"},{"k":"Content","t":";  }) => "},{"k":"Reference","t":"void"},{"k":"Content","t":"): "},{"k":"Content","t":"this"},{"k":"Content","t":";"}],"l":190,"co":2,"op":false,"rtr":{"st":27,"en":28},"r":"Public","oi":4,"ps":[{"pn":"event","ptr":{"st":8,"en":9},"op":false,"rs":false},{"pn":"listener","ptr":{"st":12,"en":26},"op":false,"rs":false}],"tps":[{"tp":"Event","ctr":{"st":4,"en":5},"dtr":{"st":0,"en":0}}],"n":"on"}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionConnectingState:interface","d":"/**\n * The state that a VoiceConnection will be in when it is establishing a connection to a Discord voice server.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionConnectingState","c":"@discordjs/voice!VoiceConnectionConnectingState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":129,"co":1,"r":"Public","n":"VoiceConnectionConnectingState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionConnectingState#adapter:member","d":"","ex":[{"k":"Reference","t":"adapter","c":"@discordjs/voice!VoiceConnectionConnectingState#adapter"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":";"}],"l":130,"co":2,"ro":false,"op":false,"r":"Public","n":"adapter","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionConnectingState#networking:member","d":"","ex":[{"k":"Reference","t":"networking","c":"@discordjs/voice!VoiceConnectionConnectingState#networking"},{"k":"Content","t":": "},{"k":"Reference","t":"Networking","c":"@discordjs/voice!~Networking:class"},{"k":"Content","t":";"}],"l":131,"co":2,"ro":false,"op":false,"r":"Public","n":"networking","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionConnectingState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!VoiceConnectionConnectingState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus.Connecting","c":"@discordjs/voice!VoiceConnectionStatus.Connecting:member"},{"k":"Content","t":";"}],"l":132,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionConnectingState#subscription:member","d":"","ex":[{"k":"Reference","t":"subscription","c":"@discordjs/voice!VoiceConnectionConnectingState#subscription"},{"k":"Content","t":"?: "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":133,"co":2,"ro":false,"op":true,"r":"Public","n":"subscription","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionDestroyedState:interface","d":"/**\n * The state that a VoiceConnection will be in when it has been permanently been destroyed by the user and untracked by the library. It cannot be reconnected, instead, a new VoiceConnection needs to be established.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionDestroyedState","c":"@discordjs/voice!VoiceConnectionDestroyedState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":152,"co":1,"r":"Public","n":"VoiceConnectionDestroyedState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDestroyedState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!VoiceConnectionDestroyedState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus.Destroyed","c":"@discordjs/voice!VoiceConnectionStatus.Destroyed:member"},{"k":"Content","t":";"}],"l":153,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface","d":"/**\n * The state that a VoiceConnection will be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionDisconnectedBaseState","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":90,"co":1,"r":"Public","n":"VoiceConnectionDisconnectedBaseState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#adapter:member","d":"","ex":[{"k":"Reference","t":"adapter","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#adapter"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":";"}],"l":91,"co":2,"ro":false,"op":false,"r":"Public","n":"adapter","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus.Disconnected","c":"@discordjs/voice!VoiceConnectionStatus.Disconnected:member"},{"k":"Content","t":";"}],"l":92,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#subscription:member","d":"","ex":[{"k":"Reference","t":"subscription","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState#subscription"},{"k":"Content","t":"?: "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":93,"co":2,"ro":false,"op":true,"r":"Public","n":"subscription","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionDisconnectedOtherState:interface","d":"/**\n * The state that a VoiceConnection will be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionDisconnectedOtherState","c":"@discordjs/voice!VoiceConnectionDisconnectedOtherState:interface"},{"k":"Content","t":" extends "},{"k":"Reference","t":"VoiceConnectionDisconnectedBaseState","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":100,"co":1,"r":"Public","n":"VoiceConnectionDisconnectedOtherState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedOtherState#reason:member","d":"","ex":[{"k":"Reference","t":"reason","c":"@discordjs/voice!VoiceConnectionDisconnectedOtherState#reason"},{"k":"Content","t":": "},{"k":"Reference","t":"Exclude","c":"!Exclude:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"VoiceConnectionDisconnectReason","c":"@discordjs/voice!VoiceConnectionDisconnectReason:enum"},{"k":"Content","t":", "},{"k":"Reference","t":"VoiceConnectionDisconnectReason.WebSocketClose","c":"@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"l":101,"co":2,"ro":false,"op":false,"r":"Public","n":"reason","prtr":{"st":2,"en":8}}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"TypeAlias","c":"@discordjs/voice!VoiceConnectionDisconnectedState:type","d":"/**\n * The states that a VoiceConnection can be in when it is not connected to a Discord voice server nor is it attempting to connect. You can manually attempt to connect using VoiceConnection#reconnect.\n */\n","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"VoiceConnectionDisconnectedState","c":"@discordjs/voice!VoiceConnectionDisconnectedState:type"},{"k":"Content","t":" = "},{"k":"Reference","t":"VoiceConnectionDisconnectedOtherState","c":"@discordjs/voice!VoiceConnectionDisconnectedOtherState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"VoiceConnectionDisconnectedWebSocketState","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState:interface"},{"k":"Content","t":";"}],"pat":"src/VoiceConnection.ts","l":121,"co":1,"r":"Public","n":"VoiceConnectionDisconnectedState","ttr":{"st":3,"en":6}},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState:interface","d":"/**\n * The state that a VoiceConnection will be in when its WebSocket connection was closed. You can manually attempt to reconnect using VoiceConnection#reconnect.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionDisconnectedWebSocketState","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState:interface"},{"k":"Content","t":" extends "},{"k":"Reference","t":"VoiceConnectionDisconnectedBaseState","c":"@discordjs/voice!VoiceConnectionDisconnectedBaseState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":108,"co":1,"r":"Public","n":"VoiceConnectionDisconnectedWebSocketState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#closeCode:member","d":"/**\n * The close code of the WebSocket connection to the Discord voice server.\n */\n","ex":[{"k":"Reference","t":"closeCode","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#closeCode"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":112,"co":2,"ro":false,"op":false,"r":"Public","n":"closeCode","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#reason:member","d":"","ex":[{"k":"Reference","t":"reason","c":"@discordjs/voice!VoiceConnectionDisconnectedWebSocketState#reason"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionDisconnectReason.WebSocketClose","c":"@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member"},{"k":"Content","t":";"}],"l":114,"co":2,"ro":false,"op":false,"r":"Public","n":"reason","prtr":{"st":2,"en":3}}],"etrs":[{"st":3,"en":4,"tps":[]}]},{"k":"Enum","c":"@discordjs/voice!VoiceConnectionDisconnectReason:enum","d":"/**\n * The reasons a voice connection can be in the disconnected state.\n */\n","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"VoiceConnectionDisconnectReason","c":"@discordjs/voice!VoiceConnectionDisconnectReason:enum"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":64,"co":1,"r":"Public","n":"VoiceConnectionDisconnectReason","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionDisconnectReason.AdapterUnavailable:member","d":"/**\n * When the adapter was unable to send a message requested by the VoiceConnection.\n */\n","ex":[{"k":"Reference","t":"AdapterUnavailable","c":"@discordjs/voice!VoiceConnectionDisconnectReason.AdapterUnavailable:member"},{"k":"Content","t":" = "},{"k":"Content","t":"1"}],"l":73,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"AdapterUnavailable"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionDisconnectReason.EndpointRemoved:member","d":"/**\n * When a VOICE_SERVER_UPDATE packet is received with a null endpoint, causing the connection to be severed.\n */\n","ex":[{"k":"Reference","t":"EndpointRemoved","c":"@discordjs/voice!VoiceConnectionDisconnectReason.EndpointRemoved:member"},{"k":"Content","t":" = "},{"k":"Content","t":"2"}],"l":78,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"EndpointRemoved"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionDisconnectReason.Manual:member","d":"/**\n * When a manual disconnect was requested.\n */\n","ex":[{"k":"Reference","t":"Manual","c":"@discordjs/voice!VoiceConnectionDisconnectReason.Manual:member"},{"k":"Content","t":" = "},{"k":"Content","t":"3"}],"l":83,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Manual"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member","d":"/**\n * When the WebSocket connection has been closed.\n */\n","ex":[{"k":"Reference","t":"WebSocketClose","c":"@discordjs/voice!VoiceConnectionDisconnectReason.WebSocketClose:member"},{"k":"Content","t":" = "},{"k":"Content","t":"0"}],"l":68,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"WebSocketClose"}]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionReadyState:interface","d":"/**\n * The state that a VoiceConnection will be in when it has an active connection to a Discord voice server.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionReadyState","c":"@discordjs/voice!VoiceConnectionReadyState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":140,"co":1,"r":"Public","n":"VoiceConnectionReadyState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionReadyState#adapter:member","d":"","ex":[{"k":"Reference","t":"adapter","c":"@discordjs/voice!VoiceConnectionReadyState#adapter"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":";"}],"l":141,"co":2,"ro":false,"op":false,"r":"Public","n":"adapter","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionReadyState#networking:member","d":"","ex":[{"k":"Reference","t":"networking","c":"@discordjs/voice!VoiceConnectionReadyState#networking"},{"k":"Content","t":": "},{"k":"Reference","t":"Networking","c":"@discordjs/voice!~Networking:class"},{"k":"Content","t":";"}],"l":142,"co":2,"ro":false,"op":false,"r":"Public","n":"networking","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionReadyState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!VoiceConnectionReadyState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus.Ready","c":"@discordjs/voice!VoiceConnectionStatus.Ready:member"},{"k":"Content","t":";"}],"l":143,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionReadyState#subscription:member","d":"","ex":[{"k":"Reference","t":"subscription","c":"@discordjs/voice!VoiceConnectionReadyState#subscription"},{"k":"Content","t":"?: "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":144,"co":2,"ro":false,"op":true,"r":"Public","n":"subscription","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceConnectionSignallingState:interface","d":"/**\n * The state that a VoiceConnection will be in when it is waiting to receive a VOICE_SERVER_UPDATE and VOICE_STATE_UPDATE packet from Discord, provided by the adapter.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceConnectionSignallingState","c":"@discordjs/voice!VoiceConnectionSignallingState:interface"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":55,"co":1,"r":"Public","n":"VoiceConnectionSignallingState","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionSignallingState#adapter:member","d":"","ex":[{"k":"Reference","t":"adapter","c":"@discordjs/voice!VoiceConnectionSignallingState#adapter"},{"k":"Content","t":": "},{"k":"Reference","t":"DiscordGatewayAdapterImplementerMethods","c":"@discordjs/voice!DiscordGatewayAdapterImplementerMethods:interface"},{"k":"Content","t":";"}],"l":56,"co":2,"ro":false,"op":false,"r":"Public","n":"adapter","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionSignallingState#status:member","d":"","ex":[{"k":"Reference","t":"status","c":"@discordjs/voice!VoiceConnectionSignallingState#status"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnectionStatus.Signalling","c":"@discordjs/voice!VoiceConnectionStatus.Signalling:member"},{"k":"Content","t":";"}],"l":57,"co":2,"ro":false,"op":false,"r":"Public","n":"status","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceConnectionSignallingState#subscription:member","d":"","ex":[{"k":"Reference","t":"subscription","c":"@discordjs/voice!VoiceConnectionSignallingState#subscription"},{"k":"Content","t":"?: "},{"k":"Reference","t":"PlayerSubscription","c":"@discordjs/voice!PlayerSubscription:class"},{"k":"Content","t":" | "},{"k":"Reference","t":"undefined"},{"k":"Content","t":";"}],"l":58,"co":2,"ro":false,"op":true,"r":"Public","n":"subscription","prtr":{"st":2,"en":5}}],"etrs":[]},{"k":"TypeAlias","c":"@discordjs/voice!VoiceConnectionState:type","d":"/**\n * The various states that a voice connection can be in.\n */\n","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"VoiceConnectionState","c":"@discordjs/voice!VoiceConnectionState:type"},{"k":"Content","t":" = "},{"k":"Reference","t":"VoiceConnectionConnectingState","c":"@discordjs/voice!VoiceConnectionConnectingState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"VoiceConnectionDestroyedState","c":"@discordjs/voice!VoiceConnectionDestroyedState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"VoiceConnectionDisconnectedState","c":"@discordjs/voice!VoiceConnectionDisconnectedState:type"},{"k":"Content","t":" | "},{"k":"Reference","t":"VoiceConnectionReadyState","c":"@discordjs/voice!VoiceConnectionReadyState:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"VoiceConnectionSignallingState","c":"@discordjs/voice!VoiceConnectionSignallingState:interface"},{"k":"Content","t":";"}],"pat":"src/VoiceConnection.ts","l":159,"co":1,"r":"Public","n":"VoiceConnectionState","ttr":{"st":3,"en":12}},{"k":"Enum","c":"@discordjs/voice!VoiceConnectionStatus:enum","d":"/**\n * The various status codes a voice connection can hold at any one time.\n */\n","ex":[{"k":"Content","t":"export declare enum "},{"k":"Reference","t":"VoiceConnectionStatus","c":"@discordjs/voice!VoiceConnectionStatus:enum"},{"k":"Content","t":" "}],"pat":"src/VoiceConnection.ts","l":24,"co":1,"r":"Public","n":"VoiceConnectionStatus","pmo":false,"ms":[{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionStatus.Connecting:member","d":"/**\n * The `VOICE_SERVER_UPDATE` and `VOICE_STATE_UPDATE` packets have been received, now attempting to establish a voice connection.\n */\n","ex":[{"k":"Reference","t":"Connecting","c":"@discordjs/voice!VoiceConnectionStatus.Connecting:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"connecting\""}],"l":28,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Connecting"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionStatus.Destroyed:member","d":"/**\n * The voice connection has been destroyed and untracked, it cannot be reused.\n */\n","ex":[{"k":"Reference","t":"Destroyed","c":"@discordjs/voice!VoiceConnectionStatus.Destroyed:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"destroyed\""}],"l":33,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Destroyed"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionStatus.Disconnected:member","d":"/**\n * The voice connection has either been severed or not established.\n */\n","ex":[{"k":"Reference","t":"Disconnected","c":"@discordjs/voice!VoiceConnectionStatus.Disconnected:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"disconnected\""}],"l":38,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Disconnected"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionStatus.Ready:member","d":"/**\n * A voice connection has been established, and is ready to be used.\n */\n","ex":[{"k":"Reference","t":"Ready","c":"@discordjs/voice!VoiceConnectionStatus.Ready:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"ready\""}],"l":43,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Ready"},{"k":"EnumMember","c":"@discordjs/voice!VoiceConnectionStatus.Signalling:member","d":"/**\n * Sending a packet to the main Discord gateway to indicate we want to change our voice state.\n */\n","ex":[{"k":"Reference","t":"Signalling","c":"@discordjs/voice!VoiceConnectionStatus.Signalling:member"},{"k":"Content","t":" = "},{"k":"Content","t":"\"signalling\""}],"l":48,"co":2,"itr":{"st":2,"en":3},"r":"Public","n":"Signalling"}]},{"k":"Class","c":"@discordjs/voice!VoiceReceiver:class","d":"/**\n * Attaches to a VoiceConnection, allowing you to receive audio packets from other users that are speaking.\n *\n * @beta\n */\n","ex":[{"k":"Content","t":"export declare class "},{"k":"Reference","t":"VoiceReceiver","c":"@discordjs/voice!VoiceReceiver:class"},{"k":"Content","t":" "}],"pat":"src/receive/VoiceReceiver.ts","l":22,"co":1,"r":"Beta","ab":false,"n":"VoiceReceiver","pmo":false,"ms":[{"k":"Constructor","c":"@discordjs/voice!VoiceReceiver:constructor(1)","d":"/**\n * Constructs a new instance of the `VoiceReceiver` class\n */\n","ex":[{"k":"Content","t":"constructor("},{"k":"Reference","t":"voiceConnection","c":"@discordjs/voice!~voiceConnection"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":");"}],"l":48,"co":40,"r":"Beta","pr":false,"oi":1,"ps":[{"pn":"voiceConnection","ptr":{"st":3,"en":4},"op":false,"rs":false}]},{"k":"Property","c":"@discordjs/voice!VoiceReceiver#speaking:member","d":"/**\n * The speaking map of the receiver.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"speaking","c":"@discordjs/voice!VoiceReceiver#speaking"},{"k":"Content","t":": "},{"k":"Reference","t":"SpeakingMap","c":"@discordjs/voice!SpeakingMap:class"},{"k":"Content","t":";"}],"l":48,"co":2,"ro":true,"op":false,"r":"Beta","n":"speaking","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!VoiceReceiver#ssrcMap:member","d":"/**\n * Maps SSRCs to Discord user ids.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"ssrcMap","c":"@discordjs/voice!VoiceReceiver#ssrcMap"},{"k":"Content","t":": "},{"k":"Reference","t":"SSRCMap","c":"@discordjs/voice!SSRCMap:class"},{"k":"Content","t":";"}],"l":31,"co":2,"ro":true,"op":false,"r":"Beta","n":"ssrcMap","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false},{"k":"Method","c":"@discordjs/voice!VoiceReceiver#subscribe:member(1)","d":"/**\n * Creates a subscription for the given user id.\n *\n * @param target - The id of the user to subscribe to\n *\n * @returns A readable stream of Opus packets received from the target\n */\n","ex":[{"k":"Reference","t":"subscribe","c":"@discordjs/voice!VoiceReceiver#subscribe"},{"k":"Content","t":"("},{"k":"Reference","t":"userId","c":"@discordjs/voice!~userId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"options","c":"@discordjs/voice!~options"},{"k":"Content","t":"?: "},{"k":"Reference","t":"Partial","c":"!Partial:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"AudioReceiveStreamOptions","c":"@discordjs/voice!AudioReceiveStreamOptions:interface"},{"k":"Content","t":">"},{"k":"Content","t":"): "},{"k":"Reference","t":"AudioReceiveStream","c":"@discordjs/voice!AudioReceiveStream:class"},{"k":"Content","t":";"}],"l":169,"co":9,"sta":false,"rtr":{"st":13,"en":14},"r":"Beta","pr":false,"oi":1,"ps":[{"pn":"userId","ptr":{"st":4,"en":5},"op":false,"rs":false},{"pn":"options","ptr":{"st":8,"en":12},"op":true,"rs":false}],"op":false,"ab":false,"n":"subscribe"},{"k":"Property","c":"@discordjs/voice!VoiceReceiver#subscriptions:member","d":"/**\n * The current audio subscriptions of this receiver.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"subscriptions","c":"@discordjs/voice!VoiceReceiver#subscriptions"},{"k":"Content","t":": "},{"k":"Reference","t":"Map","c":"!Map:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"AudioReceiveStream","c":"@discordjs/voice!AudioReceiveStream:class"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"l":36,"co":2,"ro":true,"op":false,"r":"Beta","n":"subscriptions","prtr":{"st":3,"en":9},"sta":false,"pr":false,"ab":false},{"k":"Property","c":"@discordjs/voice!VoiceReceiver#voiceConnection:member","d":"/**\n * The attached connection of this receiver.\n */\n","ex":[{"k":"Content","t":"readonly "},{"k":"Reference","t":"voiceConnection","c":"@discordjs/voice!VoiceReceiver#voiceConnection"},{"k":"Content","t":": "},{"k":"Reference","t":"VoiceConnection","c":"@discordjs/voice!VoiceConnection:class"},{"k":"Content","t":";"}],"l":26,"co":2,"ro":true,"op":false,"r":"Beta","n":"voiceConnection","prtr":{"st":3,"en":4},"sta":false,"pr":false,"ab":false}],"itrs":[]},{"k":"Interface","c":"@discordjs/voice!VoiceUserData:interface","d":"/**\n * The known data for a user in a Discord voice connection.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"VoiceUserData","c":"@discordjs/voice!VoiceUserData:interface"},{"k":"Content","t":" "}],"pat":"src/receive/SSRCMap.ts","l":6,"co":1,"r":"Public","n":"VoiceUserData","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/voice!VoiceUserData#audioSSRC:member","d":"/**\n * The SSRC of the user's audio stream.\n */\n","ex":[{"k":"Reference","t":"audioSSRC","c":"@discordjs/voice!VoiceUserData#audioSSRC"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":10,"co":2,"ro":false,"op":false,"r":"Public","n":"audioSSRC","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceUserData#userId:member","d":"/**\n * The Discord user id of the user.\n */\n","ex":[{"k":"Reference","t":"userId","c":"@discordjs/voice!VoiceUserData#userId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"l":15,"co":2,"ro":false,"op":false,"r":"Public","n":"userId","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/voice!VoiceUserData#videoSSRC:member","d":"/**\n * The SSRC of the user's video stream (if one exists) Cannot be 0. If undefined, the user has no video stream.\n */\n","ex":[{"k":"Reference","t":"videoSSRC","c":"@discordjs/voice!VoiceUserData#videoSSRC"},{"k":"Content","t":"?: "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":21,"co":2,"ro":false,"op":true,"r":"Public","n":"videoSSRC","prtr":{"st":2,"en":3}}],"etrs":[]}]}]}