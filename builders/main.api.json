{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.34.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/builders",
  "kind": "Package",
  "canonicalReference": "@discordjs/builders!",
  "docComment": "",
  "name": "@discordjs/builders",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/builders!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ActionRowBuilder:class",
          "docComment": "/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ActionRowBuilder<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyComponentBuilder",
              "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentBuilder",
              "canonicalReference": "@discordjs/builders!ComponentBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIActionRowComponent",
              "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIMessageActionRowComponent",
              "canonicalReference": "discord-api-types!APIMessageActionRowComponent:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "APIModalActionRowComponent",
              "canonicalReference": "discord-api-types!APIModalActionRowComponent:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "ActionRowBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new action row from API data\n *\n * @param data - The API data to create this action row with\n *\n * @example\n *\n * Creating an action row from an API data object\n * ```ts\n * const actionRow = new ActionRowBuilder({\n * \tcomponents: [\n * \t\t{\n * \t\t\tcustom_id: \"custom id\",\n * \t\t\tlabel: \"Type something\",\n * \t\t\tstyle: TextInputStyle.Short,\n * \t\t\ttype: ComponentType.TextInput,\n * \t\t},\n * \t],\n * });\n * ```\n *\n * @example\n *\n * Creating an action row using setters and API data\n * ```ts\n * const actionRow = new ActionRowBuilder({\n * \tcomponents: [\n * \t\t{\n * \t\t\tcustom_id: \"custom id\",\n * \t\t\tlabel: \"Click me\",\n * \t\t\tstyle: ButtonStyle.Primary,\n * \t\t\ttype: ComponentType.Button,\n * \t\t},\n * \t],\n * })\n * \t.addComponents(button2, button3);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ components, ...data }?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIActionRowComponent",
                  "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIActionRowComponentTypes",
                  "canonicalReference": "discord-api-types!APIActionRowComponentTypes:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ components, ...data }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder#addComponents:member(1)",
              "docComment": "/**\n * Adds components to this action row.\n *\n * @param components - The components to add to this action row.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addComponents(...components: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "components",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addComponents"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder#components:member",
              "docComment": "/**\n * The components within this action row\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly components: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "components",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder#setComponents:member(1)",
              "docComment": "/**\n * Sets the components in this action row\n *\n * @param components - The components to set this row to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setComponents(...components: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "components",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setComponents"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIActionRowComponent",
                  "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType",
                  "canonicalReference": "!ReturnType:type"
                },
                {
                  "kind": "Content",
                  "text": "<T['toJSON']>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 11
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!AnyAPIActionRowComponent:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyAPIActionRowComponent = "
            },
            {
              "kind": "Reference",
              "text": "APIActionRowComponent",
              "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIActionRowComponentTypes",
              "canonicalReference": "discord-api-types!APIActionRowComponentTypes:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "APIActionRowComponentTypes",
              "canonicalReference": "discord-api-types!APIActionRowComponentTypes:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/Component.ts",
          "releaseTag": "Public",
          "name": "AnyAPIActionRowComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyComponentBuilder = "
            },
            {
              "kind": "Reference",
              "text": "MessageActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!MessageActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ModalActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "name": "AnyComponentBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ApplicationCommandNumericOptionMinMaxValueMixin "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts",
          "releaseTag": "Public",
          "isAbstract": true,
          "name": "ApplicationCommandNumericOptionMinMaxValueMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin#max_value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly max_value?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "max_value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin#min_value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly min_value?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "min_value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin#setMaxValue:member(1)",
              "docComment": "/**\n * Sets the maximum number value of this option\n *\n * @param max - The maximum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract setMaxValue(max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": true,
              "name": "setMaxValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin#setMinValue:member(1)",
              "docComment": "/**\n * Sets the minimum number value of this option\n *\n * @param min - The minimum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract setMinValue(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": true,
              "name": "setMinValue"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!ApplicationCommandOptionAllowedChannelTypes:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplicationCommandOptionAllowedChannelTypes = "
            },
            {
              "kind": "Content",
              "text": "(typeof "
            },
            {
              "kind": "Reference",
              "text": "allowedChannelTypes",
              "canonicalReference": "@discordjs/builders!~allowedChannelTypes:var"
            },
            {
              "kind": "Content",
              "text": ")[number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts",
          "releaseTag": "Public",
          "name": "ApplicationCommandOptionAllowedChannelTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ApplicationCommandOptionBase extends "
            },
            {
              "kind": "Reference",
              "text": "SharedNameAndDescription",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts",
          "releaseTag": "Public",
          "isAbstract": true,
          "name": "ApplicationCommandOptionBase",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase#required:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly required: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase#runRequiredValidations:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected runRequiredValidations(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "runRequiredValidations"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase#setRequired:member(1)",
              "docComment": "/**\n * Marks the option as required\n *\n * @param required - If this option should be required\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRequired(required: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "required",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setRequired"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandBasicOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandBasicOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": true,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ApplicationCommandOptionChannelTypesMixin:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ApplicationCommandOptionChannelTypesMixin "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ApplicationCommandOptionChannelTypesMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionChannelTypesMixin#addChannelTypes:member(1)",
              "docComment": "/**\n * Adds channel types to this option\n *\n * @param channelTypes - The channel types to add\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChannelTypes(...channelTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionAllowedChannelTypes",
                  "canonicalReference": "@discordjs/builders!ApplicationCommandOptionAllowedChannelTypes:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelTypes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addChannelTypes"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionChannelTypesMixin#channel_types:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly channel_types?: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionAllowedChannelTypes",
                  "canonicalReference": "@discordjs/builders!ApplicationCommandOptionAllowedChannelTypes:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "channel_types",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "ApplicationCommandOptionWithChoicesAndAutocompleteMixin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#addChoices:member(1)",
              "docComment": "/**\n * Adds multiple choices for this option\n *\n * @param choices - The choices to add\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChoices(...choices: "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandOptionChoice",
                  "canonicalReference": "discord-api-types!APIApplicationCommandOptionChoice:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "choices",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addChoices"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#autocomplete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly autocomplete?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autocomplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#choices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly choices?: "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandOptionChoice",
                  "canonicalReference": "discord-api-types!APIApplicationCommandOptionChoice:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "choices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#setAutocomplete:member(1)",
              "docComment": "/**\n * Marks the option as autocompletable\n *\n * @param autocomplete - If this option should be autocompletable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAutocomplete(autocomplete: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "autocomplete",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setAutocomplete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#setChoices:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setChoices<Input extends "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandOptionChoice",
                  "canonicalReference": "discord-api-types!APIApplicationCommandOptionChoice:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ">(...choices: "
                },
                {
                  "kind": "Content",
                  "text": "Input"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Input",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "choices",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setChoices"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseSelectMenuBuilder<SelectMenuType extends "
            },
            {
              "kind": "Reference",
              "text": "APISelectMenuComponent",
              "canonicalReference": "discord-api-types!APISelectMenuComponent:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentBuilder",
              "canonicalReference": "@discordjs/builders!ComponentBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<SelectMenuType>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/BaseSelectMenu.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "SelectMenuType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "BaseSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#setCustomId:member(1)",
              "docComment": "/**\n * Sets the custom id for this select menu\n *\n * @param customId - The custom id to use for this select menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCustomId(customId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setCustomId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#setDisabled:member(1)",
              "docComment": "/**\n * Sets whether this select menu is disabled\n *\n * @param disabled - Whether this select menu is disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDisabled(disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "disabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDisabled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#setMaxValues:member(1)",
              "docComment": "/**\n * Sets the maximum values that must be selected in the select menu\n *\n * @param maxValues - The maximum values that must be selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaxValues(maxValues: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxValues",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMaxValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#setMinValues:member(1)",
              "docComment": "/**\n * Sets the minimum values that must be selected in the select menu\n *\n * @param minValues - The minimum values that must be selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinValues(minValues: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minValues",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMinValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#setPlaceholder:member(1)",
              "docComment": "/**\n * Sets the placeholder for this select menu\n *\n * @param placeholder - The placeholder to use for this select menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPlaceholder(placeholder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "placeholder",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setPlaceholder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "SelectMenuType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ButtonBuilder:class",
          "docComment": "/**\n * Represents a button component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ButtonBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentBuilder",
              "canonicalReference": "@discordjs/builders!ComponentBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIButtonComponent",
              "canonicalReference": "discord-api-types!APIButtonComponent:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/button/Button.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ButtonBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!ButtonBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new button from API data\n *\n * @param data - The API data to create this button with\n *\n * @example\n *\n * Creating a button from an API data object\n * ```ts\n * const button = new ButtonBuilder({\n * \tcustom_id: 'a cool button',\n * \tstyle: ButtonStyle.Primary,\n * \tlabel: 'Click Me',\n * \temoji: {\n * \t\tname: 'smile',\n * \t\tid: '123456789012345678',\n * \t},\n * });\n * ```\n *\n * @example\n *\n * Creating a button using setters and API data\n * ```ts\n * const button = new ButtonBuilder({\n * \tstyle: ButtonStyle.Secondary,\n * \tlabel: 'Click Me',\n * })\n * \t.setEmoji({ name: '🙂' })\n * \t.setCustomId('another cool button');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIButtonComponent",
                  "canonicalReference": "discord-api-types!APIButtonComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setCustomId:member(1)",
              "docComment": "/**\n * Sets the custom id for this button\n *\n * @remarks\n *\n * This method is only applicable to buttons that are not using the `Link` button style.\n *\n * @param customId - The custom id to use for this button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCustomId(customId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setCustomId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setDisabled:member(1)",
              "docComment": "/**\n * Sets whether this button is disabled\n *\n * @param disabled - Whether to disable this button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDisabled(disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "disabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDisabled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setEmoji:member(1)",
              "docComment": "/**\n * Sets the emoji to display on this button\n *\n * @param emoji - The emoji to display on this button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEmoji(emoji: "
                },
                {
                  "kind": "Reference",
                  "text": "APIMessageComponentEmoji",
                  "canonicalReference": "discord-api-types!APIMessageComponentEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setLabel:member(1)",
              "docComment": "/**\n * Sets the label for this button\n *\n * @param label - The label to display on this button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLabel(label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setLabel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setStyle:member(1)",
              "docComment": "/**\n * Sets the style of this button\n *\n * @param style - The style of the button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStyle(style: "
                },
                {
                  "kind": "Reference",
                  "text": "ButtonStyle",
                  "canonicalReference": "discord-api-types!ButtonStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#setURL:member(1)",
              "docComment": "/**\n * Sets the URL for this button\n *\n * @remarks\n *\n * This method is only available to buttons using the `Link` button style. Only three types of URL schemes are currently supported: `https://`, `http://` and `discord://`\n *\n * @param url - The URL to open when this button is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setURL(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setURL"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ButtonBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIButtonComponent",
                  "canonicalReference": "discord-api-types!APIButtonComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ChannelSelectMenuBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIChannelSelectComponent",
              "canonicalReference": "discord-api-types!APIChannelSelectComponent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/ChannelSelectMenu.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ChannelSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new select menu from API data\n *\n * @param data - The API data to create this select menu with\n *\n * @example\n *\n * Creating a select menu from an API data object\n * ```ts\n * const selectMenu = new ChannelSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tplaceholder: 'select an option',\n * \tmax_values: 2,\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu using setters and API data\n * ```ts\n * const selectMenu = new ChannelSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * })\n * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n * \t.setMinValues(2)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIChannelSelectComponent",
                  "canonicalReference": "discord-api-types!APIChannelSelectComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder#addChannelTypes:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChannelTypes(...types: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChannelType",
                  "canonicalReference": "discord-api-types!ChannelType:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "types",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addChannelTypes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder#setChannelTypes:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setChannelTypes(...types: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChannelType",
                  "canonicalReference": "discord-api-types!ChannelType:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "types",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setChannelTypes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIChannelSelectComponent",
                  "canonicalReference": "discord-api-types!APIChannelSelectComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!ComponentAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "ComponentAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.buttonLabelValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonLabelValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "buttonLabelValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.buttonStyleValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonStyleValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NativeEnumValidator",
                  "canonicalReference": "@sapphire/shapeshift!NativeEnumValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ButtonStyle",
                  "canonicalReference": "discord-api-types!ButtonStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "buttonStyleValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.channelTypesValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channelTypesValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ArrayValidator",
                  "canonicalReference": "@sapphire/shapeshift!ArrayValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChannelType",
                  "canonicalReference": "discord-api-types!ChannelType:enum"
                },
                {
                  "kind": "Content",
                  "text": "[], "
                },
                {
                  "kind": "Reference",
                  "text": "ChannelType",
                  "canonicalReference": "discord-api-types!ChannelType:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "channelTypesValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.customIdValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customIdValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "customIdValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.defaultValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "BooleanValidator",
                  "canonicalReference": "@sapphire/shapeshift!BooleanValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "defaultValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.disabledValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabledValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "BooleanValidator",
                  "canonicalReference": "@sapphire/shapeshift!BooleanValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "disabledValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.emojiValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emojiValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ObjectValidator",
                  "canonicalReference": "@sapphire/shapeshift!ObjectValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name?: string | undefined;\n    id?: string | undefined;\n    animated?: boolean | undefined;\n}, import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name?: string | undefined;\n    id?: string | undefined;\n    animated?: boolean | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "emojiValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.jsonOptionValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "jsonOptionValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ObjectValidator",
                  "canonicalReference": "@sapphire/shapeshift!ObjectValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    label: string;\n    value: string;\n    description: string | undefined;\n    emoji: import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        name?: string | undefined;\n        id?: string | undefined;\n        animated?: boolean | undefined;\n    }> | undefined;\n    default: boolean | undefined;\n}, import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    label: string;\n    value: string;\n    description: string | undefined;\n    emoji: import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        name?: string | undefined;\n        id?: string | undefined;\n        animated?: boolean | undefined;\n    }> | undefined;\n    default: boolean | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "jsonOptionValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.labelValueDescriptionValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelValueDescriptionValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "labelValueDescriptionValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.minMaxValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minMaxValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "minMaxValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.optionsLengthValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionsLengthValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "optionsLengthValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.optionsValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionsValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ArrayValidator",
                  "canonicalReference": "@sapphire/shapeshift!ArrayValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "[], "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "optionsValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.optionValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "InstanceValidator",
                  "canonicalReference": "@sapphire/shapeshift!InstanceValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "optionValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.placeholderValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholderValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "placeholderValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.urlValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "urlValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "urlValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.validateRequiredButtonParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredButtonParameters(style?: "
                },
                {
                  "kind": "Reference",
                  "text": "ButtonStyle",
                  "canonicalReference": "discord-api-types!ButtonStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ", label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", emoji?: "
                },
                {
                  "kind": "Reference",
                  "text": "APIMessageComponentEmoji",
                  "canonicalReference": "discord-api-types!APIMessageComponentEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": true
                }
              ],
              "name": "validateRequiredButtonParameters"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.validateRequiredSelectMenuOptionParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredSelectMenuOptionParameters(label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "validateRequiredSelectMenuOptionParameters"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ComponentAssertions.validateRequiredSelectMenuParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredSelectMenuParameters(options: "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", customId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/components/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "validateRequiredSelectMenuParameters"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ComponentBuilder:class",
          "docComment": "/**\n * Represents a discord component\n *\n * @typeParam DataType - The type of internal API data that is stored within the component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ComponentBuilder<DataType extends "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIBaseComponent",
              "canonicalReference": "discord-api-types!APIBaseComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "discord-api-types!ComponentType:enum"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "APIBaseComponent",
              "canonicalReference": "discord-api-types!APIBaseComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ComponentType",
              "canonicalReference": "discord-api-types!ComponentType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> implements "
            },
            {
              "kind": "Reference",
              "text": "JSONEncodable",
              "canonicalReference": "@discordjs/util!JSONEncodable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyAPIActionRowComponent",
              "canonicalReference": "@discordjs/builders!AnyAPIActionRowComponent:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/Component.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "DataType",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              }
            }
          ],
          "isAbstract": true,
          "name": "ComponentBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!ComponentBuilder:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ComponentBuilder` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<DataType>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ComponentBuilder#data:member",
              "docComment": "/**\n * The API data associated with this component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly data: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<DataType>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ComponentBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyAPIActionRowComponent",
                  "canonicalReference": "@discordjs/builders!AnyAPIActionRowComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": true,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 13,
              "endIndex": 17
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "ContextMenuCommandAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateDefaultMemberPermissions:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDefaultMemberPermissions(permissions: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDefaultMemberPermissions"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateDefaultPermission:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDefaultPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDefaultPermission"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateDMPermission:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDMPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDMPermission"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateName:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateName(name: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateName"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateRequiredParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredParameters(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "validateRequiredParameters"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandAssertions.validateType:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateType(type: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/contextMenuCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateType"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ContextMenuCommandBuilder "
            }
          ],
          "fileUrlPath": "src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ContextMenuCommandBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#default_member_permissions:member",
              "docComment": "/**\n * Set of permissions represented as a bit set for the command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly default_member_permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Permissions",
                  "canonicalReference": "discord-api-types!Permissions:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "default_member_permissions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#default_permission:member",
              "docComment": "/**\n * Whether the command is enabled by default when the app is added to a guild\n *\n * @deprecated\n *\n * This property is deprecated and will be removed in the future. You should use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly default_permission: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "default_permission",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#dm_permission:member",
              "docComment": "/**\n * Indicates whether the command is available in DMs with the application, only for globally-scoped commands. By default, commands are visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly dm_permission: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dm_permission",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#name_localizations:member",
              "docComment": "/**\n * The localized names for this command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name_localizations?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name_localizations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#name:member",
              "docComment": "/**\n * The name of this context menu command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setDefaultMemberPermissions:member(1)",
              "docComment": "/**\n * Sets the default permissions a member should have in order to run the command.\n *\n * @remarks\n *\n * You can set this to `'0'` to disable the command by default.\n *\n * @param permissions - The permissions bit field to set\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultMemberPermissions(permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Permissions",
                  "canonicalReference": "discord-api-types!Permissions:type"
                },
                {
                  "kind": "Content",
                  "text": " | bigint | number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDefaultMemberPermissions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setDefaultPermission:member(1)",
              "docComment": "/**\n * Sets whether the command is enabled by default when the application is added to a guild.\n *\n * @remarks\n *\n * If set to `false`, you will have to later `PUT` the permissions for this command.\n *\n * @deprecated\n *\n * Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n *\n * @param value - Whether or not to enable this command by default\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDefaultPermission"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setDMPermission:member(1)",
              "docComment": "/**\n * Sets if the command is available in DMs with the application, only for globally-scoped commands. By default, commands are visible.\n *\n * @param enabled - If the command should be enabled in DMs\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDMPermission(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDMPermission"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setName:member(1)",
              "docComment": "/**\n * Sets the name\n *\n * @param name - The name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setName(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setNameLocalization:member(1)",
              "docComment": "/**\n * Sets a name localization\n *\n * @param locale - The locale to set a description for\n *\n * @param localizedName - The localized description for the given locale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNameLocalization(locale: "
                },
                {
                  "kind": "Reference",
                  "text": "LocaleString",
                  "canonicalReference": "discord-api-types!LocaleString:type"
                },
                {
                  "kind": "Content",
                  "text": ", localizedName: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "locale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "localizedName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNameLocalization"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setNameLocalizations:member(1)",
              "docComment": "/**\n * Sets the name localizations\n *\n * @param localizedNames - The dictionary of localized descriptions to set\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNameLocalizations(localizedNames: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "localizedNames",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNameLocalizations"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#setType:member(1)",
              "docComment": "/**\n * Sets the type\n *\n * @param type - The type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setType(type: "
                },
                {
                  "kind": "Reference",
                  "text": "ContextMenuCommandType",
                  "canonicalReference": "@discordjs/builders!ContextMenuCommandType:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setType"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#toJSON:member(1)",
              "docComment": "/**\n * Returns the final data that should be sent to Discord.\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIContextMenuApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIContextMenuApplicationCommandsJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ContextMenuCommandBuilder#type:member",
              "docComment": "/**\n * The type of this context menu command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ContextMenuCommandType",
                  "canonicalReference": "@discordjs/builders!ContextMenuCommandType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!ContextMenuCommandType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ContextMenuCommandType = "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandType.Message",
              "canonicalReference": "discord-api-types!ApplicationCommandType.Message:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandType.User",
              "canonicalReference": "discord-api-types!ApplicationCommandType.User:member"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts",
          "releaseTag": "Public",
          "name": "ContextMenuCommandType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/builders!createComponentBuilder:function(1)",
          "docComment": "/**\n * Factory for creating components from API data\n *\n * @param data - The api data to transform to a component class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createComponentBuilder<T extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "MappedComponentTypes",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes:interface"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "APIModalComponent",
              "canonicalReference": "discord-api-types!APIModalComponent:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "APIMessageComponent",
              "canonicalReference": "discord-api-types!APIMessageComponent:type"
            },
            {
              "kind": "Content",
              "text": ") & {\n    type: T;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MappedComponentTypes",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes:interface"
            },
            {
              "kind": "Content",
              "text": "[T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/Components.ts",
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createComponentBuilder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/builders!createComponentBuilder:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createComponentBuilder<C extends "
            },
            {
              "kind": "Reference",
              "text": "MessageComponentBuilder",
              "canonicalReference": "@discordjs/builders!MessageComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ModalComponentBuilder",
              "canonicalReference": "@discordjs/builders!ModalComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": ">(data: "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "C"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/Components.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "C",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createComponentBuilder"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/builders!disableValidators:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "disableValidators: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            }
          ],
          "fileUrlPath": "src/util/validation.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "disableValidators",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!EmbedAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "EmbedAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.authorNamePredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authorNamePredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "authorNamePredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.colorPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number | [\n    number,\n    number,\n    number\n] | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "colorPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.descriptionPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descriptionPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "descriptionPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.embedAuthorPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "embedAuthorPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ObjectValidator",
                  "canonicalReference": "@sapphire/shapeshift!ObjectValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string | null;\n    iconURL: string | null | undefined;\n    url: string | null | undefined;\n}, import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string | null;\n    iconURL: string | null | undefined;\n    url: string | null | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "embedAuthorPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.embedFieldPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "embedFieldPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ObjectValidator",
                  "canonicalReference": "@sapphire/shapeshift!ObjectValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string;\n    value: string;\n    inline: boolean | undefined;\n}, import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string;\n    value: string;\n    inline: boolean | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "embedFieldPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.embedFieldsArrayPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "embedFieldsArrayPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ArrayValidator",
                  "canonicalReference": "@sapphire/shapeshift!ArrayValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string;\n    value: string;\n    inline: boolean | undefined;\n}>[], import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    name: string;\n    value: string;\n    inline: boolean | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "embedFieldsArrayPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.embedFooterPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "embedFooterPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ObjectValidator",
                  "canonicalReference": "@sapphire/shapeshift!ObjectValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    text: string | null;\n    iconURL: string | null | undefined;\n}, import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<{\n    text: string | null;\n    iconURL: string | null | undefined;\n}>>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "embedFooterPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.fieldInlinePredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldInlinePredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean | undefined>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "fieldInlinePredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.fieldLengthPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldLengthPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "fieldLengthPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.fieldNamePredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldNamePredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "fieldNamePredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.fieldValuePredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldValuePredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "fieldValuePredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.footerTextPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footerTextPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "footerTextPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.imageURLPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageURLPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null | undefined>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "imageURLPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.RGBPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RGBPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "RGBPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.timestampPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestampPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "timestampPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.titlePredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titlePredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "titlePredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.urlPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "urlPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string | null | undefined>"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "urlPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!EmbedAssertions.validateFieldLength:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateFieldLength(amountAdding: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", fields?: "
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbedField",
                  "canonicalReference": "discord-api-types!APIEmbedField:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/messages/embed/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amountAdding",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "fields",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "validateFieldLength"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!EmbedAuthorData:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EmbedAuthorData = "
            },
            {
              "kind": "Reference",
              "text": "IconData",
              "canonicalReference": "@discordjs/builders!IconData:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIEmbedAuthor",
              "canonicalReference": "discord-api-types!APIEmbedAuthor:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "APIEmbedAuthor",
              "canonicalReference": "discord-api-types!APIEmbedAuthor:interface"
            },
            {
              "kind": "Content",
              "text": ", 'icon_url' | 'proxy_icon_url'>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "EmbedAuthorData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!EmbedAuthorOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EmbedAuthorOptions = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmbedAuthorData",
              "canonicalReference": "@discordjs/builders!EmbedAuthorData:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "EmbedAuthorData",
              "canonicalReference": "@discordjs/builders!EmbedAuthorData:type"
            },
            {
              "kind": "Content",
              "text": ", 'proxyIconURL'>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "EmbedAuthorOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!EmbedBuilder:class",
          "docComment": "/**\n * Represents a embed in a message (image/video preview, rich embed, etc.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EmbedBuilder "
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "EmbedBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!EmbedBuilder:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EmbedBuilder` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbed",
                  "canonicalReference": "discord-api-types!APIEmbed:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#addFields:member(1)",
              "docComment": "/**\n * Appends fields to the embed\n *\n * @remarks\n *\n * This method accepts either an array of fields or a variable number of field parameters. The maximum amount of fields that can be added is 25.\n *\n * @param fields - The fields to add\n *\n * @example\n *\n * Using an array\n * ```ts\n * const fields: APIEmbedField[] = ...;\n * const embed = new EmbedBuilder()\n * \t.addFields(fields);\n * ```\n *\n * @example\n *\n * Using rest parameters (variadic)\n * ```ts\n * const embed = new EmbedBuilder()\n * \t.addFields(\n * \t\t{ name: 'Field 1', value: 'Value 1' },\n * \t\t{ name: 'Field 2', value: 'Value 2' },\n * \t);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addFields(...fields: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbedField",
                  "canonicalReference": "discord-api-types!APIEmbedField:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fields",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addFields"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly data: "
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbed",
                  "canonicalReference": "discord-api-types!APIEmbed:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setAuthor:member(1)",
              "docComment": "/**\n * Sets the author of this embed\n *\n * @param options - The options for the author\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAuthor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "EmbedAuthorOptions",
                  "canonicalReference": "@discordjs/builders!EmbedAuthorOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setAuthor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setColor:member(1)",
              "docComment": "/**\n * Sets the color of this embed\n *\n * @param color - The color of the embed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setColor(color: "
                },
                {
                  "kind": "Reference",
                  "text": "RGBTuple",
                  "canonicalReference": "@discordjs/builders!RGBTuple:type"
                },
                {
                  "kind": "Content",
                  "text": " | number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setColor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setDescription:member(1)",
              "docComment": "/**\n * Sets the description of this embed\n *\n * @param description - The description\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDescription(description: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDescription"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setFields:member(1)",
              "docComment": "/**\n * Sets the embed's fields\n *\n * @remarks\n *\n * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically, it splices the entire array of fields, replacing them with the provided fields.\n *\n * You can set a maximum of 25 fields.\n *\n * @param fields - The fields to set\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFields(...fields: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbedField",
                  "canonicalReference": "discord-api-types!APIEmbedField:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fields",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setFields"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setFooter:member(1)",
              "docComment": "/**\n * Sets the footer of this embed\n *\n * @param options - The options for the footer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFooter(options: "
                },
                {
                  "kind": "Reference",
                  "text": "EmbedFooterOptions",
                  "canonicalReference": "@discordjs/builders!EmbedFooterOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setFooter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setImage:member(1)",
              "docComment": "/**\n * Sets the image of this embed\n *\n * @param url - The URL of the image\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setImage(url: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setThumbnail:member(1)",
              "docComment": "/**\n * Sets the thumbnail of this embed\n *\n * @param url - The URL of the thumbnail\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setThumbnail(url: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setThumbnail"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setTimestamp:member(1)",
              "docComment": "/**\n * Sets the timestamp of this embed\n *\n * @param timestamp - The timestamp or date\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTimestamp(timestamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": " | number | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setTimestamp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setTitle:member(1)",
              "docComment": "/**\n * Sets the title of this embed\n *\n * @param title - The title\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTitle(title: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "title",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setTitle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#setURL:member(1)",
              "docComment": "/**\n * Sets the URL of this embed\n *\n * @param url - The URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setURL(url: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setURL"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#spliceFields:member(1)",
              "docComment": "/**\n * Removes, replaces, or inserts fields in the embed.\n *\n * @remarks\n *\n * This method behaves similarly to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice}. The maximum amount of fields that can be added is 25.\n *\n * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n *\n * @param index - The index to start at\n *\n * @param deleteCount - The number of fields to remove\n *\n * @param fields - The replacing field objects\n *\n * @example\n *\n * Remove the first field\n * ```ts\n * embed.spliceFields(0, 1);\n * ```\n *\n * @example\n *\n * Remove the first n fields\n * ```ts\n * const n = 4\n * embed.spliceFields(0, n);\n * ```\n *\n * @example\n *\n * Remove the last field\n * ```ts\n * embed.spliceFields(-1, 1);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spliceFields(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", deleteCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", ...fields: "
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbedField",
                  "canonicalReference": "discord-api-types!APIEmbedField:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "deleteCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "fields",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "spliceFields"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!EmbedBuilder#toJSON:member(1)",
              "docComment": "/**\n * Transforms the embed to a plain object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIEmbed",
                  "canonicalReference": "discord-api-types!APIEmbed:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!EmbedFooterData:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EmbedFooterData = "
            },
            {
              "kind": "Reference",
              "text": "IconData",
              "canonicalReference": "@discordjs/builders!IconData:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIEmbedFooter",
              "canonicalReference": "discord-api-types!APIEmbedFooter:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "APIEmbedFooter",
              "canonicalReference": "discord-api-types!APIEmbedFooter:interface"
            },
            {
              "kind": "Content",
              "text": ", 'icon_url' | 'proxy_icon_url'>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "EmbedFooterData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!EmbedFooterOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EmbedFooterOptions = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmbedFooterData",
              "canonicalReference": "@discordjs/builders!EmbedFooterData:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "EmbedFooterData",
              "canonicalReference": "@discordjs/builders!EmbedFooterData:type"
            },
            {
              "kind": "Content",
              "text": ", 'proxyIconURL'>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "EmbedFooterOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!EmbedImageData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmbedImageData extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIEmbedImage",
              "canonicalReference": "discord-api-types!APIEmbedImage:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "APIEmbedImage",
              "canonicalReference": "discord-api-types!APIEmbedImage:interface"
            },
            {
              "kind": "Content",
              "text": ", 'proxy_url'>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "EmbedImageData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!EmbedImageData#proxyURL:member",
              "docComment": "/**\n * The proxy URL for the image\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "proxyURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "proxyURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/builders!embedLength:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function embedLength(data: "
            },
            {
              "kind": "Reference",
              "text": "APIEmbed",
              "canonicalReference": "discord-api-types!APIEmbed:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/componentUtil.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "embedLength"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/builders!enableValidators:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "enableValidators: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            }
          ],
          "fileUrlPath": "src/util/validation.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "enableValidators",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!IconData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IconData "
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "IconData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!IconData#iconURL:member",
              "docComment": "/**\n * The URL of the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iconURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!IconData#proxyIconURL:member",
              "docComment": "/**\n * The proxy URL of the icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "proxyIconURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "proxyIconURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/builders!isValidationEnabled:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isValidationEnabled: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            }
          ],
          "fileUrlPath": "src/util/validation.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isValidationEnabled",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!MappedComponentTypes:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MappedComponentTypes "
            }
          ],
          "fileUrlPath": "src/components/Components.ts",
          "releaseTag": "Public",
          "name": "MappedComponentTypes",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"1\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.ActionRow",
                  "canonicalReference": "discord-api-types!ComponentType.ActionRow:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AnyComponentBuilder",
                  "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"1\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"2\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.Button",
                  "canonicalReference": "discord-api-types!ComponentType.Button:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ButtonBuilder",
                  "canonicalReference": "@discordjs/builders!ButtonBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"2\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"3\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.StringSelect",
                  "canonicalReference": "discord-api-types!ComponentType.StringSelect:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"3\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"4\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.TextInput",
                  "canonicalReference": "discord-api-types!ComponentType.TextInput:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "TextInputBuilder",
                  "canonicalReference": "@discordjs/builders!TextInputBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"4\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"5\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.UserSelect",
                  "canonicalReference": "discord-api-types!ComponentType.UserSelect:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "UserSelectMenuBuilder",
                  "canonicalReference": "@discordjs/builders!UserSelectMenuBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"5\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"6\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.RoleSelect",
                  "canonicalReference": "discord-api-types!ComponentType.RoleSelect:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "RoleSelectMenuBuilder",
                  "canonicalReference": "@discordjs/builders!RoleSelectMenuBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"6\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"7\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.MentionableSelect",
                  "canonicalReference": "discord-api-types!ComponentType.MentionableSelect:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "MentionableSelectMenuBuilder",
                  "canonicalReference": "@discordjs/builders!MentionableSelectMenuBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"7\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/builders!MappedComponentTypes#\"8\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.ChannelSelect",
                  "canonicalReference": "discord-api-types!ComponentType.ChannelSelect:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ChannelSelectMenuBuilder",
                  "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"8\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!MentionableSelectMenuBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MentionableSelectMenuBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIMentionableSelectComponent",
              "canonicalReference": "discord-api-types!APIMentionableSelectComponent:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/MentionableSelectMenu.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "MentionableSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!MentionableSelectMenuBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new select menu from API data\n *\n * @param data - The API data to create this select menu with\n *\n * @example\n *\n * Creating a select menu from an API data object\n * ```ts\n * const selectMenu = new MentionableSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tplaceholder: 'select an option',\n * \tmax_values: 2,\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu using setters and API data\n * ```ts\n * const selectMenu = new MentionableSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * })\n * \t.setMinValues(1)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIMentionableSelectComponent",
                  "canonicalReference": "discord-api-types!APIMentionableSelectComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!MessageActionRowComponentBuilder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MessageActionRowComponentBuilder = "
            },
            {
              "kind": "Reference",
              "text": "ButtonBuilder",
              "canonicalReference": "@discordjs/builders!ButtonBuilder:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ChannelSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!ChannelSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MentionableSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!MentionableSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RoleSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!RoleSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StringSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "UserSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!UserSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "name": "MessageActionRowComponentBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!MessageComponentBuilder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MessageComponentBuilder = "
            },
            {
              "kind": "Reference",
              "text": "ActionRowBuilder",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!MessageActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "MessageActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!MessageActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "name": "MessageComponentBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModalActionRowComponentBuilder = "
            },
            {
              "kind": "Reference",
              "text": "TextInputBuilder",
              "canonicalReference": "@discordjs/builders!TextInputBuilder:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "name": "ModalActionRowComponentBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!ModalAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "ModalAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ModalAssertions.componentsValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentsValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "ArrayValidator",
                  "canonicalReference": "@sapphire/shapeshift!ArrayValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<[\n    "
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"../../components/ActionRow.js\")."
                },
                {
                  "kind": "Reference",
                  "text": "AnyComponentBuilder",
                  "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">,\n    ..."
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"../../components/ActionRow.js\")."
                },
                {
                  "kind": "Reference",
                  "text": "AnyComponentBuilder",
                  "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">[]\n], "
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"../../components/ActionRow.js\")."
                },
                {
                  "kind": "Reference",
                  "text": "AnyComponentBuilder",
                  "canonicalReference": "@discordjs/builders!AnyComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                }
              ],
              "fileUrlPath": "src/interactions/modals/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "componentsValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 16
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!ModalAssertions.titleValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titleValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/interactions/modals/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "titleValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!ModalAssertions.validateRequiredParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredParameters(customId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", components?: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ModalActionRowComponentBuilder",
                  "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/modals/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "title",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "components",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "name": "validateRequiredParameters"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!ModalBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ModalBuilder implements "
            },
            {
              "kind": "Reference",
              "text": "JSONEncodable",
              "canonicalReference": "@discordjs/util!JSONEncodable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIModalInteractionResponseCallbackData",
              "canonicalReference": "discord-api-types!APIModalInteractionResponseCallbackData:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/modals/Modal.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ModalBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!ModalBuilder:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ModalBuilder` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ components, ...data }?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIModalInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIModalInteractionResponseCallbackData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ components, ...data }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ModalBuilder#addComponents:member(1)",
              "docComment": "/**\n * Adds components to this modal\n *\n * @param components - The components to add to this modal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addComponents(...components: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ModalActionRowComponentBuilder",
                  "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "APIActionRowComponent",
                  "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIModalActionRowComponent",
                  "canonicalReference": "discord-api-types!APIModalActionRowComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "components",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addComponents"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ModalBuilder#components:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly components: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ModalActionRowComponentBuilder",
                  "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "components",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!ModalBuilder#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly data: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIModalInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIModalInteractionResponseCallbackData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ModalBuilder#setComponents:member(1)",
              "docComment": "/**\n * Sets the components in this modal\n *\n * @param components - The components to set this modal to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setComponents(...components: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ActionRowBuilder",
                  "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ModalActionRowComponentBuilder",
                  "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "components",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setComponents"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ModalBuilder#setCustomId:member(1)",
              "docComment": "/**\n * Sets the custom id of the modal\n *\n * @param customId - The custom id of this modal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCustomId(customId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setCustomId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ModalBuilder#setTitle:member(1)",
              "docComment": "/**\n * Sets the title of the modal\n *\n * @param title - The title of the modal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTitle(title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "title",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setTitle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!ModalBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIModalInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIModalInteractionResponseCallbackData:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!ModalComponentBuilder:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModalComponentBuilder = "
            },
            {
              "kind": "Reference",
              "text": "ActionRowBuilder",
              "canonicalReference": "@discordjs/builders!ActionRowBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ModalActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "ModalActionRowComponentBuilder",
              "canonicalReference": "@discordjs/builders!ModalActionRowComponentBuilder:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/components/ActionRow.ts",
          "releaseTag": "Public",
          "name": "ModalComponentBuilder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/builders!normalizeArray:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function normalizeArray<T>(arr: "
            },
            {
              "kind": "Reference",
              "text": "RestOrArray",
              "canonicalReference": "@discordjs/builders!RestOrArray:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/normalizeArray.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "normalizeArray"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!RestOrArray:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RestOrArray<T> = "
            },
            {
              "kind": "Content",
              "text": "T[] | [\n    T[]\n]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/normalizeArray.ts",
          "releaseTag": "Public",
          "name": "RestOrArray",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/builders!RGBTuple:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RGBTuple = "
            },
            {
              "kind": "Content",
              "text": "[\n    /*red*/ number,\n    /*green*/ number,\n    /*blue*/ number\n]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/messages/embed/Embed.ts",
          "releaseTag": "Public",
          "name": "RGBTuple",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!RoleSelectMenuBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RoleSelectMenuBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIRoleSelectComponent",
              "canonicalReference": "discord-api-types!APIRoleSelectComponent:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/RoleSelectMenu.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RoleSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!RoleSelectMenuBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new select menu from API data\n *\n * @param data - The API data to create this select menu with\n *\n * @example\n *\n * Creating a select menu from an API data object\n * ```ts\n * const selectMenu = new RoleSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tplaceholder: 'select an option',\n * \tmax_values: 2,\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu using setters and API data\n * ```ts\n * const selectMenu = new RoleSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * })\n * \t.setMinValues(1)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIRoleSelectComponent",
                  "canonicalReference": "discord-api-types!APIRoleSelectComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SharedNameAndDescription "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/NameAndDescription.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SharedNameAndDescription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#description_localizations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description_localizations?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description_localizations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#name_localizations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name_localizations?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name_localizations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setDescription:member(1)",
              "docComment": "/**\n * Sets the description\n *\n * @param description - The description\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDescription(description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDescription"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setDescriptionLocalization:member(1)",
              "docComment": "/**\n * Sets a description localization\n *\n * @param locale - The locale to set a description for\n *\n * @param localizedDescription - The localized description for the given locale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDescriptionLocalization(locale: "
                },
                {
                  "kind": "Reference",
                  "text": "LocaleString",
                  "canonicalReference": "discord-api-types!LocaleString:type"
                },
                {
                  "kind": "Content",
                  "text": ", localizedDescription: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "locale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "localizedDescription",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDescriptionLocalization"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setDescriptionLocalizations:member(1)",
              "docComment": "/**\n * Sets the description localizations\n *\n * @param localizedDescriptions - The dictionary of localized descriptions to set\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDescriptionLocalizations(localizedDescriptions: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "localizedDescriptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDescriptionLocalizations"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setName:member(1)",
              "docComment": "/**\n * Sets the name\n *\n * @param name - The name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setName(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setNameLocalization:member(1)",
              "docComment": "/**\n * Sets a name localization\n *\n * @param locale - The locale to set a description for\n *\n * @param localizedName - The localized description for the given locale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNameLocalization(locale: "
                },
                {
                  "kind": "Reference",
                  "text": "LocaleString",
                  "canonicalReference": "discord-api-types!LocaleString:type"
                },
                {
                  "kind": "Content",
                  "text": ", localizedName: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "locale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "localizedName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNameLocalization"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription#setNameLocalizations:member(1)",
              "docComment": "/**\n * Sets the name localizations\n *\n * @param localizedNames - The dictionary of localized descriptions to set\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNameLocalizations(localizedNames: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "localizedNames",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNameLocalizations"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = "
            },
            {
              "kind": "Content",
              "text": "true"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ShouldOmitSubcommandFunctions",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "isAbstract": false,
          "name": "SharedSlashCommandOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addAttachmentOption:member(1)",
              "docComment": "/**\n * Adds an attachment option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addAttachmentOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandAttachmentOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandAttachmentOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandAttachmentOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addAttachmentOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addBooleanOption:member(1)",
              "docComment": "/**\n * Adds a boolean option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addBooleanOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandBooleanOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandBooleanOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandBooleanOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addBooleanOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addChannelOption:member(1)",
              "docComment": "/**\n * Adds a channel option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addChannelOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandChannelOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandChannelOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandChannelOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandChannelOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandChannelOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandChannelOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addChannelOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addIntegerOption:member(1)",
              "docComment": "/**\n * Adds an integer option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addIntegerOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandIntegerOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 40,
                "endIndex": 45
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 39
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addIntegerOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addMentionableOption:member(1)",
              "docComment": "/**\n * Adds a mentionable option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMentionableOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandMentionableOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandMentionableOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandMentionableOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addMentionableOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addNumberOption:member(1)",
              "docComment": "/**\n * Adds a number option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addNumberOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandNumberOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 40,
                "endIndex": 45
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 39
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addNumberOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addRoleOption:member(1)",
              "docComment": "/**\n * Adds a role option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addRoleOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandRoleOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandRoleOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandRoleOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandRoleOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandRoleOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandRoleOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addRoleOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addStringOption:member(1)",
              "docComment": "/**\n * Adds a string option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addStringOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'addChoices'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ", 'setAutocomplete'>> | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandStringOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 40,
                "endIndex": 45
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 39
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addStringOption"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#addUserOption:member(1)",
              "docComment": "/**\n * Adds a user option\n *\n * @param input - A function that returns an option builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addUserOption(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandUserOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandUserOption:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((builder: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandUserOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandUserOption:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandUserOption",
                  "canonicalReference": "@discordjs/builders!SlashCommandUserOption:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "ShouldOmitSubcommandFunctions extends true ? "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<this, "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof this, \"addSubcommand\" | \"addSubcommandGroup\">> : this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addUserOption"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "ToAPIApplicationCommandOptions",
                  "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!SlashCommandAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "SlashCommandAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.assertReturnOfBuilder:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function assertReturnOfBuilder<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionBase",
                  "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandGroupBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">(input: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", ExpectedInstanceOf: "
                },
                {
                  "kind": "Content",
                  "text": "new () => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ExpectedInstanceOf",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "assertReturnOfBuilder"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.localizationMapPredicate:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localizationMapPredicate: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UnionValidator",
                  "canonicalReference": "@sapphire/shapeshift!UnionValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "UndefinedToOptional",
                  "canonicalReference": "@sapphire/shapeshift!UndefinedToOptional:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"id\" | \"en-US\" | \"en-GB\" | \"bg\" | \"zh-CN\" | \"zh-TW\" | \"hr\" | \"cs\" | \"da\" | \"nl\" | \"fi\" | \"fr\" | \"de\" | \"el\" | \"hi\" | \"hu\" | \"it\" | \"ja\" | \"ko\" | \"lt\" | \"no\" | \"pl\" | \"pt-BR\" | \"ro\" | \"ru\" | \"es-ES\" | \"sv-SE\" | \"th\" | \"tr\" | \"uk\" | \"vi\", string | null>>> | null | undefined>"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "localizationMapPredicate",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateChoicesLength:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateChoicesLength(amountAdding: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", choices?: "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandOptionChoice",
                  "canonicalReference": "discord-api-types!APIApplicationCommandOptionChoice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amountAdding",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "choices",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "validateChoicesLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateDefaultMemberPermissions:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDefaultMemberPermissions(permissions: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDefaultMemberPermissions"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateDefaultPermission:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDefaultPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDefaultPermission"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateDescription:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDescription(description: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDescription"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateDMPermission:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateDMPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateDMPermission"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateLocale:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateLocale(locale: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Locale",
                  "canonicalReference": "discord-api-types!Locale:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "locale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateLocale"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateLocalizationMap:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateLocalizationMap(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateLocalizationMap"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateMaxOptionsLength:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateMaxOptionsLength(options: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateMaxOptionsLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateName:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateName(name: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateName"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateNSFW:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateNSFW(value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateNSFW"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateRequired:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequired(required: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "required",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateRequired"
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!SlashCommandAssertions.validateRequiredParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredParameters(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "ToAPIApplicationCommandOptions",
                  "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/interactions/slashCommands/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "name": "validateRequiredParameters"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandAttachmentOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/attachment.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandAttachmentOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandAttachmentOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandAttachmentOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandAttachmentOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Attachment",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Attachment:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandBooleanOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/boolean.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandBooleanOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandBooleanOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandBooleanOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBooleanOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Boolean",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Boolean:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandBuilder "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandBuilder.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#addSubcommand:member(1)",
              "docComment": "/**\n * Adds a new subcommand to this command\n *\n * @param input - A function that returns a subcommand builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSubcommand(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((subcommandGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandsOnlyBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandsOnlyBuilder:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addSubcommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#addSubcommandGroup:member(1)",
              "docComment": "/**\n * Adds a new subcommand group to this command\n *\n * @param input - A function that returns a subcommand group builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSubcommandGroup(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandGroupBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((subcommandGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandGroupBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandGroupBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandsOnlyBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandsOnlyBuilder:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addSubcommandGroup"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#default_member_permissions:member",
              "docComment": "/**\n * Set of permissions represented as a bit set for the command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly default_member_permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Permissions",
                  "canonicalReference": "discord-api-types!Permissions:type"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "default_member_permissions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#default_permission:member",
              "docComment": "/**\n * Whether the command is enabled by default when the app is added to a guild\n *\n * @deprecated\n *\n * This property is deprecated and will be removed in the future. You should use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly default_permission: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "default_permission",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#description_localizations:member",
              "docComment": "/**\n * The localized descriptions for this command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description_localizations?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description_localizations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#description:member",
              "docComment": "/**\n * The description of this slash command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#dm_permission:member",
              "docComment": "/**\n * Indicates whether the command is available in DMs with the application, only for globally-scoped commands. By default, commands are visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly dm_permission: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dm_permission",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#name_localizations:member",
              "docComment": "/**\n * The localized names for this command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name_localizations?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalizationMap",
                  "canonicalReference": "discord-api-types!LocalizationMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name_localizations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#name:member",
              "docComment": "/**\n * The name of this slash command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#nsfw:member",
              "docComment": "/**\n * Whether this command is NSFW\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nsfw: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nsfw",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#options:member",
              "docComment": "/**\n * The options of this slash command\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "ToAPIApplicationCommandOptions",
                  "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#setDefaultMemberPermissions:member(1)",
              "docComment": "/**\n * Sets the default permissions a member should have in order to run the command.\n *\n * @remarks\n *\n * You can set this to `'0'` to disable the command by default.\n *\n * @param permissions - The permissions bit field to set\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultMemberPermissions(permissions: "
                },
                {
                  "kind": "Reference",
                  "text": "Permissions",
                  "canonicalReference": "discord-api-types!Permissions:type"
                },
                {
                  "kind": "Content",
                  "text": " | bigint | number | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "permissions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDefaultMemberPermissions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#setDefaultPermission:member(1)",
              "docComment": "/**\n * Sets whether the command is enabled by default when the application is added to a guild.\n *\n * @remarks\n *\n * If set to `false`, you will have to later `PUT` the permissions for this command.\n *\n * @deprecated\n *\n * Use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n *\n * @param value - Whether or not to enable this command by default\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaultPermission(value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDefaultPermission"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#setDMPermission:member(1)",
              "docComment": "/**\n * Sets if the command is available in DMs with the application, only for globally-scoped commands. By default, commands are visible.\n *\n * @param enabled - If the command should be enabled in DMs\n *\n * @see\n *\n * https://discord.com/developers/docs/interactions/application-commands#permissions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDMPermission(enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDMPermission"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#setNSFW:member(1)",
              "docComment": "/**\n * Sets whether this command is NSFW\n *\n * @param nsfw - Whether this command is NSFW\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNSFW(nsfw?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nsfw",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setNSFW"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder#toJSON:member(1)",
              "docComment": "/**\n * Returns the final data that should be sent to Discord.\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIChatInputApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIChatInputApplicationCommandsJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandBuilder:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "SharedNameAndDescription",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SharedSlashCommandOptions",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandBuilder.ts",
          "releaseTag": "Public",
          "name": "SlashCommandBuilder",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandChannelOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandChannelOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/channel.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandChannelOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandChannelOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandChannelOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandChannelOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandChannelOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Channel",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Channel:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandChannelOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandChannelOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionChannelTypesMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionChannelTypesMixin:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/channel.ts",
          "releaseTag": "Public",
          "name": "SlashCommandChannelOption",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandIntegerOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandNumericOptionMinMaxValueMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/integer.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandIntegerOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption#setMaxValue:member(1)",
              "docComment": "/**\n * Sets the maximum number value of this option\n *\n * @param max - The maximum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaxValue(max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMaxValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption#setMinValue:member(1)",
              "docComment": "/**\n * Sets the minimum number value of this option\n *\n * @param min - The minimum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinValue(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMinValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandIntegerOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandIntegerOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Integer",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Integer:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandIntegerOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandIntegerOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandNumericOptionMinMaxValueMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionWithChoicesAndAutocompleteMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin:class"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/integer.ts",
          "releaseTag": "Public",
          "name": "SlashCommandIntegerOption",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandMentionableOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/mentionable.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandMentionableOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandMentionableOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandMentionableOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandMentionableOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Mentionable",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Mentionable:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandNumberOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandNumericOptionMinMaxValueMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/number.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandNumberOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandNumberOption#setMaxValue:member(1)",
              "docComment": "/**\n * Sets the maximum number value of this option\n *\n * @param max - The maximum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaxValue(max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMaxValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandNumberOption#setMinValue:member(1)",
              "docComment": "/**\n * Sets the minimum number value of this option\n *\n * @param min - The minimum value this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinValue(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMinValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandNumberOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandNumberOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandNumberOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandNumberOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Number",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Number:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandNumberOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandNumberOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandNumericOptionMinMaxValueMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandNumericOptionMinMaxValueMixin:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionWithChoicesAndAutocompleteMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin:class"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/number.ts",
          "releaseTag": "Public",
          "name": "SlashCommandNumberOption",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandOptionsOnlyBuilder:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandOptionsOnlyBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "SharedNameAndDescription",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SharedSlashCommandOptions",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SlashCommandBuilder",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder:class"
            },
            {
              "kind": "Content",
              "text": ", 'toJSON'>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandBuilder.ts",
          "releaseTag": "Public",
          "name": "SlashCommandOptionsOnlyBuilder",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandRoleOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandRoleOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/role.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandRoleOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandRoleOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandRoleOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandRoleOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandRoleOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.Role",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.Role:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandStringOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandStringOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/string.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandStringOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#max_length:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly max_length?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "max_length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#min_length:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly min_length?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "min_length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#setMaxLength:member(1)",
              "docComment": "/**\n * Sets the maximum length of this string option.\n *\n * @param max - The maximum length this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaxLength(max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMaxLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#setMinLength:member(1)",
              "docComment": "/**\n * Sets the minimum length of this string option.\n *\n * @param min - The minimum length this option can be\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinLength(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMinLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandStringOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandStringOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandStringOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.String",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.String:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandStringOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandStringOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionWithChoicesAndAutocompleteMixin",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionWithChoicesAndAutocompleteMixin:class"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/string.ts",
          "releaseTag": "Public",
          "name": "SlashCommandStringOption",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class",
          "docComment": "/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandSubcommandBuilder implements "
            },
            {
              "kind": "Reference",
              "text": "ToAPIApplicationCommandOptions",
              "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandSubcommands.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandSubcommandBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder#description:member",
              "docComment": "/**\n * The description of this subcommand\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder#name:member",
              "docComment": "/**\n * The name of this subcommand\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder#options:member",
              "docComment": "/**\n * The options of this subcommand\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionBase",
                  "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandSubcommandOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandSubcommandOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandSubcommandBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "SharedNameAndDescription",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SharedSlashCommandOptions",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions:class"
            },
            {
              "kind": "Content",
              "text": "<false>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandSubcommands.ts",
          "releaseTag": "Public",
          "name": "SlashCommandSubcommandBuilder",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:class",
          "docComment": "/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandSubcommandGroupBuilder implements "
            },
            {
              "kind": "Reference",
              "text": "ToAPIApplicationCommandOptions",
              "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandSubcommands.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandSubcommandGroupBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder#addSubcommand:member(1)",
              "docComment": "/**\n * Adds a new subcommand to this group\n *\n * @param input - A function that returns a subcommand builder, or an already built builder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSubcommand(input: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": " | ((subcommandGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ")"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addSubcommand"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder#description:member",
              "docComment": "/**\n * The description of this subcommand group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder#name:member",
              "docComment": "/**\n * The name of this subcommand group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder#options:member",
              "docComment": "/**\n * The subcommands part of this subcommand group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "SlashCommandSubcommandBuilder",
                  "canonicalReference": "@discordjs/builders!SlashCommandSubcommandBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandSubcommandGroupOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandSubcommandGroupOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandSubcommandGroupBuilder:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandSubcommandGroupBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "SharedNameAndDescription",
              "canonicalReference": "@discordjs/builders!SharedNameAndDescription:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandSubcommands.ts",
          "releaseTag": "Public",
          "name": "SlashCommandSubcommandGroupBuilder",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!SlashCommandSubcommandsOnlyBuilder:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SlashCommandSubcommandsOnlyBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SlashCommandBuilder",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "SlashCommandBuilder",
              "canonicalReference": "@discordjs/builders!SlashCommandBuilder:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "SharedSlashCommandOptions",
              "canonicalReference": "@discordjs/builders!SharedSlashCommandOptions:class"
            },
            {
              "kind": "Content",
              "text": ", 'options'>>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandBuilder.ts",
          "releaseTag": "Public",
          "name": "SlashCommandSubcommandsOnlyBuilder",
          "preserveMemberOrder": false,
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!SlashCommandUserOption:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SlashCommandUserOption extends "
            },
            {
              "kind": "Reference",
              "text": "ApplicationCommandOptionBase",
              "canonicalReference": "@discordjs/builders!ApplicationCommandOptionBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/options/user.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "SlashCommandUserOption",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!SlashCommandUserOption#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandUserOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandUserOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!SlashCommandUserOption#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandOptionType.User",
                  "canonicalReference": "discord-api-types!ApplicationCommandOptionType.User:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder:class",
          "docComment": "/**\n * Represents a string select menu component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringSelectMenuBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIStringSelectComponent",
              "canonicalReference": "discord-api-types!APIStringSelectComponent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/StringSelectMenu.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StringSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new select menu from API data\n *\n * @param data - The API data to create this select menu with\n *\n * @example\n *\n * Creating a select menu from an API data object\n * ```ts\n * const selectMenu = new StringSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tplaceholder: 'select an option',\n * \tmax_values: 2,\n * \toptions: [\n * \t\t{ label: 'option 1', value: '1' },\n * \t\t{ label: 'option 2', value: '2' },\n * \t\t{ label: 'option 3', value: '3' },\n * \t],\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu using setters and API data\n * ```ts\n * const selectMenu = new StringSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * })\n * \t.setMinValues(1)\n * \t.addOptions({\n * \t\tlabel: 'Catchy',\n * \t\tvalue: 'catch',\n * \t});\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIStringSelectComponent",
                  "canonicalReference": "discord-api-types!APIStringSelectComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder#addOptions:member(1)",
              "docComment": "/**\n * Adds options to this select menu\n *\n * @param options - The options to add to this select menu\n *\n * @returns \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addOptions(...options: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addOptions"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder#options:member",
              "docComment": "/**\n * The options within this select menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder#setOptions:member(1)",
              "docComment": "/**\n * Sets the options on this select menu\n *\n * @param options - The options to set on this select menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOptions(...options: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setOptions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder#spliceOptions:member(1)",
              "docComment": "/**\n * Removes, replaces, or inserts options in the string select menu.\n *\n * @remarks\n *\n * This method behaves similarly to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.\n *\n * It's useful for modifying and adjusting order of the already-existing options of a string select menu.\n *\n * @param index - The index to start at\n *\n * @param deleteCount - The number of options to remove\n *\n * @param options - The replacing option objects or builders\n *\n * @example\n *\n * Remove the first option\n * ```ts\n * selectMenu.spliceOptions(0, 1);\n * ```\n *\n * @example\n *\n * Remove the first n option\n * ```ts\n * const n = 4\n * selectMenu.spliceOptions(0, n);\n * ```\n *\n * @example\n *\n * Remove the last option\n * ```ts\n * selectMenu.spliceOptions(-1, 1);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spliceOptions(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", deleteCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", ...options: "
                },
                {
                  "kind": "Reference",
                  "text": "RestOrArray",
                  "canonicalReference": "@discordjs/builders!RestOrArray:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "StringSelectMenuOptionBuilder",
                  "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "deleteCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "spliceOptions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIStringSelectComponent",
                  "canonicalReference": "discord-api-types!APIStringSelectComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:class",
          "docComment": "/**\n * Represents an option within a string select menu component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringSelectMenuOptionBuilder implements "
            },
            {
              "kind": "Reference",
              "text": "JSONEncodable",
              "canonicalReference": "@discordjs/util!JSONEncodable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APISelectMenuOption",
              "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/StringSelectMenuOption.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StringSelectMenuOptionBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new string select menu option from API data\n *\n * @param data - The API data to create this string select menu option with\n *\n * @example\n *\n * Creating a string select menu option from an API data object\n * ```ts\n * const selectMenuOption = new SelectMenuOptionBuilder({\n * \tlabel: 'catchy label',\n * \tvalue: '1',\n * });\n * ```\n *\n * @example\n *\n * Creating a string select menu option using setters and API data\n * ```ts\n * const selectMenuOption = new SelectMenuOptionBuilder({\n * \tdefault: true,\n * \tvalue: '1',\n * })\n * \t.setLabel('woah')\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#setDefault:member(1)",
              "docComment": "/**\n * Sets whether this option is selected by default\n *\n * @param isDefault - Whether this option is selected by default\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefault(isDefault?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "isDefault",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDefault"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#setDescription:member(1)",
              "docComment": "/**\n * Sets the description of this option\n *\n * @param description - The description of this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDescription(description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setDescription"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#setEmoji:member(1)",
              "docComment": "/**\n * Sets the emoji to display on this option\n *\n * @param emoji - The emoji to display on this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEmoji(emoji: "
                },
                {
                  "kind": "Reference",
                  "text": "APIMessageComponentEmoji",
                  "canonicalReference": "discord-api-types!APIMessageComponentEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#setLabel:member(1)",
              "docComment": "/**\n * Sets the label of this option\n *\n * @param label - The label to show on this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLabel(label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setLabel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#setValue:member(1)",
              "docComment": "/**\n * Sets the value of this option\n *\n * @param value - The value of this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!StringSelectMenuOptionBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APISelectMenuOption",
                  "canonicalReference": "discord-api-types!APISelectMenuOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@discordjs/builders!TextInputAssertions:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "TextInputAssertions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.labelValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "labelValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.maxLengthValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLengthValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "maxLengthValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.minLengthValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minLengthValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NumberValidator",
                  "canonicalReference": "@sapphire/shapeshift!NumberValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "minLengthValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.placeholderValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholderValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "placeholderValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.requiredValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requiredValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "BooleanValidator",
                  "canonicalReference": "@sapphire/shapeshift!BooleanValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "requiredValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.textInputStyleValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textInputStyleValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "NativeEnumValidator",
                  "canonicalReference": "@sapphire/shapeshift!NativeEnumValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<typeof "
                },
                {
                  "kind": "Reference",
                  "text": "TextInputStyle",
                  "canonicalReference": "discord-api-types!TextInputStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "textInputStyleValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.validateRequiredParameters:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function validateRequiredParameters(customId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", style?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextInputStyle",
                  "canonicalReference": "discord-api-types!TextInputStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ", label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "validateRequiredParameters"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@discordjs/builders!TextInputAssertions.valueValidator:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valueValidator: "
                },
                {
                  "kind": "Content",
                  "text": "import(\"@sapphire/shapeshift\")."
                },
                {
                  "kind": "Reference",
                  "text": "StringValidator",
                  "canonicalReference": "@sapphire/shapeshift!StringValidator:class"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                }
              ],
              "fileUrlPath": "src/components/textInput/Assertions.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "valueValidator",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!TextInputBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextInputBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "ComponentBuilder",
              "canonicalReference": "@discordjs/builders!ComponentBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APITextInputComponent",
              "canonicalReference": "discord-api-types!APITextInputComponent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "Equatable",
              "canonicalReference": "@discordjs/util!Equatable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APITextInputComponent",
              "canonicalReference": "discord-api-types!APITextInputComponent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JSONEncodable",
              "canonicalReference": "@discordjs/util!JSONEncodable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APITextInputComponent",
              "canonicalReference": "discord-api-types!APITextInputComponent:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/textInput/TextInput.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TextInputBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!TextInputBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new text input from API data\n *\n * @param data - The API data to create this text input with\n *\n * @example\n *\n * Creating a select menu option from an API data object\n * ```ts\n * const textInput = new TextInputBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tlabel: 'Type something',\n * \tstyle: TextInputStyle.Short,\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu option using setters and API data\n * ```ts\n * const textInput = new TextInputBuilder({\n * \tlabel: 'Type something else',\n * })\n * \t.setCustomId('woah')\n * \t.setStyle(TextInputStyle.Paragraph);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "APITextInputComponent",
                  "canonicalReference": "discord-api-types!APITextInputComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        type?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentType.TextInput",
                  "canonicalReference": "discord-api-types!ComponentType.TextInput:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#equals:member(1)",
              "docComment": "/**\n * {@inheritDoc Equatable.equals}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(other: "
                },
                {
                  "kind": "Reference",
                  "text": "APITextInputComponent",
                  "canonicalReference": "discord-api-types!APITextInputComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONEncodable",
                  "canonicalReference": "@discordjs/util!JSONEncodable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APITextInputComponent",
                  "canonicalReference": "discord-api-types!APITextInputComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setCustomId:member(1)",
              "docComment": "/**\n * Sets the custom id for this text input\n *\n * @param customId - The custom id of this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCustomId(customId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "customId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setCustomId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setLabel:member(1)",
              "docComment": "/**\n * Sets the label for this text input\n *\n * @param label - The label for this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLabel(label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setLabel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setMaxLength:member(1)",
              "docComment": "/**\n * Sets the maximum length of text for this text input\n *\n * @param maxLength - The maximum length of text for this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMaxLength(maxLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMaxLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setMinLength:member(1)",
              "docComment": "/**\n * Sets the minimum length of text for this text input\n *\n * @param minLength - The minimum length of text for this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMinLength(minLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setMinLength"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setPlaceholder:member(1)",
              "docComment": "/**\n * Sets the placeholder of this text input\n *\n * @param placeholder - The placeholder of this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPlaceholder(placeholder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "placeholder",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setPlaceholder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setRequired:member(1)",
              "docComment": "/**\n * Sets whether this text input is required\n *\n * @param required - Whether this text input is required\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRequired(required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "required",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setRequired"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setStyle:member(1)",
              "docComment": "/**\n * Sets the style for this text input\n *\n * @param style - The style for this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStyle(style: "
                },
                {
                  "kind": "Reference",
                  "text": "TextInputStyle",
                  "canonicalReference": "discord-api-types!TextInputStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#setValue:member(1)",
              "docComment": "/**\n * Sets the value of this text input\n *\n * @param value - The value for this text input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/builders!TextInputBuilder#toJSON:member(1)",
              "docComment": "/**\n * Serializes this component to an API-compatible JSON object\n *\n * @remarks\n *\n * This method runs validations on the data before serializing it. As such, it may throw an error if the data is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APITextInputComponent",
                  "canonicalReference": "discord-api-types!APITextInputComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ToAPIApplicationCommandOptions "
            }
          ],
          "fileUrlPath": "src/interactions/slashCommands/SlashCommandBuilder.ts",
          "releaseTag": "Public",
          "name": "ToAPIApplicationCommandOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/builders!ToAPIApplicationCommandOptions#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommandOption",
                  "canonicalReference": "discord-api-types!APIApplicationCommandOption:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/builders!UserSelectMenuBuilder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UserSelectMenuBuilder extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectMenuBuilder",
              "canonicalReference": "@discordjs/builders!BaseSelectMenuBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "APIUserSelectComponent",
              "canonicalReference": "discord-api-types!APIUserSelectComponent:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/components/selectMenu/UserSelectMenu.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "UserSelectMenuBuilder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/builders!UserSelectMenuBuilder:constructor(1)",
              "docComment": "/**\n * Creates a new select menu from API data\n *\n * @param data - The API data to create this select menu with\n *\n * @example\n *\n * Creating a select menu from an API data object\n * ```ts\n * const selectMenu = new UserSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * \tplaceholder: 'select an option',\n * \tmax_values: 2,\n * });\n * ```\n *\n * @example\n *\n * Creating a select menu using setters and API data\n * ```ts\n * const selectMenu = new UserSelectMenuBuilder({\n * \tcustom_id: 'a cool select menu',\n * })\n * \t.setMinValues(1)\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIUserSelectComponent",
                  "canonicalReference": "discord-api-types!APIUserSelectComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/builders!version:var",
          "docComment": "/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/builders/#readme | @discordjs/builders} version that you are currently using.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "version: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "version",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
