{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/brokers",
  "kind": "Package",
  "canonicalReference": "@discordjs/brokers!",
  "docComment": "",
  "name": "@discordjs/brokers",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/brokers!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!BaseBrokerOptions:interface",
          "docComment": "/**\n * Base options for a broker implementation\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface BaseBrokerOptions "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "BaseBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#blockTimeout:member",
              "docComment": "/**\n * How long to block for messages when polling\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blockTimeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "blockTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#decode:member",
              "docComment": "/**\n * Function to use for decoding messages\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decode?: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer_2",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "decode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#encode:member",
              "docComment": "/**\n * Function to use for encoding messages\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encode?: "
                },
                {
                  "kind": "Content",
                  "text": "(data: unknown) => "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer_2",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#maxChunk:member",
              "docComment": "/**\n * Max number of messages to poll at once\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxChunk?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxChunk",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#name:member",
              "docComment": "/**\n * Unique consumer name.\n *\n * @see\n *\n * {@link https://redis.io/commands/xreadgroup/}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class",
          "docComment": "/**\n * Helper class with shared Redis logic\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class BaseRedisBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<TEvents>>"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": true,
          "name": "BaseRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BaseRedisBroker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#destroy:member(1)",
              "docComment": "/**\n * Destroys the broker, closing all connections\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#emitEvent:member(1)",
              "docComment": "/**\n * Handles an incoming Redis event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract emitEvent(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer_2",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", event: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": true,
              "name": "emitEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listen:member(1)",
              "docComment": "/**\n * Begins polling for events, firing them to {@link BaseRedisBroker.listen}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected listen(group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "listen"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listening:member",
              "docComment": "/**\n * Whether this broker is currently polling events\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected listening: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "listening",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#options:member",
              "docComment": "/**\n * Options this broker is using\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker.STREAM_DATA_KEY:member",
              "docComment": "/**\n * Used for Redis queues, see the 3rd argument taken by {@link https://redis.io/commands/xadd | xadd}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly STREAM_DATA_KEY = "
                },
                {
                  "kind": "Content",
                  "text": "\"data\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "STREAM_DATA_KEY",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#streamReadClient:member",
              "docComment": "/**\n * Internal copy of the Redis client being used to read incoming payloads\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly streamReadClient: "
                },
                {
                  "kind": "Reference",
                  "text": "Redis",
                  "canonicalReference": "ioredis!Redis:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamReadClient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribe:member(1)",
              "docComment": "/**\n * Subscribes to the given events, grouping them by the given group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Content",
                  "text": "(keyof TEvents)[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "subscribe"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribedEvents:member",
              "docComment": "/**\n * Events this broker has subscribed to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly subscribedEvents: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subscribedEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#unsubscribe:member(1)",
              "docComment": "/**\n * Unsubscribes from the given events - it's required to pass the same group name as when subscribing for proper cleanup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe(group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Content",
                  "text": "(keyof TEvents)[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "unsubscribe"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "implementsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/brokers!DefaultBrokerOptions:var",
          "docComment": "/**\n * Default broker options\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultBrokerOptions: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly name: string;\n    readonly maxChunk: 10;\n    readonly blockTimeout: 5000;\n    readonly encode: (data: unknown) => "
            },
            {
              "kind": "Reference",
              "text": "Buffer_2",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly decode: (data: "
            },
            {
              "kind": "Reference",
              "text": "Buffer_2",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown;\n}"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultBrokerOptions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/brokers!DefaultRPCRedisBrokerOptions:var",
          "docComment": "/**\n * Default values used for the {@link RPCRedisBrokerOptions}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DefaultRPCRedisBrokerOptions: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly timeout: 5000;\n    readonly name: string;\n    readonly maxChunk: 10;\n    readonly blockTimeout: 5000;\n    readonly encode: (data: unknown) => "
            },
            {
              "kind": "Reference",
              "text": "Buffer_2",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly decode: (data: "
            },
            {
              "kind": "Reference",
              "text": "Buffer_2",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown;\n}"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultRPCRedisBrokerOptions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IBaseBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IBaseBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IBaseBroker#subscribe:member(1)",
              "docComment": "/**\n * Subscribes to the given events, grouping them by the given group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Content",
                  "text": "(keyof TEvents)[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "subscribe"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IBaseBroker#unsubscribe:member(1)",
              "docComment": "/**\n * Unsubscribes from the given events - it's required to pass the same group name as when subscribing for proper cleanup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe(group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Content",
                  "text": "(keyof TEvents)[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "unsubscribe"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IPubSubBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IPubSubBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<TEvents>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IPubSubBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IPubSubBroker#publish:member(1)",
              "docComment": "/**\n * Publishes an event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "publish<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "TEvents[T]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "publish"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            },
            {
              "startIndex": 7,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IRPCBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IRPCBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": ", TResponses extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof TEvents, any>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<TEvents, TResponses>>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IRPCBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IRPCBroker#call:member(1)",
              "docComment": "/**\n * Makes an RPC call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "TEvents[T]"
                },
                {
                  "kind": "Content",
                  "text": ", timeoutDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResponses[T]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timeoutDuration",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "call"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 7,
              "endIndex": 9
            },
            {
              "startIndex": 10,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!PubSubRedisBroker:class",
          "docComment": "/**\n * PubSub broker powered by Redis\n *\n * @example\n * ```ts\n * // publisher.js\n * import { PubSubRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new PubSubRedisBroker({ redisClient: new Redis() });\n *\n * await broker.publish('test', 'Hello World!');\n * await broker.destroy();\n *\n * // subscriber.js\n * import { PubSubRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new PubSubRedisBroker({ redisClient: new Redis() });\n * \tbroker.on('test', ({ data, ack }) => {\n * \tconsole.log(data);\n * \tvoid ack();\n * });\n *\n * await broker.subscribe('subscribers', ['test']);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PubSubRedisBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseRedisBroker",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IPubSubBroker",
              "canonicalReference": "@discordjs/brokers!IPubSubBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "PubSubRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#emitEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected emitEvent(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer_2",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", event: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emitEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#publish:member(1)",
              "docComment": "/**\n * Publishes an event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "publish<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "TEvents[T]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "publish"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "implementsTokenRanges": [
            {
              "startIndex": 7,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface",
          "docComment": "/**\n * Options specific for a Redis broker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RedisBrokerOptions extends "
            },
            {
              "kind": "Reference",
              "text": "BaseBrokerOptions",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RedisBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!RedisBrokerOptions#redisClient:member",
              "docComment": "/**\n * The Redis client to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redisClient: "
                },
                {
                  "kind": "Reference",
                  "text": "Redis",
                  "canonicalReference": "ioredis!Redis:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redisClient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!RPCRedisBroker:class",
          "docComment": "/**\n * RPC broker powered by Redis\n *\n * @example\n * ```ts\n * // caller.js\n * import { RPCRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new RPCRedisBroker({ redisClient: new Redis() });\n *\n * console.log(await broker.call('testcall', 'Hello World!'));\n * await broker.destroy();\n *\n * // responder.js\n * import { RPCRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new RPCRedisBroker({ redisClient: new Redis() });\n * broker.on('testcall', ({ data, ack, reply }) => {\n * \tconsole.log('responder', data);\n * \tvoid ack();\n * \tvoid reply(`Echo: ${data}`);\n * });\n *\n * await broker.subscribe('responders', ['testcall']);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RPCRedisBroker<TEvents extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": ", TResponses extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof TEvents, any>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseRedisBroker",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<TEvents>"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IRPCBroker",
              "canonicalReference": "@discordjs/brokers!IRPCBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<TEvents, TResponses>"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "RPCRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RPCRedisBroker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RPCRedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#call:member(1)",
              "docComment": "/**\n * Makes an RPC call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "TEvents[T]"
                },
                {
                  "kind": "Content",
                  "text": ", timeoutDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResponses[T]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timeoutDuration",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "call"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#emitEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected emitEvent(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer_2",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", event: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emitEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#options:member",
              "docComment": "/**\n * Options this broker is using\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly options: "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RPCRedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#promises:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly promises: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "InternalPromise",
                  "canonicalReference": "@discordjs/brokers!~InternalPromise:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "promises",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "implementsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface",
          "docComment": "/**\n * Options specific for an RPC Redis broker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface RPCRedisBrokerOptions extends "
            },
            {
              "kind": "Reference",
              "text": "RedisBrokerOptions",
              "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "RPCRedisBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions#timeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/brokers!ToEventMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ToEventMap<TRecord extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": ", TResponses extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof TRecord, any> | undefined"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [TKey in keyof TRecord]: [\n    event: TResponses extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof TRecord, any> ? {\n        ack(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n        reply(data: TResponses[TKey]): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    } : {\n        ack(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    } & {\n        data: TRecord[TKey];\n    }\n    ];\n} & {\n    [K: string]: any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "ToEventMap",
          "typeParameters": [
            {
              "typeParameterName": "TRecord",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 9,
            "endIndex": 18
          }
        }
      ]
    }
  ]
}
