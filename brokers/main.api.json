{
  "metadata": {
    "toolPackage": "@discordjs/api-extractor",
    "toolVersion": "7.38.1",
    "schemaVersion": 1012,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/brokers",
  "kind": "Package",
  "canonicalReference": "@discordjs/brokers!",
  "docComment": "",
  "name": "@discordjs/brokers",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/brokers!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!BaseBrokerOptions:interface",
          "docComment": "/**\n * Base options for a broker implementation\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "BaseBrokerOptions",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 9,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "BaseBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#blockTimeout:member",
              "docComment": "/**\n * How long to block for messages when polling\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "blockTimeout",
                  "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#blockTimeout"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 13,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "blockTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#decode:member",
              "docComment": "/**\n * Function to use for decoding messages\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "decode",
                  "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#decode"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 18,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "decode",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#encode:member",
              "docComment": "/**\n * Function to use for encoding messages\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "encode",
                  "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#encode"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 23,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encode",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#maxChunk:member",
              "docComment": "/**\n * Max number of messages to poll at once\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "maxChunk",
                  "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#maxChunk"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 27,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxChunk",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#name:member",
              "docComment": "/**\n * Unique consumer name.\n *\n * @see\n *\n * {@link https://redis.io/commands/xreadgroup/}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "name",
                  "canonicalReference": "@discordjs/brokers!BaseBrokerOptions#name"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 33,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class",
          "docComment": "/**\n * Helper class with shared Redis logic\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class "
            },
            {
              "kind": "Reference",
              "text": "BaseRedisBroker",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/redis/BaseRedis.ts",
          "fileLine": 30,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": true,
          "name": "BaseRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BaseRedisBroker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "options",
                  "canonicalReference": "@discordjs/brokers!~options"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "RedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "fileLine": 58,
              "fileColumn": 1,
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#destroy:member(1)",
              "docComment": "/**\n * Destroys the broker, closing all connections\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "destroy",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#destroy"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 163,
              "fileColumn": 15,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#emitEvent:member(1)",
              "docComment": "/**\n * Handles an incoming Redis event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract "
                },
                {
                  "kind": "Reference",
                  "text": "emitEvent",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#emitEvent"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "id",
                  "canonicalReference": "@discordjs/brokers!~id"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 171,
              "fileColumn": 2,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 19,
                "endIndex": 20
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": true,
              "name": "emitEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listen:member(1)",
              "docComment": "/**\n * Begins polling for events, firing them to {@link BaseRedisBroker.listen}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected "
                },
                {
                  "kind": "Reference",
                  "text": "listen",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listen"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 110,
              "fileColumn": 2,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "listen"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listening:member",
              "docComment": "/**\n * Whether this broker is currently polling events\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected "
                },
                {
                  "kind": "Reference",
                  "text": "listening",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#listening"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 57,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "listening",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#options:member",
              "docComment": "/**\n * Options this broker is using\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly "
                },
                {
                  "kind": "Reference",
                  "text": "options",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#options"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 42,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker.STREAM_DATA_KEY:member",
              "docComment": "/**\n * Used for Redis queues, see the 3rd argument taken by {@link https://redis.io/commands/xadd | xadd}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly "
                },
                {
                  "kind": "Reference",
                  "text": "STREAM_DATA_KEY",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker.STREAM_DATA_KEY"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "\"data\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 37,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "STREAM_DATA_KEY",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "initializerTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#streamReadClient:member",
              "docComment": "/**\n * Internal copy of the Redis client being used to read incoming payloads\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly "
                },
                {
                  "kind": "Reference",
                  "text": "streamReadClient",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#streamReadClient"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Redis",
                  "canonicalReference": "ioredis!Redis:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 52,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamReadClient",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribe:member(1)",
              "docComment": "/**\n * Subscribes to the given events, grouping them by the given group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "subscribe",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribe"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "events",
                  "canonicalReference": "@discordjs/brokers!~events"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "(keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 72,
              "fileColumn": 15,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "subscribe"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribedEvents:member",
              "docComment": "/**\n * Events this broker has subscribed to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly "
                },
                {
                  "kind": "Reference",
                  "text": "subscribedEvents",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#subscribedEvents"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 47,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subscribedEvents",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker#unsubscribe:member(1)",
              "docComment": "/**\n * Unsubscribes from the given events - it's required to pass the same group name as when subscribing for proper cleanup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "unsubscribe",
                  "canonicalReference": "@discordjs/brokers!BaseRedisBroker#unsubscribe"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "events",
                  "canonicalReference": "@discordjs/brokers!~events"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "(keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 92,
              "fileColumn": 15,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "unsubscribe"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 12,
            "endIndex": 19,
            "typeParameters": [
              {
                "startIndex": 14,
                "endIndex": 18
              }
            ]
          },
          "implementsTokenRanges": [
            {
              "startIndex": 20,
              "endIndex": 24,
              "typeParameters": [
                {
                  "startIndex": 22,
                  "endIndex": 23
                }
              ]
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/brokers!DefaultBrokerOptions:var",
          "docComment": "/**\n * Default broker options\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "DefaultBrokerOptions",
              "canonicalReference": "@discordjs/brokers!DefaultBrokerOptions"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "{  readonly "
            },
            {
              "kind": "Reference",
              "text": "name",
              "canonicalReference": "@discordjs/brokers!~__type#name"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";  readonly "
            },
            {
              "kind": "Reference",
              "text": "maxChunk",
              "canonicalReference": "@discordjs/brokers!~__type#maxChunk"
            },
            {
              "kind": "Content",
              "text": ": 10;  readonly "
            },
            {
              "kind": "Reference",
              "text": "blockTimeout",
              "canonicalReference": "@discordjs/brokers!~__type#blockTimeout"
            },
            {
              "kind": "Content",
              "text": ": 5000;  readonly "
            },
            {
              "kind": "Reference",
              "text": "encode",
              "canonicalReference": "@discordjs/brokers!~__type#encode"
            },
            {
              "kind": "Content",
              "text": ": ("
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";  readonly "
            },
            {
              "kind": "Reference",
              "text": "decode",
              "canonicalReference": "@discordjs/brokers!~__type#decode"
            },
            {
              "kind": "Content",
              "text": ": ("
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";}"
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 39,
          "fileColumn": 14,
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultBrokerOptions",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 27
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/brokers!DefaultRPCRedisBrokerOptions:var",
          "docComment": "/**\n * Default values used for the {@link RPCRedisBrokerOptions}\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "DefaultRPCRedisBrokerOptions",
              "canonicalReference": "@discordjs/brokers!DefaultRPCRedisBrokerOptions"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "{  readonly "
            },
            {
              "kind": "Reference",
              "text": "timeout",
              "canonicalReference": "@discordjs/brokers!~__type#timeout"
            },
            {
              "kind": "Content",
              "text": ": 5000;  readonly "
            },
            {
              "kind": "Reference",
              "text": "name",
              "canonicalReference": "@discordjs/brokers!~__type#name"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";  readonly "
            },
            {
              "kind": "Reference",
              "text": "maxChunk",
              "canonicalReference": "@discordjs/brokers!~__type#maxChunk"
            },
            {
              "kind": "Content",
              "text": ": 10;  readonly "
            },
            {
              "kind": "Reference",
              "text": "blockTimeout",
              "canonicalReference": "@discordjs/brokers!~__type#blockTimeout"
            },
            {
              "kind": "Content",
              "text": ": 5000;  readonly "
            },
            {
              "kind": "Reference",
              "text": "encode",
              "canonicalReference": "@discordjs/brokers!~__type#encode"
            },
            {
              "kind": "Content",
              "text": ": ("
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";  readonly "
            },
            {
              "kind": "Reference",
              "text": "decode",
              "canonicalReference": "@discordjs/brokers!~__type#decode"
            },
            {
              "kind": "Content",
              "text": ": ("
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";}"
            }
          ],
          "fileUrlPath": "src/brokers/redis/RPCRedis.ts",
          "fileLine": 24,
          "fileColumn": 14,
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DefaultRPCRedisBrokerOptions",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 29
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IBaseBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 61,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IBaseBroker#subscribe:member(1)",
              "docComment": "/**\n * Subscribes to the given events, grouping them by the given group name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "subscribe",
                  "canonicalReference": "@discordjs/brokers!IBaseBroker#subscribe"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "events",
                  "canonicalReference": "@discordjs/brokers!~events"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "(keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 65,
              "fileColumn": 2,
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "name": "subscribe"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IBaseBroker#unsubscribe:member(1)",
              "docComment": "/**\n * Unsubscribes from the given events - it's required to pass the same group name as when subscribing for proper cleanup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "unsubscribe",
                  "canonicalReference": "@discordjs/brokers!IBaseBroker#unsubscribe"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "events",
                  "canonicalReference": "@discordjs/brokers!~events"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "(keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 69,
              "fileColumn": 2,
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "name": "unsubscribe"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IPubSubBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IPubSubBroker",
              "canonicalReference": "@discordjs/brokers!IPubSubBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 72,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IPubSubBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IPubSubBroker#publish:member(1)",
              "docComment": "/**\n * Publishes an event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "publish",
                  "canonicalReference": "@discordjs/brokers!IPubSubBroker#publish"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": " extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 78,
              "fileColumn": 2,
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 22
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 17
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "publish"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 12,
              "endIndex": 16,
              "typeParameters": [
                {
                  "startIndex": 14,
                  "endIndex": 15
                }
              ]
            },
            {
              "startIndex": 17,
              "endIndex": 24,
              "typeParameters": [
                {
                  "startIndex": 19,
                  "endIndex": 23
                }
              ]
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!IRPCBroker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "IRPCBroker",
              "canonicalReference": "@discordjs/brokers!IRPCBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseBroker",
              "canonicalReference": "@discordjs/brokers!IBaseBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 81,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 14,
                "endIndex": 20
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IRPCBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@discordjs/brokers!IRPCBroker#call:member(1)",
              "docComment": "/**\n * Makes an RPC call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "call",
                  "canonicalReference": "@discordjs/brokers!IRPCBroker#call"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": " extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "timeoutDuration",
                  "canonicalReference": "@discordjs/brokers!~timeoutDuration"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TResponses"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 87,
              "fileColumn": 2,
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 22,
                "endIndex": 28
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 17
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "timeoutDuration",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 21
                  },
                  "isOptional": true,
                  "isRest": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "call"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 21,
              "endIndex": 25,
              "typeParameters": [
                {
                  "startIndex": 23,
                  "endIndex": 24
                }
              ]
            },
            {
              "startIndex": 26,
              "endIndex": 35,
              "typeParameters": [
                {
                  "startIndex": 28,
                  "endIndex": 34
                }
              ]
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!PubSubRedisBroker:class",
          "docComment": "/**\n * PubSub broker powered by Redis\n *\n * @example\n * ```ts\n * // publisher.js\n * import { PubSubRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new PubSubRedisBroker({ redisClient: new Redis() });\n *\n * await broker.publish('test', 'Hello World!');\n * await broker.destroy();\n *\n * // subscriber.js\n * import { PubSubRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new PubSubRedisBroker({ redisClient: new Redis() });\n * \tbroker.on('test', ({ data, ack }) => {\n * \tconsole.log(data);\n * \tvoid ack();\n * });\n *\n * await broker.subscribe('subscribers', ['test']);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "PubSubRedisBroker",
              "canonicalReference": "@discordjs/brokers!PubSubRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseRedisBroker",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IPubSubBroker",
              "canonicalReference": "@discordjs/brokers!IPubSubBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/redis/PubSubRedis.ts",
          "fileLine": 32,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "PubSubRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#emitEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected "
                },
                {
                  "kind": "Reference",
                  "text": "emitEvent",
                  "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#emitEvent"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "id",
                  "canonicalReference": "@discordjs/brokers!~id"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 48,
              "fileColumn": 2,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 19,
                "endIndex": 20
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emitEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#publish:member(1)",
              "docComment": "/**\n * Publishes an event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "publish",
                  "canonicalReference": "@discordjs/brokers!PubSubRedisBroker#publish"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": " extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 39,
              "fileColumn": 15,
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 22
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 17
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "publish"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 12,
            "endIndex": 16,
            "typeParameters": [
              {
                "startIndex": 14,
                "endIndex": 15
              }
            ]
          },
          "implementsTokenRanges": [
            {
              "startIndex": 17,
              "endIndex": 21,
              "typeParameters": [
                {
                  "startIndex": 19,
                  "endIndex": 20
                }
              ]
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface",
          "docComment": "/**\n * Options specific for a Redis broker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "RedisBrokerOptions",
              "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "BaseBrokerOptions",
              "canonicalReference": "@discordjs/brokers!BaseBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/redis/BaseRedis.ts",
          "fileLine": 20,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "RedisBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!RedisBrokerOptions#redisClient:member",
              "docComment": "/**\n * The Redis client to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "redisClient",
                  "canonicalReference": "@discordjs/brokers!RedisBrokerOptions#redisClient"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Redis",
                  "canonicalReference": "ioredis!Redis:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 24,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redisClient",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4,
              "typeParameters": []
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/brokers!RPCRedisBroker:class",
          "docComment": "/**\n * RPC broker powered by Redis\n *\n * @example\n * ```ts\n * // caller.js\n * import { RPCRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new RPCRedisBroker({ redisClient: new Redis() });\n *\n * console.log(await broker.call('testcall', 'Hello World!'));\n * await broker.destroy();\n *\n * // responder.js\n * import { RPCRedisBroker } from '@discordjs/brokers';\n * import Redis from 'ioredis';\n *\n * const broker = new RPCRedisBroker({ redisClient: new Redis() });\n * broker.on('testcall', ({ data, ack, reply }) => {\n * \tconsole.log('responder', data);\n * \tvoid ack();\n * \tvoid reply(`Echo: ${data}`);\n * });\n *\n * await broker.subscribe('responders', ['testcall']);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "RPCRedisBroker",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseRedisBroker",
              "canonicalReference": "@discordjs/brokers!BaseRedisBroker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "IRPCBroker",
              "canonicalReference": "@discordjs/brokers!IRPCBroker:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TEvents"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/redis/RPCRedis.ts",
          "fileLine": 57,
          "fileColumn": 1,
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TEvents",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 14,
                "endIndex": 20
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "isAbstract": false,
          "name": "RPCRedisBroker",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RPCRedisBroker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "options",
                  "canonicalReference": "@discordjs/brokers!~options"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "RPCRedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "fileLine": 66,
              "fileColumn": 67,
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#call:member(1)",
              "docComment": "/**\n * Makes an RPC call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "call",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBroker#call"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": " extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TEvents"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "timeoutDuration",
                  "canonicalReference": "@discordjs/brokers!~timeoutDuration"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TResponses"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 86,
              "fileColumn": 15,
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 22,
                "endIndex": 28
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 17
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "timeoutDuration",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 21
                  },
                  "isOptional": true,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "call"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#emitEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected "
                },
                {
                  "kind": "Reference",
                  "text": "emitEvent",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBroker#emitEvent"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "id",
                  "canonicalReference": "@discordjs/brokers!~id"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "group",
                  "canonicalReference": "@discordjs/brokers!~group"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "event",
                  "canonicalReference": "@discordjs/brokers!~event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "data",
                  "canonicalReference": "@discordjs/brokers!~data"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 117,
              "fileColumn": 2,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 19,
                "endIndex": 20
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "group",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false,
                  "isRest": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 18
                  },
                  "isOptional": false,
                  "isRest": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "emitEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#options:member",
              "docComment": "/**\n * Options this broker is using\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly "
                },
                {
                  "kind": "Reference",
                  "text": "options",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBroker#options"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Required",
                  "canonicalReference": "!Required:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RPCRedisBrokerOptions",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 64,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/brokers!RPCRedisBroker#promises:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly "
                },
                {
                  "kind": "Reference",
                  "text": "promises",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBroker#promises"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "InternalPromise",
                  "canonicalReference": "@discordjs/brokers!~InternalPromise:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 66,
              "fileColumn": 2,
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "promises",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isStatic": false,
              "isProtected": true,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 21,
            "endIndex": 25,
            "typeParameters": [
              {
                "startIndex": 23,
                "endIndex": 24
              }
            ]
          },
          "implementsTokenRanges": [
            {
              "startIndex": 26,
              "endIndex": 32,
              "typeParameters": [
                {
                  "startIndex": 28,
                  "endIndex": 29
                },
                {
                  "startIndex": 30,
                  "endIndex": 31
                }
              ]
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface",
          "docComment": "/**\n * Options specific for an RPC Redis broker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "RPCRedisBrokerOptions",
              "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "RedisBrokerOptions",
              "canonicalReference": "@discordjs/brokers!RedisBrokerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/brokers/redis/RPCRedis.ts",
          "fileLine": 17,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "RPCRedisBrokerOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions#timeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "timeout",
                  "canonicalReference": "@discordjs/brokers!RPCRedisBrokerOptions#timeout"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileLine": 18,
              "fileColumn": 2,
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4,
              "typeParameters": []
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/brokers!ToEventMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type "
            },
            {
              "kind": "Reference",
              "text": "ToEventMap",
              "canonicalReference": "@discordjs/brokers!ToEventMap:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TRecord"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "TRecord"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "undefined"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{  ["
            },
            {
              "kind": "Reference",
              "text": "TKey"
            },
            {
              "kind": "Content",
              "text": " in keyof "
            },
            {
              "kind": "Reference",
              "text": "TRecord"
            },
            {
              "kind": "Content",
              "text": "]: [    event: "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof "
            },
            {
              "kind": "Reference",
              "text": "TRecord"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> ? {      "
            },
            {
              "kind": "Reference",
              "text": "ack",
              "canonicalReference": "@discordjs/brokers!~__type#ack"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">;      "
            },
            {
              "kind": "Reference",
              "text": "reply",
              "canonicalReference": "@discordjs/brokers!~__type#reply"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "TResponses"
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "TKey"
            },
            {
              "kind": "Content",
              "text": "]): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">;    } : {      "
            },
            {
              "kind": "Reference",
              "text": "ack",
              "canonicalReference": "@discordjs/brokers!~__type#ack"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ">;    } & {      "
            },
            {
              "kind": "Reference",
              "text": "data",
              "canonicalReference": "@discordjs/brokers!~__type#data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "TRecord"
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "TKey"
            },
            {
              "kind": "Content",
              "text": "];    }  ];} & {  ["
            },
            {
              "kind": "Reference",
              "text": "K",
              "canonicalReference": "@discordjs/brokers!~K"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/brokers/Broker.ts",
          "fileLine": 50,
          "fileColumn": 1,
          "releaseTag": "Public",
          "name": "ToEventMap",
          "typeParameters": [
            {
              "typeParameterName": "TRecord",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TResponses",
              "constraintTokenRange": {
                "startIndex": 14,
                "endIndex": 21
              },
              "defaultTypeTokenRange": {
                "startIndex": 22,
                "endIndex": 23
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 24,
            "endIndex": 73
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@discordjs/brokers!version:var",
          "docComment": "/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/brokers#readme | @discordjs/brokers} version that you are currently using.\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "version",
              "canonicalReference": "@discordjs/brokers!version"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "fileLine": 13,
          "fileColumn": 14,
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "version",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 3
          }
        }
      ]
    }
  ]
}
