{"meta":{"tpk":"@discordjs/api-extractor","tv":"7.38.1","v":1013,"ov":1013,"ts":{"undefined":false}},"pdir":"https://github.com/discordjs/discord.js/tree/main/packages/util","k":"Package","c":"@discordjs/util!","d":"","n":"@discordjs/util","pmo":false,"ms":[{"k":"EntryPoint","c":"@discordjs/util!","n":"","pmo":false,"ms":[{"k":"TypeAlias","c":"@discordjs/util!Awaitable:type","d":"/**\n * Represents a type that may or may not be a promise\n */\n","ex":[{"k":"Content","t":"export type "},{"k":"Reference","t":"Awaitable","c":"@discordjs/util!Awaitable:type"},{"k":"Content","t":"<"},{"k":"Reference","t":"Value"},{"k":"Content","t":"> = "},{"k":"Reference","t":"PromiseLike","c":"!PromiseLike:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Value"},{"k":"Content","t":"> | "},{"k":"Reference","t":"Value"},{"k":"Content","t":";"}],"pat":"src/types.ts","l":4,"co":1,"r":"Public","n":"Awaitable","tps":[{"tp":"Value","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"ttr":{"st":5,"en":10}},{"k":"Function","c":"@discordjs/util!calculateShardId:function(1)","d":"/**\n * Calculates the shard id for a given guild id.\n *\n * @param guildId - The guild id to calculate the shard id for\n *\n * @param shardCount - The total number of shards\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"calculateShardId","c":"@discordjs/util!calculateShardId"},{"k":"Content","t":"("},{"k":"Reference","t":"guildId","c":"@discordjs/util!~guildId"},{"k":"Content","t":": "},{"k":"Reference","t":"string"},{"k":"Content","t":", "},{"k":"Reference","t":"shardCount","c":"@discordjs/util!~shardCount"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":"): "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"pat":"src/functions/calculateShardId.ts","l":7,"co":1,"rtr":{"st":11,"en":12},"r":"Public","oi":1,"ps":[{"pn":"guildId","ptr":{"st":5,"en":6},"op":false,"rs":false},{"pn":"shardCount","ptr":{"st":9,"en":10},"op":false,"rs":false}],"n":"calculateShardId"},{"k":"Interface","c":"@discordjs/util!Equatable:interface","d":"/**\n * Represents a structure that can be checked against another given structure for equality\n *\n * @typeParam Value - The type of object to compare the current object to\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"Equatable","c":"@discordjs/util!Equatable:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Value"},{"k":"Content","t":"> "}],"pat":"src/Equatable.ts","l":7,"co":1,"r":"Public","tps":[{"tp":"Value","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"n":"Equatable","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/util!Equatable#equals:member(1)","d":"/**\n * Whether or not this is equal to another structure\n */\n","ex":[{"k":"Reference","t":"equals","c":"@discordjs/util!Equatable#equals"},{"k":"Content","t":"("},{"k":"Reference","t":"other","c":"@discordjs/util!~other"},{"k":"Content","t":": "},{"k":"Reference","t":"Value"},{"k":"Content","t":"): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"l":11,"co":2,"op":false,"rtr":{"st":6,"en":7},"r":"Public","oi":1,"ps":[{"pn":"other","ptr":{"st":4,"en":5},"op":false,"rs":false}],"n":"equals"}],"etrs":[]},{"k":"Function","c":"@discordjs/util!getUserAgentAppendix:function(1)","d":"/**\n * Resolves the user agent appendix string for the current environment.\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"getUserAgentAppendix","c":"@discordjs/util!getUserAgentAppendix"},{"k":"Content","t":"(): "},{"k":"Reference","t":"string"},{"k":"Content","t":";"}],"pat":"src/functions/userAgentAppendix.ts","l":6,"co":1,"rtr":{"st":3,"en":4},"r":"Public","oi":1,"ps":[],"n":"getUserAgentAppendix"},{"k":"Function","c":"@discordjs/util!isEquatable:function(1)","d":"/**\n * Indicates if an object is equatable or not.\n *\n * @param maybeEquatable - The object to check against\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"isEquatable","c":"@discordjs/util!isEquatable"},{"k":"Content","t":"("},{"k":"Reference","t":"maybeEquatable","c":"@discordjs/util!~maybeEquatable"},{"k":"Content","t":": "},{"k":"Reference","t":"unknown"},{"k":"Content","t":"): "},{"k":"Reference","t":"maybeEquatable","c":"@discordjs/util!~maybeEquatable"},{"k":"Content","t":" is "},{"k":"Reference","t":"Equatable","c":"@discordjs/util!Equatable:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"unknown"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/Equatable.ts","l":19,"co":1,"rtr":{"st":7,"en":13},"r":"Public","oi":1,"ps":[{"pn":"maybeEquatable","ptr":{"st":5,"en":6},"op":false,"rs":false}],"n":"isEquatable"},{"k":"Function","c":"@discordjs/util!isJSONEncodable:function(1)","d":"/**\n * Indicates if an object is encodable or not.\n *\n * @param maybeEncodable - The object to check against\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"isJSONEncodable","c":"@discordjs/util!isJSONEncodable"},{"k":"Content","t":"("},{"k":"Reference","t":"maybeEncodable","c":"@discordjs/util!~maybeEncodable"},{"k":"Content","t":": "},{"k":"Reference","t":"unknown"},{"k":"Content","t":"): "},{"k":"Reference","t":"maybeEncodable","c":"@discordjs/util!~maybeEncodable"},{"k":"Content","t":" is "},{"k":"Reference","t":"JSONEncodable","c":"@discordjs/util!JSONEncodable:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"unknown"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/JSONEncodable.ts","l":18,"co":1,"rtr":{"st":7,"en":13},"r":"Public","oi":1,"ps":[{"pn":"maybeEncodable","ptr":{"st":5,"en":6},"op":false,"rs":false}],"n":"isJSONEncodable"},{"k":"Interface","c":"@discordjs/util!JSONEncodable:interface","d":"/**\n * Represents an object capable of representing itself as a JSON object\n *\n * @typeParam Value - The JSON type corresponding to {@link JSONEncodable.toJSON} outputs.\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"JSONEncodable","c":"@discordjs/util!JSONEncodable:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"Value"},{"k":"Content","t":"> "}],"pat":"src/JSONEncodable.ts","l":6,"co":1,"r":"Public","tps":[{"tp":"Value","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"n":"JSONEncodable","pmo":false,"ms":[{"k":"MethodSignature","c":"@discordjs/util!JSONEncodable#toJSON:member(1)","d":"/**\n * Transforms this object to its JSON format\n */\n","ex":[{"k":"Reference","t":"toJSON","c":"@discordjs/util!JSONEncodable#toJSON"},{"k":"Content","t":"(): "},{"k":"Reference","t":"Value"},{"k":"Content","t":";"}],"l":10,"co":2,"op":false,"rtr":{"st":2,"en":3},"r":"Public","oi":1,"ps":[],"n":"toJSON"}],"etrs":[]},{"k":"Function","c":"@discordjs/util!lazy:function(1)","d":"/**\n * Lazy is a wrapper around a value that is computed lazily. It is useful for cases where the value is expensive to compute and the computation may not be needed at all.\n *\n * @param cb - The callback to lazily evaluate\n *\n * @typeParam Value - The type of the value\n *\n * @example\n * ```ts\n * const value = lazy(() => computeExpensiveValue());\n * ```\n *\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"lazy","c":"@discordjs/util!lazy"},{"k":"Content","t":"<"},{"k":"Reference","t":"Value"},{"k":"Content","t":">("},{"k":"Reference","t":"cb","c":"@discordjs/util!~cb"},{"k":"Content","t":": "},{"k":"Content","t":"() => "},{"k":"Reference","t":"Value"},{"k":"Content","t":"): "},{"k":"Content","t":"() => "},{"k":"Reference","t":"Value"},{"k":"Content","t":";"}],"pat":"src/functions/lazy.ts","l":14,"co":1,"rtr":{"st":10,"en":12},"r":"Public","oi":1,"ps":[{"pn":"cb","ptr":{"st":7,"en":9},"op":false,"rs":false}],"tps":[{"tp":"Value","ctr":{"st":0,"en":0},"dtr":{"st":0,"en":0}}],"n":"lazy"},{"k":"Function","c":"@discordjs/util!polyfillDispose:function(1)","d":"/**\n * Polyfill for `Symbol.dispose` and `Symbol.asyncDispose` which is used as a part of {@link https://github.com/tc39/proposal-explicit-resource-management}. Node versions below 18.x don't have these symbols by default, so we need to polyfill them.\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"polyfillDispose","c":"@discordjs/util!polyfillDispose"},{"k":"Content","t":"(): "},{"k":"Reference","t":"void"},{"k":"Content","t":";"}],"pat":"src/functions/polyfillDispose.ts","l":6,"co":1,"rtr":{"st":3,"en":4},"r":"Public","oi":1,"ps":[],"n":"polyfillDispose"},{"k":"Function","c":"@discordjs/util!range:function(1)","d":"/**\n * A generator to yield numbers in a given range\n *\n * @remarks\n *\n * This method is end-exclusive, for example the last number yielded by `range(5)` is 4. If you prefer for the end to be included add 1 to the range or `end` option.\n *\n * @param range - A number representing the range to yield (exclusive) or an object with start, end and step\n *\n * @example\n *\n * Basic range\n * ```ts\n * for (const number of range(5)) {\n *  console.log(number);\n * }\n * // Prints 0, 1, 2, 3, 4\n * ```\n *\n * @example\n *\n * Range with a step\n * ```ts\n * for (const number of range({ start: 3, end: 10, step: 2 })) {\n * \tconsole.log(number);\n * }\n * // Prints 3, 5, 7, 9\n * ```\n *\n */\n","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"range","c":"@discordjs/util!range"},{"k":"Content","t":"("},{"k":"Reference","t":"range","c":"@discordjs/util!~range"},{"k":"Content","t":": "},{"k":"Reference","t":"RangeOptions","c":"@discordjs/util!RangeOptions:interface"},{"k":"Content","t":" | "},{"k":"Reference","t":"number"},{"k":"Content","t":"): "},{"k":"Reference","t":"Generator","c":"!Generator:interface"},{"k":"Content","t":"<"},{"k":"Reference","t":"number"},{"k":"Content","t":", "},{"k":"Reference","t":"void"},{"k":"Content","t":", "},{"k":"Reference","t":"unknown"},{"k":"Content","t":">"},{"k":"Content","t":";"}],"pat":"src/functions/range.ts","l":45,"co":1,"rtr":{"st":9,"en":17},"r":"Public","oi":1,"ps":[{"pn":"range","ptr":{"st":5,"en":8},"op":false,"rs":false}],"n":"range"},{"k":"Interface","c":"@discordjs/util!RangeOptions:interface","d":"/**\n * Options for creating a range\n */\n","ex":[{"k":"Content","t":"export interface "},{"k":"Reference","t":"RangeOptions","c":"@discordjs/util!RangeOptions:interface"},{"k":"Content","t":" "}],"pat":"src/functions/range.ts","l":4,"co":1,"r":"Public","n":"RangeOptions","pmo":false,"ms":[{"k":"PropertySignature","c":"@discordjs/util!RangeOptions#end:member","d":"/**\n * The end of the range (exclusive)\n */\n","ex":[{"k":"Reference","t":"end","c":"@discordjs/util!RangeOptions#end"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":8,"co":2,"ro":false,"op":false,"r":"Public","n":"end","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/util!RangeOptions#start:member","d":"/**\n * The start of the range (inclusive)\n */\n","ex":[{"k":"Reference","t":"start","c":"@discordjs/util!RangeOptions#start"},{"k":"Content","t":": "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":12,"co":2,"ro":false,"op":false,"r":"Public","n":"start","prtr":{"st":2,"en":3}},{"k":"PropertySignature","c":"@discordjs/util!RangeOptions#step:member","d":"/**\n * The amount to increment by\n *\n * @defaultValue\n *\n * `1`\n */\n","ex":[{"k":"Reference","t":"step","c":"@discordjs/util!RangeOptions#step"},{"k":"Content","t":"?: "},{"k":"Reference","t":"number"},{"k":"Content","t":";"}],"l":18,"co":2,"ro":false,"op":true,"r":"Public","n":"step","prtr":{"st":2,"en":3}}],"etrs":[]},{"k":"Function","c":"@discordjs/util!shouldUseGlobalFetchAndWebSocket:function(1)","d":"","ex":[{"k":"Content","t":"export declare function "},{"k":"Reference","t":"shouldUseGlobalFetchAndWebSocket","c":"@discordjs/util!shouldUseGlobalFetchAndWebSocket"},{"k":"Content","t":"(): "},{"k":"Reference","t":"boolean"},{"k":"Content","t":";"}],"pat":"src/functions/runtime.ts","l":3,"co":1,"rtr":{"st":3,"en":4},"r":"Public","oi":1,"ps":[],"n":"shouldUseGlobalFetchAndWebSocket"},{"k":"Variable","c":"@discordjs/util!version:var","d":"/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/util#readme | @discordjs/util} version that you are currently using.\n */\n","ex":[{"k":"Reference","t":"version","c":"@discordjs/util!version"},{"k":"Content","t":": "},{"k":"Reference","t":"string"}],"pat":"src/index.ts","l":12,"co":14,"ro":true,"r":"Public","n":"version","vtr":{"st":2,"en":3}}]}]}