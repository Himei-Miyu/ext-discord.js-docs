{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.34.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/discordjs/discord.js/tree/main/packages/core",
  "kind": "Package",
  "canonicalReference": "@discordjs/core!",
  "docComment": "",
  "name": "@discordjs/core",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@discordjs/core!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!API:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class API "
            }
          ],
          "fileUrlPath": "src/api/index.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "API",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!API:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `API` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#applicationCommands:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly applicationCommands: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationCommandsAPI",
                  "canonicalReference": "@discordjs/core!ApplicationCommandsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "applicationCommands",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#channels:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly channels: "
                },
                {
                  "kind": "Reference",
                  "text": "ChannelsAPI",
                  "canonicalReference": "@discordjs/core!ChannelsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "channels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#guilds:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly guilds: "
                },
                {
                  "kind": "Reference",
                  "text": "GuildsAPI",
                  "canonicalReference": "@discordjs/core!GuildsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "guilds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#interactions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly interactions: "
                },
                {
                  "kind": "Reference",
                  "text": "InteractionsAPI",
                  "canonicalReference": "@discordjs/core!InteractionsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "interactions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#invites:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly invites: "
                },
                {
                  "kind": "Reference",
                  "text": "InvitesAPI",
                  "canonicalReference": "@discordjs/core!InvitesAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "invites",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#oauth2:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly oauth2: "
                },
                {
                  "kind": "Reference",
                  "text": "OAuth2API",
                  "canonicalReference": "@discordjs/core!OAuth2API:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oauth2",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#rest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#roleConnections:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly roleConnections: "
                },
                {
                  "kind": "Reference",
                  "text": "RoleConnectionsAPI",
                  "canonicalReference": "@discordjs/core!RoleConnectionsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roleConnections",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#stickers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly stickers: "
                },
                {
                  "kind": "Reference",
                  "text": "StickersAPI",
                  "canonicalReference": "@discordjs/core!StickersAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stickers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#threads:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly threads: "
                },
                {
                  "kind": "Reference",
                  "text": "ThreadsAPI",
                  "canonicalReference": "@discordjs/core!ThreadsAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "threads",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#users:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly users: "
                },
                {
                  "kind": "Reference",
                  "text": "UsersAPI",
                  "canonicalReference": "@discordjs/core!UsersAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "users",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#voice:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly voice: "
                },
                {
                  "kind": "Reference",
                  "text": "VoiceAPI",
                  "canonicalReference": "@discordjs/core!VoiceAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "voice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!API#webhooks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly webhooks: "
                },
                {
                  "kind": "Reference",
                  "text": "WebhooksAPI",
                  "canonicalReference": "@discordjs/core!WebhooksAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "webhooks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!ApplicationCommandsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ApplicationCommandsAPI "
            }
          ],
          "fileUrlPath": "src/api/applicationCommands.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ApplicationCommandsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ApplicationCommandsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#bulkOverwriteGlobalCommands:member(1)",
              "docComment": "/**\n * Overwrites global commands\n *\n * @param applicationId - The application id to overwrite commands for\n *\n * @param data - The data to use when overwriting commands\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bulkOverwriteGlobalCommands(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandsResult",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "bulkOverwriteGlobalCommands"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#bulkOverwriteGuildCommands:member(1)",
              "docComment": "/**\n * Bulk overwrites guild commands\n *\n * @param applicationId - The application id to overwrite commands for\n *\n * @param guildId - The guild id to overwrite commands for\n *\n * @param data - The data to use when overwriting commands\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bulkOverwriteGuildCommands(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandsResult",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "bulkOverwriteGuildCommands"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#createGlobalCommand:member(1)",
              "docComment": "/**\n * Creates a new global command\n *\n * @param applicationId - The application id to create the command for\n *\n * @param data - The data to use when creating the command\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#create-global-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGlobalCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIApplicationCommandsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createGlobalCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#createGuildCommand:member(1)",
              "docComment": "/**\n * Creates a new command for a guild\n *\n * @param applicationId - The application id to create the command for\n *\n * @param guildId - The guild id to create the command for\n *\n * @param data - The data to use when creating the command\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGuildCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIApplicationCommandsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIApplicationCommandsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createGuildCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#deleteGlobalCommand:member(1)",
              "docComment": "/**\n * Deletes a global command\n *\n * @param applicationId - The application id of the command\n *\n * @param commandId - The id of the command to delete\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteGlobalCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteGlobalCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#deleteGuildCommand:member(1)",
              "docComment": "/**\n * Deletes a guild command\n *\n * @param applicationId - The application id of the command\n *\n * @param guildId - The guild id of the command\n *\n * @param commandId - The id of the command to delete\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteGuildCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteGuildCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#editGlobalCommand:member(1)",
              "docComment": "/**\n * Edits a global command\n *\n * @param applicationId - The application id of the command\n *\n * @param commandId - The id of the command to edit\n *\n * @param data - The data to use when editing the command\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editGlobalCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIApplicationCommandJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIApplicationCommandJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editGlobalCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#editGuildCommand:member(1)",
              "docComment": "/**\n * Edits a guild command\n *\n * @param applicationId - The application id of the command\n *\n * @param guildId - The guild id of the command\n *\n * @param commandId - The command id to edit\n *\n * @param data - The data to use when editing the command\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editGuildCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIApplicationCommandJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIApplicationCommandJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editGuildCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#editGuildCommandPermissions:member(1)",
              "docComment": "/**\n * Edits the permissions for a guild command\n *\n * @param userToken - The token of the user to edit permissions on behalf of\n *\n * @param applicationId - The application id to edit the permissions for\n *\n * @param guildId - The guild id to edit the permissions for\n *\n * @param commandId - The id of the command to edit the permissions for\n *\n * @param data - The data to use when editing the permissions\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editGuildCommandPermissions(userToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandPermissionsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandPermissionsJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildApplicationCommandPermissions",
                  "canonicalReference": "discord-api-types!APIGuildApplicationCommandPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editGuildCommandPermissions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGlobalCommand:member(1)",
              "docComment": "/**\n * Fetches a global command\n *\n * @param applicationId - The application id to fetch the command from\n *\n * @param commandId - The command id to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGlobalCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGlobalCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGlobalCommands:member(1)",
              "docComment": "/**\n * Fetches all global commands for a application\n *\n * @param applicationId - The application id to fetch commands for\n *\n * @param options - The options to use when fetching commands\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGlobalCommands(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIApplicationCommandsQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIApplicationCommandsQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIApplicationCommandsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIApplicationCommandsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGlobalCommands"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGuildCommand:member(1)",
              "docComment": "/**\n * Fetches a guild command\n *\n * @param applicationId - The application id to fetch the command from\n *\n * @param guildId - The guild id to fetch the command from\n *\n * @param commandId - The command id to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuildCommand(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationCommand",
                  "canonicalReference": "discord-api-types!APIApplicationCommand:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuildCommand"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGuildCommandPermissions:member(1)",
              "docComment": "/**\n * Fetches the permissions for a guild command\n *\n * @param applicationId - The application id to get the permissions for\n *\n * @param guildId - The guild id of the command\n *\n * @param commandId - The command id to get the permissions for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuildCommandPermissions(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", commandId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildApplicationCommandPermissions",
                  "canonicalReference": "discord-api-types!APIGuildApplicationCommandPermissions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "commandId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuildCommandPermissions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGuildCommands:member(1)",
              "docComment": "/**\n * Fetches all commands for a guild\n *\n * @param applicationId - The application id to fetch commands for\n *\n * @param guildId - The guild id to fetch commands for\n *\n * @param data - The data to use when fetching commands\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuildCommands(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIApplicationGuildCommandsQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIApplicationGuildCommandsQuery:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIApplicationCommandsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIApplicationCommandsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuildCommands"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ApplicationCommandsAPI#getGuildCommandsPermissions:member(1)",
              "docComment": "/**\n * Fetches all permissions for all commands in a guild\n *\n * @param applicationId - The application id to get the permissions for\n *\n * @param guildId - The guild id to get the permissions for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuildCommandsPermissions(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildApplicationCommandsPermissionsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildApplicationCommandsPermissionsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuildCommandsPermissions"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!ChannelsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ChannelsAPI "
            }
          ],
          "fileUrlPath": "src/api/channel.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ChannelsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!ChannelsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ChannelsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#addMessageReaction:member(1)",
              "docComment": "/**\n * Adds a reaction to a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to add the reaction to\n *\n * @param emoji - The emoji to add the reaction with\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#create-reaction}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMessageReaction(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emoji: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addMessageReaction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#bulkDeleteMessages:member(1)",
              "docComment": "/**\n * Bulk deletes messages\n *\n * @param channelId - The id of the channel the messages are in\n *\n * @param messageIds - The ids of the messages to delete\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#bulk-delete-messages}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bulkDeleteMessages(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageIds: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageIds",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "bulkDeleteMessages"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#createInvite:member(1)",
              "docComment": "/**\n * Creates a new invite for a channel\n *\n * @param channelId - The id of the channel to create an invite for\n *\n * @param data - The data to use when creating the invite\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#create-channel-invite}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createInvite(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIChannelInviteJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIChannelInviteJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIExtendedInvite",
                  "canonicalReference": "discord-api-types!APIExtendedInvite:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createInvite"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#createMessage:member(1)",
              "docComment": "/**\n * Sends a message in a channel\n *\n * @param channelId - The id of the channel to send the message in\n *\n * @param data - The data to use when sending the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#create-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { files, ...body }: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIChannelMessageJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIChannelMessageJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ files, ...body }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#crosspostMessage:member(1)",
              "docComment": "/**\n * Crossposts a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to crosspost\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#crosspost-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "crosspostMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "crosspostMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#delete:member(1)",
              "docComment": "/**\n * Deletes a channel\n *\n * @param channelId - The id of the channel to delete\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#deleteclose-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#deleteAllMessageReactions:member(1)",
              "docComment": "/**\n * Deletes all reactions for a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to delete the reactions for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteAllMessageReactions(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteAllMessageReactions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#deleteAllMessageReactionsForEmoji:member(1)",
              "docComment": "/**\n * Deletes all reactions of an emoji for a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to delete the reactions for\n *\n * @param emoji - The emoji to delete the reactions for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteAllMessageReactionsForEmoji(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emoji: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteAllMessageReactionsForEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#deleteMessage:member(1)",
              "docComment": "/**\n * Deletes a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to delete\n *\n * @param reason - The reason for deleting the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#delete-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#deleteOwnMessageReaction:member(1)",
              "docComment": "/**\n * Deletes a reaction for the current user\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to delete the reaction for\n *\n * @param emoji - The emoji to delete the reaction for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#delete-own-reaction}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteOwnMessageReaction(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emoji: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteOwnMessageReaction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#deleteUserMessageReaction:member(1)",
              "docComment": "/**\n * Deletes a reaction for a user\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to delete the reaction for\n *\n * @param emoji - The emoji to delete the reaction for\n *\n * @param userId - The id of the user to delete the reaction for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#delete-user-reaction}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteUserMessageReaction(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emoji: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteUserMessageReaction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#edit:member(1)",
              "docComment": "/**\n * Edits a channel\n *\n * @param channelId - The id of the channel to edit\n *\n * @param data - The new channel data\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#modify-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edit(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIChannelJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIChannelJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "edit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#editMessage:member(1)",
              "docComment": "/**\n * Edits a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to edit\n *\n * @param data - The data to use when editing the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#edit-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { files, ...body }: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIChannelMessageJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIChannelMessageJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ files, ...body }",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#followAnnouncements:member(1)",
              "docComment": "/**\n * Follows an announcement channel\n *\n * @param channelId - The id of the announcement channel to follow\n *\n * @param webhookChannelId - The id of the webhook channel to follow the announcements in\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#follow-announcement-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "followAnnouncements(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", webhookChannelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIFollowedChannel",
                  "canonicalReference": "discord-api-types!APIFollowedChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "webhookChannelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "followAnnouncements"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#get:member(1)",
              "docComment": "/**\n * Fetches a channel\n *\n * @param channelId - The id of the channel\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getArchivedThreads:member(1)",
              "docComment": "/**\n * Fetches the archived threads of a channel\n *\n * @param channelId - The id of the channel to fetch archived threads from\n *\n * @param archivedStatus - The archived status of the threads to fetch\n *\n * @param options - The options to use when fetching archived threads\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#list-public-archived-threads}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#list-private-archived-threads}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getArchivedThreads(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", archivedStatus: "
                },
                {
                  "kind": "Content",
                  "text": "'private' | 'public'"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelThreadsArchivedQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelThreadsArchivedQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelUsersThreadsArchivedResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelUsersThreadsArchivedResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "archivedStatus",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getArchivedThreads"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getInvites:member(1)",
              "docComment": "/**\n * Fetches the invites of a channel\n *\n * @param channelId - The id of the channel to fetch invites from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-channel-invites}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInvites(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelInvitesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelInvitesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getInvites"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getJoinedPrivateArchivedThreads:member(1)",
              "docComment": "/**\n * Fetches the private joined archived threads of a channel\n *\n * @param channelId - The id of the channel to fetch joined archived threads from\n *\n * @param options - The options to use when fetching joined archived threads\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getJoinedPrivateArchivedThreads(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelThreadsArchivedQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelThreadsArchivedQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelUsersThreadsArchivedResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelUsersThreadsArchivedResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getJoinedPrivateArchivedThreads"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getMessage:member(1)",
              "docComment": "/**\n * Fetches a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-channel-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getMessageReactions:member(1)",
              "docComment": "/**\n * Fetches the reactions for a message\n *\n * @param channelId - The id of the channel the message is in\n *\n * @param messageId - The id of the message to get the reactions for\n *\n * @param emoji - The emoji to get the reactions for\n *\n * @param options - The options to use when fetching the reactions\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-reactions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessageReactions(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emoji: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelMessageReactionUsersQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelMessageReactionUsersQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelMessageReactionUsersResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelMessageReactionUsersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emoji",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMessageReactions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getMessages:member(1)",
              "docComment": "/**\n * Fetches the messages of a channel\n *\n * @param channelId - The id of the channel to fetch messages from\n *\n * @param options - The options to use when fetching messages\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-channel-messages}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessages(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelMessagesQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelMessagesQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelMessagesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelMessagesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMessages"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getPins:member(1)",
              "docComment": "/**\n * Fetches the pinned messages of a channel\n *\n * @param channelId - The id of the channel to fetch pinned messages from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-pinned-messages}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPins(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelPinsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelPinsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPins"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#getWebhooks:member(1)",
              "docComment": "/**\n * Fetches the webhooks of a channel\n *\n * @param id - The id of the channel\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#get-channel-webhooks}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWebhooks(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelWebhooksResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelWebhooksResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWebhooks"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#pinMessage:member(1)",
              "docComment": "/**\n * Pins a message in a channel\n *\n * @param channelId - The id of the channel to pin the message in\n *\n * @param messageId - The id of the message to pin\n *\n * @param reason - The reason for pinning the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#pin-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pinMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "pinMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#showTyping:member(1)",
              "docComment": "/**\n * Shows a typing indicator in a channel\n *\n * @param channelId - The id of the channel to show the typing indicator in\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#trigger-typing-indicator}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showTyping(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "showTyping"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ChannelsAPI#unpinMessage:member(1)",
              "docComment": "/**\n * Unpins a message in a channel\n *\n * @param channelId - The id of the channel to unpin the message in\n *\n * @param messageId - The id of the message to unpin\n *\n * @param reason - The reason for unpinning the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#unpin-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unpinMessage(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "unpinMessage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!Client:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Client extends "
            },
            {
              "kind": "Reference",
              "text": "AsyncEventEmitter",
              "canonicalReference": "@vladfrangu/async_event_emitter!AsyncEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ManagerShardEventsMap",
              "canonicalReference": "@discordjs/core!ManagerShardEventsMap:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Client",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!Client:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Client` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ rest, ws }: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientOptions",
                  "canonicalReference": "@discordjs/core!ClientOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ rest, ws }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!Client#api:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly api: "
                },
                {
                  "kind": "Reference",
                  "text": "API",
                  "canonicalReference": "@discordjs/core!API:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "api",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!Client#requestGuildMembers:member(1)",
              "docComment": "/**\n * Requests guild members from the gateway.\n *\n * @param options - The options for the request\n *\n * @param timeout - The timeout for waiting for each guild members chunk event\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/gateway-events#request-guild-members}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestGuildMembers(options: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayRequestGuildMembersData",
                  "canonicalReference": "discord-api-types!GatewayRequestGuildMembersData:type"
                },
                {
                  "kind": "Content",
                  "text": ", timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildMember",
                  "canonicalReference": "discord-api-types!APIGuildMember:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "requestGuildMembers"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!Client#rest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!Client#updatePresence:member(1)",
              "docComment": "/**\n * Updates the presence of the bot user\n *\n * @param shardId - The id of the shard to update the presence in\n *\n * @param options - The options for updating the presence\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatePresence(shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayPresenceUpdateData",
                  "canonicalReference": "discord-api-types!GatewayPresenceUpdateData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "shardId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updatePresence"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!Client#updateVoiceState:member(1)",
              "docComment": "/**\n * Updates the voice state of the bot user\n *\n * @param options - The options for updating the voice state\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/gateway-events#update-voice-state}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateVoiceState(options: "
                },
                {
                  "kind": "Reference",
                  "text": "GatewayVoiceStateUpdateData",
                  "canonicalReference": "discord-api-types!GatewayVoiceStateUpdateData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateVoiceState"
            },
            {
              "kind": "Property",
              "canonicalReference": "@discordjs/core!Client#ws:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ws: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ws",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!ClientOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClientOptions "
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "name": "ClientOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!ClientOptions#rest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!ClientOptions#ws:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ws: "
                },
                {
                  "kind": "Reference",
                  "text": "WebSocketManager",
                  "canonicalReference": "@discordjs/ws!WebSocketManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ws",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!DescriptiveRawFile:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DescriptiveRawFile extends "
            },
            {
              "kind": "Reference",
              "text": "RawFile",
              "canonicalReference": "@discordjs/rest!RawFile:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/util/files.ts",
          "releaseTag": "Public",
          "name": "DescriptiveRawFile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!DescriptiveRawFile#description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!GuildsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GuildsAPI "
            }
          ],
          "fileUrlPath": "src/api/guild.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "GuildsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!GuildsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `GuildsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#addRoleToMember:member(1)",
              "docComment": "/**\n * Adds a role to a guild member\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @param roleId - The id of the role\n *\n * @param reason - The reason for adding this role to the guild member\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#add-guild-member-role}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addRoleToMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", roleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addRoleToMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#banUser:member(1)",
              "docComment": "/**\n * Bans a user from a guild\n *\n * @param guildId - The id of the guild to ban the member in\n *\n * @param userId - The id of the user to ban\n *\n * @param options - Options for banning the user\n *\n * @param reason - The reason for banning the user\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#create-guild-ban}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "banUser(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIGuildBanJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPIGuildBanJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "banUser"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#beginPrune:member(1)",
              "docComment": "/**\n * Prunes members in a guild\n *\n * @param guildId - The id of the guild to prune members in\n *\n * @param options - The options for pruning members\n *\n * @param reason - The reason for pruning members\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#begin-guild-prune}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beginPrune(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildPruneJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildPruneJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildPruneCountResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildPruneCountResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "beginPrune"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#create:member(1)",
              "docComment": "/**\n * Creates a guild\n *\n * @param data - The guild to create\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#create-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildsJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuild",
                  "canonicalReference": "discord-api-types!APIGuild:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createAutoModerationRule:member(1)",
              "docComment": "/**\n * Creates a new auto moderation rule for a guild\n *\n * @param guildId - The id of the guild to create the auto moderation rule from\n *\n * @param data - The data for creating the auto moderation rule\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAutoModerationRule(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIAutoModerationRuleJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIAutoModerationRuleJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIAutoModerationRule",
                  "canonicalReference": "discord-api-types!APIAutoModerationRule:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createAutoModerationRule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createChannel:member(1)",
              "docComment": "/**\n * Creates a guild channel\n *\n * @param guildId - The id of the guild to create the channel in\n *\n * @param data - The data to create the new channel\n *\n * @param reason - The reason for creating this channel\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#create-guild-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createChannel(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildChannelJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildChannelJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createChannel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createEmoji:member(1)",
              "docComment": "/**\n * Creates a new emoji for a guild\n *\n * @param guildId - The id of the guild to create the emoji from\n *\n * @param data - The data for creating the emoji\n *\n * @param reason - The reason for creating the emoji\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/emoji#create-guild-emoji}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createEmoji(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildEmojiJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildEmojiJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIEmoji",
                  "canonicalReference": "discord-api-types!APIEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createRole:member(1)",
              "docComment": "/**\n * Creates a guild role\n *\n * @param guildId - The id of the guild to create the role in\n *\n * @param data - The data to create the role with\n *\n * @param reason - The reason for creating the role\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#create-guild-role}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createRole(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildRoleJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildRoleJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIRole",
                  "canonicalReference": "discord-api-types!APIRole:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createRole"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createScheduledEvent:member(1)",
              "docComment": "/**\n * Creates a new scheduled event for a guild\n *\n * @param guildId - The id of the guild to create the scheduled event from\n *\n * @param data - The data to create the event with\n *\n * @param reason - The reason for creating the scheduled event\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createScheduledEvent(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildScheduledEventJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildScheduledEventJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildScheduledEvent",
                  "canonicalReference": "discord-api-types!APIGuildScheduledEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createScheduledEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createSticker:member(1)",
              "docComment": "/**\n * Creates a sticker for a guild\n *\n * @param guildId - The id of the guild to create the sticker for\n *\n * @param data - The data for creating the sticker\n *\n * @param reason - The reason for creating the sticker\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#create-guild-sticker}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createSticker(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { file, ...body }: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildStickerFormDataBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildStickerFormDataBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'file'> & {\n        file: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APISticker",
                  "canonicalReference": "discord-api-types!APISticker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ file, ...body }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 9
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createSticker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#createTemplate:member(1)",
              "docComment": "/**\n * Creates a new template\n *\n * @param templateCode - The code of the template\n *\n * @param data - The data to use when creating the template\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#create-guild-template}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTemplate(templateCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPITemplateCreateGuildJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPITemplateCreateGuildJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APITemplate",
                  "canonicalReference": "discord-api-types!APITemplate:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "templateCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createTemplate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#delete:member(1)",
              "docComment": "/**\n * Deletes a guild\n *\n * @param guildId - The id of the guild to delete\n *\n * @param reason - The reason for deleting this guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#delete-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteAutoModerationRule:member(1)",
              "docComment": "/**\n * Deletes an auto moderation rule for a guild\n *\n * @param guildId - The id of the guild to delete the auto moderation rule from\n *\n * @param ruleId - The id of the auto moderation rule to delete\n *\n * @param reason - The reason for deleting the auto moderation rule\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteAutoModerationRule(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", ruleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ruleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteAutoModerationRule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteEmoji:member(1)",
              "docComment": "/**\n * Deletes an emoji for a guild\n *\n * @param guildId - The id of the guild to delete the emoji from\n *\n * @param emojiId - The id of the emoji to delete\n *\n * @param reason - The reason for deleting the emoji\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/emoji#delete-guild-emoji}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteEmoji(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emojiId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emojiId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteIntegration:member(1)",
              "docComment": "/**\n * Deletes an integration from a guild\n *\n * @param guildId - The id of the guild to delete the integration from\n *\n * @param integrationId - The id of the integration to delete\n *\n * @param reason - The reason for deleting the integration\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#delete-guild-integration}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteIntegration(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", integrationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "integrationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteIntegration"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteRole:member(1)",
              "docComment": "/**\n * Deletes a guild role\n *\n * @param guildId - The id of the guild to delete the role in\n *\n * @param roleId - The id of the role to delete\n *\n * @param reason - The reason for deleting the role\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#delete-guild-role}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteRole(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", roleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteRole"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteScheduledEvent:member(1)",
              "docComment": "/**\n * Deletes a scheduled event for a guild\n *\n * @param guildId - The id of the guild to delete the scheduled event from\n *\n * @param eventId - The id of the scheduled event to delete\n *\n * @param reason - The reason for deleting the scheduled event\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteScheduledEvent(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "eventId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteScheduledEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteSticker:member(1)",
              "docComment": "/**\n * Deletes a sticker for a guild\n *\n * @param guildId - The id of the guild to delete the sticker from\n *\n * @param stickerId - The id of the sticker to delete\n *\n * @param reason - The reason for deleting the sticker\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#delete-guild-sticker}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteSticker(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", stickerId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "stickerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteSticker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#deleteTemplate:member(1)",
              "docComment": "/**\n * Deletes a template for a guild\n *\n * @param guildId - The id of the guild to delete the template from\n *\n * @param templateCode - The code of the template to delete\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#delete-guild-template}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteTemplate(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", templateCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "templateCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteTemplate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#edit:member(1)",
              "docComment": "/**\n * Edits a guild\n *\n * @param guildId - The id of the guild to edit\n *\n * @param data - The new guild data\n *\n * @param reason - The reason for editing this guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edit(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuild",
                  "canonicalReference": "discord-api-types!APIGuild:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "edit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editAutoModerationRule:member(1)",
              "docComment": "/**\n * Edits an auto moderation rule for a guild\n *\n * @param guildId - The id of the guild to edit the auto moderation rule from\n *\n * @param ruleId - The id of the auto moderation rule to edit\n *\n * @param data - The data for editing the auto moderation rule\n *\n * @param reason - The reason for editing the auto moderation rule\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editAutoModerationRule(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", ruleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIAutoModerationRuleJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIAutoModerationRuleJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIAutoModerationRuleJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIAutoModerationRuleJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ruleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editAutoModerationRule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editEmoji:member(1)",
              "docComment": "/**\n * Edits an emoji for a guild\n *\n * @param guildId - The id of the guild to edit the emoji from\n *\n * @param emojiId - The id of the emoji to edit\n *\n * @param data - The data for editing the emoji\n *\n * @param reason - The reason for editing the emoji\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/emoji#modify-guild-emoji}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editEmoji(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emojiId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildEmojiJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildEmojiJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIEmoji",
                  "canonicalReference": "discord-api-types!APIEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emojiId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editMember:member(1)",
              "docComment": "/**\n * Edits a guild member\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @param data - The data to use when editing the guild member\n *\n * @param reason - The reason for editing this guild member\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildMemberJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildMemberJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildMember",
                  "canonicalReference": "discord-api-types!APIGuildMember:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editMFALevel:member(1)",
              "docComment": "/**\n * Edits the multi-factor-authentication (MFA) level of a guild\n *\n * @param guildId - The id of the guild to edit the MFA level for\n *\n * @param level - The new MFA level\n *\n * @param reason - The reason for editing the MFA level\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-mfa-level}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMFALevel(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Reference",
                  "text": "GuildMFALevel",
                  "canonicalReference": "discord-api-types!GuildMFALevel:enum"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildsMFAJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildsMFAJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editMFALevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editRole:member(1)",
              "docComment": "/**\n * Edits a guild role\n *\n * @param guildId - The id of the guild to edit the role in\n *\n * @param roleId - The id of the role to edit\n *\n * @param data - data for editing the role\n *\n * @param reason - The reason for editing the role\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-role}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editRole(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", roleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildRoleJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildRoleJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIRole",
                  "canonicalReference": "discord-api-types!APIRole:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editRole"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editScheduledEvent:member(1)",
              "docComment": "/**\n * Edits a scheduled event for a guild\n *\n * @param guildId - The id of the guild to edit the scheduled event from\n *\n * @param eventId - The id of the scheduled event to edit\n *\n * @param data - The new event data\n *\n * @param reason - The reason for editing the scheduled event\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editScheduledEvent(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildScheduledEventJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildScheduledEventJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildScheduledEvent",
                  "canonicalReference": "discord-api-types!APIGuildScheduledEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "eventId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editScheduledEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editSticker:member(1)",
              "docComment": "/**\n * Edits a sticker for a guild\n *\n * @param guildId - The id of the guild to edit the sticker from\n *\n * @param stickerId - The id of the sticker to edit\n *\n * @param data - The data for editing the sticker\n *\n * @param reason - The reason for editing the sticker\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#modify-guild-sticker}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editSticker(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", stickerId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildStickerJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildStickerJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APISticker",
                  "canonicalReference": "discord-api-types!APISticker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "stickerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editSticker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editTemplate:member(1)",
              "docComment": "/**\n * Edits a template for a guild\n *\n * @param guildId - The id of the guild to edit the template from\n *\n * @param templateCode - The code of the template to edit\n *\n * @param data - The data for editing the template\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#modify-guild-template}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editTemplate(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", templateCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildTemplateJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildTemplateJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APITemplate",
                  "canonicalReference": "discord-api-types!APITemplate:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "templateCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editTemplate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editUserVoiceState:member(1)",
              "docComment": "/**\n * Edits a user's voice state in a guild\n *\n * @param guildId - The id of the guild to edit the current user's voice state in\n *\n * @param userId - The id of the user to edit the voice state for\n *\n * @param data - The data for editing the voice state\n *\n * @param reason - The reason for editing the voice state\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-user-voice-state}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editUserVoiceState(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildVoiceStateUserJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildVoiceStateUserJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editUserVoiceState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editWelcomeScreen:member(1)",
              "docComment": "/**\n * Edits the welcome screen for a guild\n *\n * @param guildId - The id of the guild to edit the welcome screen for\n *\n * @param data - The new welcome screen data\n *\n * @param reason - The reason for editing the welcome screen\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editWelcomeScreen(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildWelcomeScreenJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildWelcomeScreenJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildWelcomeScreen",
                  "canonicalReference": "discord-api-types!APIGuildWelcomeScreen:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editWelcomeScreen"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#editWidgetSettings:member(1)",
              "docComment": "/**\n * Edits the widget settings for a guild\n *\n * @param guildId - The id of the guild to edit the widget settings from\n *\n * @param data - The new widget settings data\n *\n * @param reason - The reason for editing the widget settings\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-widget}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editWidgetSettings(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildWidgetSettingsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildWidgetSettingsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildWidgetSettings",
                  "canonicalReference": "discord-api-types!APIGuildWidgetSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editWidgetSettings"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#get:member(1)",
              "docComment": "/**\n * Fetches a guild\n *\n * @param guildId - The id of the guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(guildId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuild",
                  "canonicalReference": "discord-api-types!APIGuild:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getActiveThreads:member(1)",
              "docComment": "/**\n * Fetches the active threads in a guild\n *\n * @param guildId - The id of the guild to fetch the active threads from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#list-active-guild-threads}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getActiveThreads(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIThreadList",
                  "canonicalReference": "discord-api-types!APIThreadList:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getActiveThreads"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getAuditLogs:member(1)",
              "docComment": "/**\n * Fetches the audit logs for a guild\n *\n * @param guildId - The id of the guild to fetch the audit logs from\n *\n * @param options - The options for fetching the audit logs\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAuditLogs(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIAuditLogQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIAuditLogQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIAuditLog",
                  "canonicalReference": "discord-api-types!APIAuditLog:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAuditLogs"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getAutoModerationRule:member(1)",
              "docComment": "/**\n * Fetches an auto moderation rule for a guild\n *\n * @param guildId - The id of the guild to fetch the auto moderation rule from\n *\n * @param ruleId - The id of the auto moderation rule to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAutoModerationRule(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", ruleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIAutoModerationRule",
                  "canonicalReference": "discord-api-types!APIAutoModerationRule:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ruleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAutoModerationRule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getAutoModerationRules:member(1)",
              "docComment": "/**\n * Fetches all auto moderation rules for a guild\n *\n * @param guildId - The id of the guild to fetch the auto moderation rules from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAutoModerationRules(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIAutoModerationRulesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIAutoModerationRulesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAutoModerationRules"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getChannels:member(1)",
              "docComment": "/**\n * Fetches a guild's channels\n *\n * @param guildId - The id of the guild to fetch the channels from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-channels}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getChannels(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildChannelsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildChannelsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getChannels"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getEmoji:member(1)",
              "docComment": "/**\n * Fetches an emoji for a guild\n *\n * @param guildId - The id of the guild to fetch the emoji from\n *\n * @param emojiId - The id of the emoji to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/emoji#get-guild-emoji}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmoji(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", emojiId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIEmoji",
                  "canonicalReference": "discord-api-types!APIEmoji:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "emojiId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getEmoji"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getEmojis:member(1)",
              "docComment": "/**\n * Fetches all emojis for a guild\n *\n * @param guildId - The id of the guild to fetch the emojis from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/emoji#list-guild-emojis}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEmojis(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildEmojisResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildEmojisResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getEmojis"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getIntegrations:member(1)",
              "docComment": "/**\n * Fetches the integrations for a guild\n *\n * @param guildId - The id of the guild to fetch the integrations from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-integrations}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIntegrations(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildIntegrationsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildIntegrationsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getIntegrations"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getInvites:member(1)",
              "docComment": "/**\n * Fetches the invites for a guild\n *\n * @param guildId - The id of the guild to fetch the invites from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-invites}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInvites(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildInvitesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildInvitesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getInvites"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getMember:member(1)",
              "docComment": "/**\n * Fetches a guild member\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildMember",
                  "canonicalReference": "discord-api-types!APIGuildMember:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getMemberBans:member(1)",
              "docComment": "/**\n * Fetches a guild member ban\n *\n * @param guildId - The id of the guild to fetch the ban from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-bans}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMemberBans(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildBansResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildBansResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMemberBans"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getMembers:member(1)",
              "docComment": "/**\n * Fetches all the members of a guild\n *\n * @param guildId - The id of the guild\n *\n * @param options - The options to use when fetching the guild members\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#list-guild-members}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMembers(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildMembersQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildMembersQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildMembersResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildMembersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMembers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getPreview:member(1)",
              "docComment": "/**\n * Fetches a guild preview\n *\n * @param guildId - The id of the guild to fetch the preview from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-preview}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPreview(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildPreview",
                  "canonicalReference": "discord-api-types!APIGuildPreview:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPreview"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getPruneCount:member(1)",
              "docComment": "/**\n * Fetch the number of members that can be pruned from a guild\n *\n * @param guildId - The id of the guild to fetch the number of pruned members from\n *\n * @param options - The options for fetching the number of pruned members\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-prune-count}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPruneCount(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildPruneCountQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildPruneCountQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildPruneCountResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildPruneCountResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPruneCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getRoles:member(1)",
              "docComment": "/**\n * Gets all the roles in a guild\n *\n * @param guildId - The id of the guild to fetch the roles from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-roles}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRoles(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildRolesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildRolesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRoles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getScheduledEvent:member(1)",
              "docComment": "/**\n * Fetches a scheduled event for a guild\n *\n * @param guildId - The id of the guild to fetch the scheduled event from\n *\n * @param eventId - The id of the scheduled event to fetch\n *\n * @param options - The options for fetching the scheduled event\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScheduledEvent(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildScheduledEventQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildScheduledEventQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildScheduledEvent",
                  "canonicalReference": "discord-api-types!APIGuildScheduledEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "eventId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScheduledEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getScheduledEvents:member(1)",
              "docComment": "/**\n * Fetches all scheduled events for a guild\n *\n * @param guildId - The id of the guild to fetch the scheduled events from\n *\n * @param options - The options for fetching the scheduled events\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScheduledEvents(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildScheduledEventsQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildScheduledEventsQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildScheduledEventsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildScheduledEventsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScheduledEvents"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getScheduledEventUsers:member(1)",
              "docComment": "/**\n * Gets all users that are interested in a scheduled event\n *\n * @param guildId - The id of the guild to fetch the scheduled event users from\n *\n * @param eventId - The id of the scheduled event to fetch the users for\n *\n * @param options - The options for fetching the scheduled event users\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScheduledEventUsers(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", eventId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildScheduledEventUsersQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildScheduledEventUsersQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildScheduledEventUsersResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildScheduledEventUsersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "eventId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScheduledEventUsers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getSticker:member(1)",
              "docComment": "/**\n * Fetches a sticker for a guild\n *\n * @param guildId - The id of the guild to fetch the sticker from\n *\n * @param stickerId - The id of the sticker to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#get-guild-sticker}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSticker(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", stickerId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APISticker",
                  "canonicalReference": "discord-api-types!APISticker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "stickerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSticker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getStickers:member(1)",
              "docComment": "/**\n * Fetches all the stickers for a guild\n *\n * @param guildId - The id of the guild to fetch the stickers from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#list-guild-stickers}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStickers(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildStickersResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildStickersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getStickers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getTemplate:member(1)",
              "docComment": "/**\n * Fetches a guild template\n *\n * @param templateCode - The code of the template\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#get-guild-template}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTemplate(templateCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APITemplate",
                  "canonicalReference": "discord-api-types!APITemplate:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "templateCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTemplate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getTemplates:member(1)",
              "docComment": "/**\n * Fetches all the templates for a guild\n *\n * @param guildId - The id of the guild to fetch the templates from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#get-guild-templates}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTemplates(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildTemplatesResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildTemplatesResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTemplates"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getVanityURL:member(1)",
              "docComment": "/**\n * Fetches the vanity url for a guild\n *\n * @param guildId - The id of the guild to fetch the vanity url from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-vanity-url}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVanityURL(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildVanityUrlResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildVanityUrlResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getVanityURL"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getVoiceRegions:member(1)",
              "docComment": "/**\n * Fetches voice regions for a guild\n *\n * @param guildId - The id of the guild to fetch the voice regions from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-voice-regions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVoiceRegions(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildVoiceRegionsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildVoiceRegionsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getVoiceRegions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getWebhooks:member(1)",
              "docComment": "/**\n * Fetches webhooks for a guild\n *\n * @param id - The id of the guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#get-guild-webhooks}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWebhooks(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildWebhooksResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildWebhooksResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWebhooks"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getWelcomeScreen:member(1)",
              "docComment": "/**\n * Fetches the welcome screen for a guild\n *\n * @param guildId - The id of the guild to fetch the welcome screen from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWelcomeScreen(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildWelcomeScreen",
                  "canonicalReference": "discord-api-types!APIGuildWelcomeScreen:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWelcomeScreen"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getWidget:member(1)",
              "docComment": "/**\n * Fetches the widget for a guild\n *\n * @param guildId - The id of the guild to fetch the widget from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-widget}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWidget(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildWidget",
                  "canonicalReference": "discord-api-types!APIGuildWidget:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWidget"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getWidgetImage:member(1)",
              "docComment": "/**\n * Fetches the widget image for a guild\n *\n * @param guildId - The id of the guild to fetch the widget image from\n *\n * @param style - The style of the widget image\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-image}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWidgetImage(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", style?: "
                },
                {
                  "kind": "Reference",
                  "text": "GuildWidgetStyle",
                  "canonicalReference": "discord-api-types!GuildWidgetStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWidgetImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#getWidgetSettings:member(1)",
              "docComment": "/**\n * Fetches the widget settings for a guild\n *\n * @param guildId - The id of the guild to fetch the widget settings from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-settings}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWidgetSettings(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getWidgetSettings"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#removeRoleFromMember:member(1)",
              "docComment": "/**\n * Removes a role from a guild member\n *\n * @param guildId - The id of the guild\n *\n * @param userId - The id of the user\n *\n * @param roleId - The id of the role\n *\n * @param reason - The reason for removing this role from the guild member\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#remove-guild-member-role}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeRoleFromMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", roleId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "roleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeRoleFromMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#searchForMembers:member(1)",
              "docComment": "/**\n * Searches for guild members\n *\n * @param guildId - The id of the guild to search in\n *\n * @param query - The query to search for\n *\n * @param limit - The maximum number of members to return\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#search-guild-members}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchForMembers(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildMembersSearchQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildMembersSearchQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIGuildMembersSearchResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIGuildMembersSearchResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "searchForMembers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#setChannelPositions:member(1)",
              "docComment": "/**\n * Edits a guild channel's positions\n *\n * @param guildId - The id of the guild to edit the channel positions from\n *\n * @param data - The data to edit the channel positions with\n *\n * @param reason - The reason for editing the channel positions\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setChannelPositions(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildChannelPositionsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildChannelPositionsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setChannelPositions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#setRolePositions:member(1)",
              "docComment": "/**\n * Sets role positions in a guild\n *\n * @param guildId - The id of the guild to set role positions for\n *\n * @param data - The data for setting a role position\n *\n * @param reason - The reason for setting the role position\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-guild-role-positions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRolePositions(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildRolePositionsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildRolePositionsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildRolePositionsResult",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildRolePositionsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setRolePositions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#setVoiceState:member(1)",
              "docComment": "/**\n * Sets the voice state for the current user\n *\n * @param guildId - The id of the guild\n *\n * @param options - The options to use when setting the voice state\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setVoiceState(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildVoiceStateCurrentMemberJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildVoiceStateCurrentMemberJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setVoiceState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#syncTemplate:member(1)",
              "docComment": "/**\n * Syncs a template for a guild\n *\n * @param guildId - The id of the guild to sync the template from\n *\n * @param templateCode - The code of the template to sync\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild-template#sync-guild-template}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "syncTemplate(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", templateCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APITemplate",
                  "canonicalReference": "discord-api-types!APITemplate:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "templateCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "syncTemplate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!GuildsAPI#unbanUser:member(1)",
              "docComment": "/**\n * Unbans a user from a guild\n *\n * @param guildId - The id of the guild to unban the member in\n *\n * @param userId - The id of the user to unban\n *\n * @param reason - The reason for unbanning the user\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#remove-guild-ban}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unbanUser(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "unbanUser"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!InteractionsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InteractionsAPI "
            }
          ],
          "fileUrlPath": "src/api/interactions.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "InteractionsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!InteractionsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `InteractionsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ", webhooks: "
                },
                {
                  "kind": "Reference",
                  "text": "WebhooksAPI",
                  "canonicalReference": "@discordjs/core!WebhooksAPI:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "webhooks",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#createAutocompleteResponse:member(1)",
              "docComment": "/**\n * Sends an autocomplete response to an interaction\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - Data for the autocomplete response\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAutocompleteResponse(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "APICommandAutocompleteInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APICommandAutocompleteInteractionResponseCallbackData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createAutocompleteResponse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#createModal:member(1)",
              "docComment": "/**\n * Sends a modal response to an interaction\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - The modal to send\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createModal(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "APIModalInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIModalInteractionResponseCallbackData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createModal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#defer:member(1)",
              "docComment": "/**\n * Defers the reply to an interaction\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defer(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "defer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#deferMessageUpdate:member(1)",
              "docComment": "/**\n * Defers an update from a message component interaction\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deferMessageUpdate(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deferMessageUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#deleteReply:member(1)",
              "docComment": "/**\n * Deletes the initial reply to an interaction\n *\n * @param applicationId - The application id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param messageId - The id of the message to delete. If omitted, the original reply will be deleted\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-followup-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteReply(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", messageId?: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": " | '@original'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteReply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#editReply:member(1)",
              "docComment": "/**\n * Edits the initial reply to an interaction\n *\n * @param applicationId - The application id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - The data to use when editing the reply\n *\n * @param messageId - The id of the message to edit. If omitted, the original reply will be edited\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editReply(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "APIInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIInteractionResponseCallbackData:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", messageId?: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": " | '@original'"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 12
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editReply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#followUp:member(1)",
              "docComment": "/**\n * Reply to a deferred interaction\n *\n * @param applicationId - The application id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - The data to use when replying\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-followup-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "followUp(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "APIInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIInteractionResponseCallbackData:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "followUp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#getOriginalReply:member(1)",
              "docComment": "/**\n * Fetches the initial reply to an interaction\n *\n * @param applicationId - The application id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOriginalReply(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getOriginalReply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#reply:member(1)",
              "docComment": "/**\n * Replies to an interaction\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - The data to use when replying\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reply(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", { files, ...data }: "
                },
                {
                  "kind": "Reference",
                  "text": "APIInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIInteractionResponseCallbackData:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ files, ...data }",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "reply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InteractionsAPI#updateMessage:member(1)",
              "docComment": "/**\n * Updates the the message the component interaction was triggered on\n *\n * @param interactionId - The id of the interaction\n *\n * @param interactionToken - The token of the interaction\n *\n * @param data - The data to use when updating the interaction\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateMessage(interactionId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", interactionToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", { files, ...data }: "
                },
                {
                  "kind": "Reference",
                  "text": "APIInteractionResponseCallbackData",
                  "canonicalReference": "discord-api-types!APIInteractionResponseCallbackData:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interactionId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "interactionToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ files, ...data }",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateMessage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!IntrinsicProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IntrinsicProps "
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "name": "IntrinsicProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!IntrinsicProps#api:member",
              "docComment": "/**\n * The REST API\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "api: "
                },
                {
                  "kind": "Reference",
                  "text": "API",
                  "canonicalReference": "@discordjs/core!API:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "api",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!IntrinsicProps#shardId:member",
              "docComment": "/**\n * The id of the shard that emitted the event\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shardId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shardId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!InvitesAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InvitesAPI "
            }
          ],
          "fileUrlPath": "src/api/invite.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "InvitesAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!InvitesAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `InvitesAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InvitesAPI#delete:member(1)",
              "docComment": "/**\n * Deletes an invite\n *\n * @param code - The invite code\n *\n * @param reason - The reason for deleting the invite\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/invite#delete-invite}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!InvitesAPI#get:member(1)",
              "docComment": "/**\n * Fetches an invite\n *\n * @param code - The invite code\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/invite#get-invite}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIInviteQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPIInviteQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIInvite",
                  "canonicalReference": "discord-api-types!APIInvite:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@discordjs/core!ManagerShardEventsMap:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ManagerShardEventsMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof "
            },
            {
              "kind": "Reference",
              "text": "MappedEvents",
              "canonicalReference": "@discordjs/core!MappedEvents:interface"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "MappedEvents",
              "canonicalReference": "@discordjs/core!MappedEvents:interface"
            },
            {
              "kind": "Content",
              "text": "[K];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "name": "ManagerShardEventsMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!MappedEvents:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MappedEvents "
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "name": "MappedEvents",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#AUTO_MODERATION_ACTION_EXECUTION:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.AutoModerationActionExecution",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.AutoModerationActionExecution:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "[\n        "
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayAutoModerationActionExecutionDispatchData",
                  "canonicalReference": "discord-api-types!GatewayAutoModerationActionExecutionDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">\n    ]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "AUTO_MODERATION_ACTION_EXECUTION",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#AUTO_MODERATION_RULE_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.AutoModerationRuleCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.AutoModerationRuleCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayAutoModerationRuleCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayAutoModerationRuleCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "AUTO_MODERATION_RULE_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#AUTO_MODERATION_RULE_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.AutoModerationRuleDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.AutoModerationRuleDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayAutoModerationRuleDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayAutoModerationRuleDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "AUTO_MODERATION_RULE_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#AUTO_MODERATION_RULE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.AutoModerationRuleUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.AutoModerationRuleUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayAutoModerationRuleUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayAutoModerationRuleUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "AUTO_MODERATION_RULE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#CHANNEL_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ChannelCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ChannelCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayChannelCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayChannelCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CHANNEL_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#CHANNEL_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ChannelDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ChannelDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayChannelDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayChannelDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CHANNEL_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#CHANNEL_PINS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ChannelPinsUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ChannelPinsUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayChannelPinsUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayChannelPinsUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CHANNEL_PINS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#CHANNEL_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ChannelUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ChannelUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayChannelUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayChannelUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CHANNEL_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_AUDIT_LOG_ENTRY_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildAuditLogEntryCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildAuditLogEntryCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildAuditLogEntryCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildAuditLogEntryCreateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_AUDIT_LOG_ENTRY_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_BAN_ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildBanAdd",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildBanAdd:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildBanAddDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildBanAddDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_BAN_ADD",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_BAN_REMOVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildBanRemove",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildBanRemove:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildBanRemoveDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildBanRemoveDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_BAN_REMOVE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildCreateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_EMOJIS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildEmojisUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildEmojisUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildEmojisUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildEmojisUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_EMOJIS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_INTEGRATIONS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildIntegrationsUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildIntegrationsUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildIntegrationsUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildIntegrationsUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_INTEGRATIONS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_MEMBER_ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildMemberAdd",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildMemberAdd:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildMemberAddDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildMemberAddDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_MEMBER_ADD",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_MEMBER_REMOVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildMemberRemove",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildMemberRemove:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildMemberRemoveDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildMemberRemoveDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_MEMBER_REMOVE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_MEMBER_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildMemberUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildMemberUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildMemberUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildMemberUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_MEMBER_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_MEMBERS_CHUNK:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildMembersChunk",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildMembersChunk:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildMembersChunkDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildMembersChunkDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_MEMBERS_CHUNK",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_ROLE_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildRoleCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildRoleCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildRoleCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildRoleCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_ROLE_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_ROLE_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildRoleDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildRoleDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildRoleDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildRoleDeleteDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_ROLE_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_ROLE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildRoleUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildRoleUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildRoleUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildRoleUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_ROLE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_SCHEDULED_EVENT_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildScheduledEventCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildScheduledEventCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildScheduledEventCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildScheduledEventCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_SCHEDULED_EVENT_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_SCHEDULED_EVENT_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildScheduledEventDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildScheduledEventDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildScheduledEventDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildScheduledEventDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_SCHEDULED_EVENT_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_SCHEDULED_EVENT_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildScheduledEventUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildScheduledEventUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildScheduledEventUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildScheduledEventUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_SCHEDULED_EVENT_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_SCHEDULED_EVENT_USER_ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildScheduledEventUserAdd",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildScheduledEventUserAdd:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "[\n        "
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildScheduledEventUserAddDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildScheduledEventUserAddDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">\n    ]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_SCHEDULED_EVENT_USER_ADD",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_SCHEDULED_EVENT_USER_REMOVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildScheduledEventUserRemove",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildScheduledEventUserRemove:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "[\n        "
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildScheduledEventUserRemoveDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildScheduledEventUserRemoveDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">\n    ]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_SCHEDULED_EVENT_USER_REMOVE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_STICKERS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildStickersUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildStickersUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildStickersUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildStickersUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_STICKERS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#GUILD_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.GuildUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.GuildUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayGuildUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayGuildUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GUILD_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INTEGRATION_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.IntegrationCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.IntegrationCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayIntegrationCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayIntegrationCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INTEGRATION_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INTEGRATION_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.IntegrationDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.IntegrationDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayIntegrationDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayIntegrationDeleteDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INTEGRATION_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INTEGRATION_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.IntegrationUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.IntegrationUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayIntegrationUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayIntegrationUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INTEGRATION_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INTERACTION_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.InteractionCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.InteractionCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayInteractionCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayInteractionCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INTERACTION_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INVITE_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.InviteCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.InviteCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayInviteCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayInviteCreateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INVITE_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#INVITE_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.InviteDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.InviteDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayInviteDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayInviteDeleteDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INVITE_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_DELETE_BULK:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageDeleteBulk",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageDeleteBulk:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageDeleteBulkDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageDeleteBulkDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_DELETE_BULK",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageDeleteDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_REACTION_ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageReactionAdd",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageReactionAdd:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageReactionAddDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageReactionAddDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_REACTION_ADD",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_REACTION_REMOVE_ALL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageReactionRemoveAll",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageReactionRemoveAll:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageReactionRemoveAllDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageReactionRemoveAllDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_REACTION_REMOVE_ALL",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_REACTION_REMOVE_EMOJI:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageReactionRemoveEmoji",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageReactionRemoveEmoji:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "[\n        "
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageReactionRemoveEmojiDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageReactionRemoveEmojiDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">\n    ]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_REACTION_REMOVE_EMOJI",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_REACTION_REMOVE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageReactionRemove",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageReactionRemove:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageReactionRemoveDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageReactionRemoveDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_REACTION_REMOVE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#MESSAGE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.MessageUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.MessageUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayMessageUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayMessageUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "MESSAGE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#PRESENCE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.PresenceUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.PresenceUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayPresenceUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayPresenceUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PRESENCE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#READY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.Ready",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.Ready:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayReadyDispatchData",
                  "canonicalReference": "discord-api-types!GatewayReadyDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "READY",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#RESUMED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.Resumed",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.Resumed:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "RESUMED",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#STAGE_INSTANCE_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.StageInstanceCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.StageInstanceCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayStageInstanceCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayStageInstanceCreateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "STAGE_INSTANCE_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#STAGE_INSTANCE_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.StageInstanceDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.StageInstanceDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayStageInstanceDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayStageInstanceDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "STAGE_INSTANCE_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#STAGE_INSTANCE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.StageInstanceUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.StageInstanceUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayStageInstanceUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayStageInstanceUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "STAGE_INSTANCE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_CREATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadCreate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadCreate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadCreateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadCreateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_CREATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_DELETE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadDelete",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadDelete:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadDeleteDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadDeleteDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_DELETE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_LIST_SYNC:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadListSync",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadListSync:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadListSyncDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadListSyncDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_LIST_SYNC",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_MEMBER_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadMemberUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadMemberUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadMemberUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadMemberUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_MEMBER_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_MEMBERS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadMembersUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadMembersUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadMembersUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadMembersUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_MEMBERS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#THREAD_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.ThreadUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.ThreadUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayThreadUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayThreadUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "THREAD_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#TYPING_START:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.TypingStart",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.TypingStart:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayTypingStartDispatchData",
                  "canonicalReference": "discord-api-types!GatewayTypingStartDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "TYPING_START",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#USER_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.UserUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.UserUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayUserUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayUserUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "USER_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#VOICE_SERVER_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.VoiceServerUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.VoiceServerUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayVoiceServerUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayVoiceServerUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "VOICE_SERVER_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#VOICE_STATE_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.VoiceStateUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.VoiceStateUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayVoiceStateUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayVoiceStateUpdateDispatchData:type"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "VOICE_STATE_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!MappedEvents#WEBHOOKS_UPDATE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "GatewayDispatchEvents.WebhooksUpdate",
                  "canonicalReference": "discord-api-types!GatewayDispatchEvents.WebhooksUpdate:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "WithIntrinsicProps",
                  "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatewayWebhooksUpdateDispatchData",
                  "canonicalReference": "discord-api-types!GatewayWebhooksUpdateDispatchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ">]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "WEBHOOKS_UPDATE",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!OAuth2API:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OAuth2API "
            }
          ],
          "fileUrlPath": "src/api/oauth2.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "OAuth2API",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!OAuth2API:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `OAuth2API` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#generateAuthorizationURL:member(1)",
              "docComment": "/**\n * Creates an OAuth2 authorization URL given the options\n *\n * @param options - The options for creating the authorization URL\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-authorization-url-example}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateAuthorizationURL(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTOAuth2AuthorizationQuery",
                  "canonicalReference": "discord-api-types!RESTOAuth2AuthorizationQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "generateAuthorizationURL"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#getCurrentAuthorizationInformation:member(1)",
              "docComment": "/**\n * Fetches the current authorization information\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#get-current-authorization-information}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentAuthorizationInformation(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIOAuth2CurrentAuthorizationResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIOAuth2CurrentAuthorizationResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCurrentAuthorizationInformation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#getCurrentBotApplicationInformation:member(1)",
              "docComment": "/**\n * Fetches the current bot's application information\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentBotApplicationInformation(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIOAuth2CurrentApplicationResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIOAuth2CurrentApplicationResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCurrentBotApplicationInformation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#getToken:member(1)",
              "docComment": "/**\n * Fetches the bearer token for the current application\n *\n * @remarks\n *\n * This is primarily used for testing purposes\n *\n * @param options - The options for the client credentials grant request\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#client-credentials-grant}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getToken(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostOAuth2ClientCredentialsURLEncodedData",
                  "canonicalReference": "discord-api-types!RESTPostOAuth2ClientCredentialsURLEncodedData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "RESTOAuth2ImplicitAuthorizationURLFragmentResult",
                  "canonicalReference": "discord-api-types!RESTOAuth2ImplicitAuthorizationURLFragmentResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getToken"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#refreshToken:member(1)",
              "docComment": "/**\n * Refreshes an OAuth2 access token, giving you a new one\n *\n * @param options - The options for the refresh token request\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-refresh-token-exchange-example}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshToken(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostOAuth2RefreshTokenURLEncodedData",
                  "canonicalReference": "discord-api-types!RESTPostOAuth2RefreshTokenURLEncodedData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostOAuth2AccessTokenResult",
                  "canonicalReference": "discord-api-types!RESTPostOAuth2AccessTokenResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "refreshToken"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!OAuth2API#tokenExchange:member(1)",
              "docComment": "/**\n * Performs an OAuth2 token exchange, giving you an access token\n *\n * @param options - The options for the token exchange request\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-exchange-example}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tokenExchange(options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostOAuth2AccessTokenURLEncodedData",
                  "canonicalReference": "discord-api-types!RESTPostOAuth2AccessTokenURLEncodedData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostOAuth2AccessTokenResult",
                  "canonicalReference": "discord-api-types!RESTPostOAuth2AccessTokenResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "tokenExchange"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!RoleConnectionsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RoleConnectionsAPI "
            }
          ],
          "fileUrlPath": "src/api/roleConnections.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RoleConnectionsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!RoleConnectionsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RoleConnectionsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!RoleConnectionsAPI#getMetadataRecords:member(1)",
              "docComment": "/**\n * Gets the role connection metadata records for the application\n *\n * @param applicationId - The id of the application to get role connection metadata records for\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetadataRecords(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIApplicationRoleConnectionMetadataResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIApplicationRoleConnectionMetadataResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMetadataRecords"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!RoleConnectionsAPI#updateMetadataRecords:member(1)",
              "docComment": "/**\n * Updates the role connection metadata records for the application\n *\n * @param applicationId - The id of the application to update role connection metadata records for\n *\n * @param options - The new role connection metadata records\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateMetadataRecords(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationCommandPermissionsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationCommandPermissionsJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPIApplicationRoleConnectionMetadataResult",
                  "canonicalReference": "discord-api-types!RESTPutAPIApplicationRoleConnectionMetadataResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateMetadataRecords"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!StartForumThreadOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StartForumThreadOptions extends "
            },
            {
              "kind": "Reference",
              "text": "RESTPostAPIGuildForumThreadsJSONBody",
              "canonicalReference": "discord-api-types!RESTPostAPIGuildForumThreadsJSONBody:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/api/thread.ts",
          "releaseTag": "Public",
          "name": "StartForumThreadOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!StartForumThreadOptions#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIGuildForumThreadsJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIGuildForumThreadsJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": "['message'] & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!StartThreadOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StartThreadOptions extends "
            },
            {
              "kind": "Reference",
              "text": "RESTPostAPIChannelThreadsJSONBody",
              "canonicalReference": "discord-api-types!RESTPostAPIChannelThreadsJSONBody:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/api/thread.ts",
          "releaseTag": "Public",
          "name": "StartThreadOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!StartThreadOptions#message_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message_id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!StickersAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StickersAPI "
            }
          ],
          "fileUrlPath": "src/api/sticker.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "StickersAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!StickersAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StickersAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!StickersAPI#get:member(1)",
              "docComment": "/**\n * Fetches a sticker\n *\n * @param stickerId - The id of the sticker\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#get-sticker}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(stickerId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APISticker",
                  "canonicalReference": "discord-api-types!APISticker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "stickerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!StickersAPI#getNitroStickers:member(1)",
              "docComment": "/**\n * Fetches all of the nitro sticker packs\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNitroStickers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetNitroStickerPacksResult",
                  "canonicalReference": "discord-api-types!RESTGetNitroStickerPacksResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getNitroStickers"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!ThreadsAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ThreadsAPI "
            }
          ],
          "fileUrlPath": "src/api/thread.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ThreadsAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!ThreadsAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ThreadsAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#addMember:member(1)",
              "docComment": "/**\n * Adds a member to a thread\n *\n * @param threadId - The id of the thread to add the member to\n *\n * @param userId - The id of the user to add to the thread\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#add-thread-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMember(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#create:member(1)",
              "docComment": "/**\n * Creates a new thread\n *\n * @param channelId - The id of the channel to start the thread in\n *\n * @param data - The data to use when starting the thread\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#start-thread-from-message}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#start-thread-without-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { message_id, ...body }: "
                },
                {
                  "kind": "Reference",
                  "text": "StartThreadOptions",
                  "canonicalReference": "@discordjs/core!StartThreadOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ message_id, ...body }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#createForumThread:member(1)",
              "docComment": "/**\n * Creates a new forum post\n *\n * @param channelId - The id of the forum channel to start the thread in\n *\n * @param data - The data to use when starting the thread\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createForumThread(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { message, ...optionsBody }: "
                },
                {
                  "kind": "Reference",
                  "text": "StartForumThreadOptions",
                  "canonicalReference": "@discordjs/core!StartForumThreadOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIThreadChannel",
                  "canonicalReference": "discord-api-types!APIThreadChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ message, ...optionsBody }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createForumThread"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#get:member(1)",
              "docComment": "/**\n * Fetches a thread\n *\n * @param threadId - The id of the thread\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-channel}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIThreadChannel",
                  "canonicalReference": "discord-api-types!APIThreadChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#getAllMembers:member(1)",
              "docComment": "/**\n * Fetches all members of a thread\n *\n * @param threadId - The id of the thread to fetch the members from\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#list-thread-members}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAllMembers(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIChannelThreadMembersResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIChannelThreadMembersResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAllMembers"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#getMember:member(1)",
              "docComment": "/**\n * Fetches a member of a thread\n *\n * @param threadId - The id of the thread to fetch the member from\n *\n * @param userId - The id of the user\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#get-thread-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMember(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "APIThreadMember",
                  "canonicalReference": "discord-api-types!APIThreadMember:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#join:member(1)",
              "docComment": "/**\n * Adds the current user to a thread\n *\n * @param threadId - The id of the thread to join\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#join-thread}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "join(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "join"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#leave:member(1)",
              "docComment": "/**\n * Removes the current user from a thread\n *\n * @param threadId - The id of the thread to leave\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#leave-thread}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leave(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "leave"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!ThreadsAPI#removeMember:member(1)",
              "docComment": "/**\n * Removes a member from a thread\n *\n * @param threadId - The id of the thread to remove the member from\n *\n * @param userId - The id of the user to remove from the thread\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/channel#remove-thread-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeMember(threadId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "threadId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "removeMember"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!UsersAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UsersAPI "
            }
          ],
          "fileUrlPath": "src/api/user.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "UsersAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!UsersAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `UsersAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#createDM:member(1)",
              "docComment": "/**\n * Opens a new DM channel with a user\n *\n * @param userId - The id of the user to open a DM channel with\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#create-dm}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createDM(userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIChannel",
                  "canonicalReference": "discord-api-types!APIChannel:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "createDM"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#edit:member(1)",
              "docComment": "/**\n * Edits the current user\n *\n * @param user - The new data for the current user\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#modify-current-user}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edit(user: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPICurrentUserJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPICurrentUserJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIUser",
                  "canonicalReference": "discord-api-types!APIUser:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "user",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "edit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#editGuildMember:member(1)",
              "docComment": "/**\n * Edits the guild member for the current user\n *\n * @param guildId - The id of the guild\n *\n * @param member - The new data for the guild member\n *\n * @param reason - The reason for editing this guild member\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/guild#modify-current-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editGuildMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", member?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIGuildMemberJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIGuildMemberJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildMember",
                  "canonicalReference": "discord-api-types!APIGuildMember:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "member",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editGuildMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#get:member(1)",
              "docComment": "/**\n * Fetches a user by their id\n *\n * @param userId - The id of the user to fetch\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-user}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(userId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIUser",
                  "canonicalReference": "discord-api-types!APIUser:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#getApplicationRoleConnection:member(1)",
              "docComment": "/**\n * Gets the current user's active application role connection\n *\n * @param applicationId - The id of the application\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-user-application-role-connection}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getApplicationRoleConnection(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationRoleConnection",
                  "canonicalReference": "discord-api-types!APIApplicationRoleConnection:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getApplicationRoleConnection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#getConnections:member(1)",
              "docComment": "/**\n * Gets the current user's connections\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-user-connections}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConnections(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPICurrentUserConnectionsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPICurrentUserConnectionsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getConnections"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#getCurrent:member(1)",
              "docComment": "/**\n * Returns the user object of the requester's account\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-current-user}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrent(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIUser",
                  "canonicalReference": "discord-api-types!APIUser:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCurrent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#getGuildMember:member(1)",
              "docComment": "/**\n * Fetches the guild member for the current user\n *\n * @param guildId - The id of the guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-current-user-guild-member}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuildMember(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIGuildMember",
                  "canonicalReference": "discord-api-types!APIGuildMember:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuildMember"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#getGuilds:member(1)",
              "docComment": "/**\n * Returns a list of partial guild objects the current user is a member of\n *\n * @param options - The options to use when fetching the current user's guilds\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#get-current-user-guilds}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGuilds(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPICurrentUserGuildsQuery",
                  "canonicalReference": "discord-api-types!RESTGetAPICurrentUserGuildsQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPICurrentUserGuildsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPICurrentUserGuildsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getGuilds"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#leaveGuild:member(1)",
              "docComment": "/**\n * Leaves the guild with the given id\n *\n * @param guildId - The id of the guild\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#leave-guild}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leaveGuild(guildId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "guildId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "leaveGuild"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!UsersAPI#updateApplicationRoleConnection:member(1)",
              "docComment": "/**\n * Updates the current user's application role connection\n *\n * @param applicationId - The id of the application\n *\n * @param options - The options to use when updating the application role connection\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/user#update-user-application-role-connection}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateApplicationRoleConnection(applicationId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPutAPICurrentUserApplicationRoleConnectionJSONBody",
                  "canonicalReference": "discord-api-types!RESTPutAPICurrentUserApplicationRoleConnectionJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIApplicationRoleConnection",
                  "canonicalReference": "discord-api-types!APIApplicationRoleConnection:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "applicationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateApplicationRoleConnection"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!VoiceAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VoiceAPI "
            }
          ],
          "fileUrlPath": "src/api/voice.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "VoiceAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!VoiceAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VoiceAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!VoiceAPI#getVoiceRegions:member(1)",
              "docComment": "/**\n * Fetches all voice regions\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/voice#list-voice-regions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVoiceRegions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "RESTGetAPIVoiceRegionsResult",
                  "canonicalReference": "discord-api-types!RESTGetAPIVoiceRegionsResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getVoiceRegions"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@discordjs/core!WebhooksAPI:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WebhooksAPI "
            }
          ],
          "fileUrlPath": "src/api/webhook.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "WebhooksAPI",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@discordjs/core!WebhooksAPI:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WebhooksAPI` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(rest: "
                },
                {
                  "kind": "Reference",
                  "text": "REST",
                  "canonicalReference": "@discordjs/rest!REST:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#create:member(1)",
              "docComment": "/**\n * Creates a new webhook\n *\n * @param channelId - The id of the channel to create the webhook in\n *\n * @param data - The data to use when creating the webhook\n *\n * @param reason - The reason for creating the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#create-webhook}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(channelId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIChannelWebhookJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIChannelWebhookJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", reason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "channelId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#delete:member(1)",
              "docComment": "/**\n * Deletes a webhook\n *\n * @param id - The id of the webhook to delete\n *\n * @param options - The options to use when deleting the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#delete-webhook}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { token, reason }?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        reason?: string;\n        token?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ token, reason }",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#deleteMessage:member(1)",
              "docComment": "/**\n * Deletes an associated message from a webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param messageId - The id of the message to delete\n *\n * @param options - The options to use when deleting the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#delete-webhook-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteMessage(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        thread_id?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "deleteMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#edit:member(1)",
              "docComment": "/**\n * Edits a webhook\n *\n * @param id - The id of the webhook to edit\n *\n * @param webhook - The new webhook data\n *\n * @param options - The options to use when editing the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#modify-webhook}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edit(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", webhook: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIWebhookJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIWebhookJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": ", { token, reason }?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        reason?: string;\n        token?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIWebhook",
                  "canonicalReference": "discord-api-types!APIWebhook:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "webhook",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ token, reason }",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "edit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#editMessage:member(1)",
              "docComment": "/**\n * Edits an associated message from a webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param messageId - The id of the message to edit\n *\n * @param data - The data to use when editing the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#edit-webhook-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMessage(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", { thread_id, ...body }: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPatchAPIWebhookWithTokenMessageJSONBody",
                  "canonicalReference": "discord-api-types!RESTPatchAPIWebhookWithTokenMessageJSONBody:type"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        thread_id?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "{ thread_id, ...body }",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "editMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#execute:member(1)",
              "docComment": "/**\n * Executes a webhook and returns the created message\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param data - The data to use when executing the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": " & "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenQuery",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        wait: true;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenWaitResult",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenWaitResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#execute:member(2)",
              "docComment": "/**\n * Executes a webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param data - The data to use when executing the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenJSONBody",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenJSONBody:interface"
                },
                {
                  "kind": "Content",
                  "text": " & "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenQuery",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": " & {\n        files?: "
                },
                {
                  "kind": "Reference",
                  "text": "RawFile",
                  "canonicalReference": "@discordjs/rest!RawFile:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        wait?: false;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#executeGitHub:member(1)",
              "docComment": "/**\n * Executes a github webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param options - The options to use when executing the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#execute-githubcompatible-webhook}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeGitHub(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", body: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenGitHubQuery",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenGitHubQuery:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "body",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeGitHub"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#executeSlack:member(1)",
              "docComment": "/**\n * Executes a slack webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param options - The options to use when executing the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#execute-slackcompatible-webhook}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeSlack(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", body: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "RESTPostAPIWebhookWithTokenSlackQuery",
                  "canonicalReference": "discord-api-types!RESTPostAPIWebhookWithTokenSlackQuery:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "body",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeSlack"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#get:member(1)",
              "docComment": "/**\n * Fetches a webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#get-webhook}\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#get-webhook-with-token}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIWebhook",
                  "canonicalReference": "discord-api-types!APIWebhook:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@discordjs/core!WebhooksAPI#getMessage:member(1)",
              "docComment": "/**\n * Fetches an associated message from a webhook\n *\n * @param id - The id of the webhook\n *\n * @param token - The token of the webhook\n *\n * @param messageId - The id of the message to fetch\n *\n * @param options - The options to use when fetching the message\n *\n * @see\n *\n * {@link https://discord.com/developers/docs/resources/webhook#get-webhook-message}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMessage(id: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", messageId: "
                },
                {
                  "kind": "Reference",
                  "text": "Snowflake",
                  "canonicalReference": "discord-api-types!Snowflake:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        thread_id?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<import(\"discord-api-types/v10\")."
                },
                {
                  "kind": "Reference",
                  "text": "APIMessage",
                  "canonicalReference": "discord-api-types!APIMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMessage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@discordjs/core!withFiles:function(1)",
          "docComment": "/**\n * A utility function to create a form data payload given an array of file buffers\n *\n * @param files - The files to create a form data payload for\n *\n * @param options - The additional options for the form data payload\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withFiles(files: "
            },
            {
              "kind": "Reference",
              "text": "DescriptiveRawFile",
              "canonicalReference": "@discordjs/core!DescriptiveRawFile:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "APIInteractionResponseCallbackData",
              "canonicalReference": "discord-api-types!APIInteractionResponseCallbackData:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    body: {\n        attachments: {\n            id: string;\n            description: string | undefined;\n        }[];\n        content?: string | undefined;\n        tts?: boolean | undefined;\n        embeds?: import(\"discord-api-types/v10\")."
            },
            {
              "kind": "Reference",
              "text": "APIEmbed",
              "canonicalReference": "discord-api-types!APIEmbed:interface"
            },
            {
              "kind": "Content",
              "text": "[] | undefined;\n        allowed_mentions?: import(\"discord-api-types/v10\")."
            },
            {
              "kind": "Reference",
              "text": "APIAllowedMentions",
              "canonicalReference": "discord-api-types!APIAllowedMentions:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n        components?: import(\"discord-api-types/v10\")."
            },
            {
              "kind": "Reference",
              "text": "APIActionRowComponent",
              "canonicalReference": "discord-api-types!APIActionRowComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<import(\"discord-api-types/v10\")."
            },
            {
              "kind": "Reference",
              "text": "APIMessageActionRowComponent",
              "canonicalReference": "discord-api-types!APIMessageActionRowComponent:type"
            },
            {
              "kind": "Content",
              "text": ">[] | undefined;\n        flags?: import(\"discord-api-types/v10\")."
            },
            {
              "kind": "Reference",
              "text": "MessageFlags",
              "canonicalReference": "discord-api-types!MessageFlags:enum"
            },
            {
              "kind": "Content",
              "text": ";\n        thread_name?: string | undefined;\n    };\n    files: {\n        name: string;\n        data: string | number | boolean | "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    }[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/util/files.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "files",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "withFiles"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@discordjs/core!WithIntrinsicProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WithIntrinsicProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "IntrinsicProps",
              "canonicalReference": "@discordjs/core!IntrinsicProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/client.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "WithIntrinsicProps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@discordjs/core!WithIntrinsicProps#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        }
      ]
    }
  ]
}
